{
    "sourceFile": "Core/Src/main.c",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1624516517756,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1624521858306,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,9 +89,16 @@\n   MX_GPIO_Init();\r\n   MX_USART1_UART_Init();\r\n   MX_SPI2_Init();\r\n   /* USER CODE BEGIN 2 */\r\n-\r\n+  \r\n+  while(NRF24L01_Check())\r\n+\t{\r\n+    printf(\"Can not find NRF24L01!\\r\\n\"); \r\n+\t\tHAL_Delay(1000);\r\n+\t}\r\n+  printf(\"Connect to NRF24L01 Successfully!\\r\\n\");\r\n+  \r\n   /* USER CODE END 2 */\r\n \r\n   /* Infinite loop */\r\n   /* USER CODE BEGIN WHILE */\r\n@@ -104,9 +111,9 @@\n     //master\r\n     //先处在TX_Mode,TX_Mode要可以选择通过哪个通道发送\r\n     //发送成功后处于RX_Mode，RX_Mode要可以打印出接收的通道来源\r\n     //接收成功后继续变为TX_Mode，重复上述过程\r\n-    \r\n+    NRF24L01_TX_Mode()    \r\n \r\n   }\r\n   /* USER CODE END 3 */\r\n }\r\n"
                },
                {
                    "date": 1624521880430,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n     //master\r\n     //先处在TX_Mode,TX_Mode要可以选择通过哪个通道发送\r\n     //发送成功后处于RX_Mode，RX_Mode要可以打印出接收的通道来源\r\n     //接收成功后继续变为TX_Mode，重复上述过程\r\n-    NRF24L01_TX_Mode()    \r\n+    NRF24L01_TX_Mode(0);    \r\n \r\n   }\r\n   /* USER CODE END 3 */\r\n }\r\n"
                },
                {
                    "date": 1624521896176,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,9 @@\n #include \"gpio.h\"\r\n \r\n /* Private includes ----------------------------------------------------------*/\r\n /* USER CODE BEGIN Includes */\r\n-\r\n+#include \"NRF24L01.h\"\r\n /* USER CODE END Includes */\r\n \r\n /* Private typedef -----------------------------------------------------------*/\r\n /* USER CODE BEGIN PTD */\r\n"
                },
                {
                    "date": 1624522039585,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,9 @@\n /* USER CODE END PD */\r\n \r\n /* Private macro -------------------------------------------------------------*/\r\n /* USER CODE BEGIN PM */\r\n-\r\n+uint8_t tmp_buf[33] = \"test\";\r\n /* USER CODE END PM */\r\n \r\n /* Private variables ---------------------------------------------------------*/\r\n \r\n@@ -111,9 +111,17 @@\n     //master\r\n     //先处在TX_Mode,TX_Mode要可以选择通过哪个通道发送\r\n     //发送成功后处于RX_Mode，RX_Mode要可以打印出接收的通道来源\r\n     //接收成功后继续变为TX_Mode，重复上述过程\r\n-    NRF24L01_TX_Mode(0);    \r\n+    NRF24L01_TX_Mode(0);\r\n+    if(NRF24L01_TxPacket(tmp_buf)==TX_OK)\r\n+    {\r\n+      printf(\"Channel 0 TX successfully!/r/n\");\r\n+    }\r\n+    else\r\n+    {\r\n+      printf(\"Channel 0 TX fail!\\r\\n\");\r\n+    }     \r\n \r\n   }\r\n   /* USER CODE END 3 */\r\n }\r\n"
                },
                {
                    "date": 1624522587468,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -38,9 +38,10 @@\n /* USER CODE END PD */\r\n \r\n /* Private macro -------------------------------------------------------------*/\r\n /* USER CODE BEGIN PM */\r\n-uint8_t tmp_buf[33] = \"test\";\r\n+uint8_t tx_buf[33] = \"test\";\r\n+uint8_t rx_buf[33];\r\n /* USER CODE END PM */\r\n \r\n /* Private variables ---------------------------------------------------------*/\r\n \r\n@@ -111,18 +112,37 @@\n     //master\r\n     //先处在TX_Mode,TX_Mode要可以选择通过哪个通道发送\r\n     //发送成功后处于RX_Mode，RX_Mode要可以打印出接收的通道来源\r\n     //接收成功后继续变为TX_Mode，重复上述过程\r\n-    NRF24L01_TX_Mode(0);\r\n-    if(NRF24L01_TxPacket(tmp_buf)==TX_OK)\r\n+    for(uint8_t i=0;i<4;i++)\r\n     {\r\n-      printf(\"Channel 0 TX successfully!/r/n\");\r\n+      NRF24L01_TX_Mode(i);\r\n+      if(NRF24L01_TxPacket(tx_buf)==TX_OK)\r\n+      {\r\n+        printf(\"Channel %d select successfully!/r/n\",i);\r\n+      }\r\n+      else\r\n+      {\r\n+        printf(\"Channel %d select fail!\\r\\n\",i);\r\n+        HAL_Delay(1000);\r\n+      }\r\n+      NRF24L01_RX_Mode(0);\r\n+      if(NRF24L01_RxPacket(rx_buf)==0)\r\n+      {     \r\n+        printf(\"Channel %d receive:%s\\r\\n\",i,rx_buf);\r\n+        HAL_Delay(1000);\r\n+      }\r\n+      else\r\n+      {\r\n+        printf(\"Channel %d rx fail!\\r\\n\",i);\r\n+      }\r\n     }\r\n-    else\r\n-    {\r\n-      printf(\"Channel 0 TX fail!\\r\\n\");\r\n-    }     \r\n \r\n+    /*Master RX Mode*/\r\n+\r\n+\r\n+        \r\n+\r\n   }\r\n   /* USER CODE END 3 */\r\n }\r\n \r\n"
                }
            ],
            "date": 1624516517756,
            "name": "Commit-0",
            "content": "/* USER CODE BEGIN Header */\r\n/**\r\n  ******************************************************************************\r\n  * @file           : main.c\r\n  * @brief          : Main program body\r\n  ******************************************************************************\r\n  * @attention\r\n  *\r\n  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.\r\n  * All rights reserved.</center></h2>\r\n  *\r\n  * This software component is licensed by ST under BSD 3-Clause license,\r\n  * the \"License\"; You may not use this file except in compliance with the\r\n  * License. You may obtain a copy of the License at:\r\n  *                        opensource.org/licenses/BSD-3-Clause\r\n  *\r\n  ******************************************************************************\r\n  */\r\n/* USER CODE END Header */\r\n/* Includes ------------------------------------------------------------------*/\r\n#include \"main.h\"\r\n#include \"spi.h\"\r\n#include \"usart.h\"\r\n#include \"gpio.h\"\r\n\r\n/* Private includes ----------------------------------------------------------*/\r\n/* USER CODE BEGIN Includes */\r\n\r\n/* USER CODE END Includes */\r\n\r\n/* Private typedef -----------------------------------------------------------*/\r\n/* USER CODE BEGIN PTD */\r\n\r\n/* USER CODE END PTD */\r\n\r\n/* Private define ------------------------------------------------------------*/\r\n/* USER CODE BEGIN PD */\r\n/* USER CODE END PD */\r\n\r\n/* Private macro -------------------------------------------------------------*/\r\n/* USER CODE BEGIN PM */\r\n\r\n/* USER CODE END PM */\r\n\r\n/* Private variables ---------------------------------------------------------*/\r\n\r\n/* USER CODE BEGIN PV */\r\n\r\n/* USER CODE END PV */\r\n\r\n/* Private function prototypes -----------------------------------------------*/\r\nvoid SystemClock_Config(void);\r\n/* USER CODE BEGIN PFP */\r\n\r\n/* USER CODE END PFP */\r\n\r\n/* Private user code ---------------------------------------------------------*/\r\n/* USER CODE BEGIN 0 */\r\n\r\n/* USER CODE END 0 */\r\n\r\n/**\r\n  * @brief  The application entry point.\r\n  * @retval int\r\n  */\r\nint main(void)\r\n{\r\n  /* USER CODE BEGIN 1 */\r\n\r\n  /* USER CODE END 1 */\r\n\r\n  /* MCU Configuration--------------------------------------------------------*/\r\n\r\n  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */\r\n  HAL_Init();\r\n\r\n  /* USER CODE BEGIN Init */\r\n\r\n  /* USER CODE END Init */\r\n\r\n  /* Configure the system clock */\r\n  SystemClock_Config();\r\n\r\n  /* USER CODE BEGIN SysInit */\r\n\r\n  /* USER CODE END SysInit */\r\n\r\n  /* Initialize all configured peripherals */\r\n  MX_GPIO_Init();\r\n  MX_USART1_UART_Init();\r\n  MX_SPI2_Init();\r\n  /* USER CODE BEGIN 2 */\r\n\r\n  /* USER CODE END 2 */\r\n\r\n  /* Infinite loop */\r\n  /* USER CODE BEGIN WHILE */\r\n  while (1)\r\n  {\r\n    /* USER CODE END WHILE */\r\n\r\n    /* USER CODE BEGIN 3 */\r\n\r\n    //master\r\n    //先处在TX_Mode,TX_Mode要可以选择通过哪个通道发送\r\n    //发送成功后处于RX_Mode，RX_Mode要可以打印出接收的通道来源\r\n    //接收成功后继续变为TX_Mode，重复上述过程\r\n    \r\n\r\n  }\r\n  /* USER CODE END 3 */\r\n}\r\n\r\n/**\r\n  * @brief System Clock Configuration\r\n  * @retval None\r\n  */\r\nvoid SystemClock_Config(void)\r\n{\r\n  RCC_OscInitTypeDef RCC_OscInitStruct = {0};\r\n  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};\r\n\r\n  /** Configure the main internal regulator output voltage\r\n  */\r\n  __HAL_RCC_PWR_CLK_ENABLE();\r\n  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);\r\n  /** Initializes the RCC Oscillators according to the specified parameters\r\n  * in the RCC_OscInitTypeDef structure.\r\n  */\r\n  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;\r\n  RCC_OscInitStruct.HSEState = RCC_HSE_ON;\r\n  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;\r\n  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;\r\n  RCC_OscInitStruct.PLL.PLLM = 25;\r\n  RCC_OscInitStruct.PLL.PLLN = 144;\r\n  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;\r\n  RCC_OscInitStruct.PLL.PLLQ = 4;\r\n  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)\r\n  {\r\n    Error_Handler();\r\n  }\r\n  /** Initializes the CPU, AHB and APB buses clocks\r\n  */\r\n  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK\r\n                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;\r\n  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\r\n  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;\r\n  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;\r\n  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;\r\n\r\n  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)\r\n  {\r\n    Error_Handler();\r\n  }\r\n}\r\n\r\n/* USER CODE BEGIN 4 */\r\n\r\n/* USER CODE END 4 */\r\n\r\n/**\r\n  * @brief  This function is executed in case of error occurrence.\r\n  * @retval None\r\n  */\r\nvoid Error_Handler(void)\r\n{\r\n  /* USER CODE BEGIN Error_Handler_Debug */\r\n  /* User can add his own implementation to report the HAL error return state */\r\n  __disable_irq();\r\n  while (1)\r\n  {\r\n  }\r\n  /* USER CODE END Error_Handler_Debug */\r\n}\r\n\r\n#ifdef  USE_FULL_ASSERT\r\n/**\r\n  * @brief  Reports the name of the source file and the source line number\r\n  *         where the assert_param error has occurred.\r\n  * @param  file: pointer to the source file name\r\n  * @param  line: assert_param error line source number\r\n  * @retval None\r\n  */\r\nvoid assert_failed(uint8_t *file, uint32_t line)\r\n{\r\n  /* USER CODE BEGIN 6 */\r\n  /* User can add his own implementation to report the file name and line number,\r\n     ex: printf(\"Wrong parameters value: file %s on line %d\\r\\n\", file, line) */\r\n  /* USER CODE END 6 */\r\n}\r\n#endif /* USE_FULL_ASSERT */\r\n\r\n/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/\r\n"
        }
    ]
}