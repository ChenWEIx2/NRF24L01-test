{
    "sourceFile": "Core/Src/main.c",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 6,
            "patches": [
                {
                    "date": 1624434751111,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1624435484764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,24 +23,12 @@\n #include \"gpio.h\"\r\n \r\n /* Private includes ----------------------------------------------------------*/\r\n /* USER CODE BEGIN Includes */\r\n-#include <stdio.h>\r\n /* USER CODE END Includes */\r\n \r\n /* Private typedef -----------------------------------------------------------*/\r\n /* USER CODE BEGIN PTD */\r\n-#ifdef __GNUC__\r\n-  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)\r\n-#else\r\n-  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)\r\n-#endif\r\n-\r\n-PUTCHAR_PROTOTYPE\r\n-{\r\n-  HAL_UART_Transmit(&huart1,(uint8_t *)&ch,1,0xFFFF);//阻塞方式打印\r\n-  return ch;\r\n-}\r\n /* USER CODE END PTD */\r\n \r\n /* Private define ------------------------------------------------------------*/\r\n /* USER CODE BEGIN PD */\r\n"
                },
                {
                    "date": 1624436848348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,8 +23,9 @@\n #include \"gpio.h\"\r\n \r\n /* Private includes ----------------------------------------------------------*/\r\n /* USER CODE BEGIN Includes */\r\n+#include <stdio.h>\r\n /* USER CODE END Includes */\r\n \r\n /* Private typedef -----------------------------------------------------------*/\r\n /* USER CODE BEGIN PTD */\r\n"
                },
                {
                    "date": 1624437406652,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,27 @@\n /* USER CODE END PFP */\r\n \r\n /* Private user code ---------------------------------------------------------*/\r\n /* USER CODE BEGIN 0 */\r\n+int __io_putchar(int ch)\r\n+{\r\n+    //具体哪个串口可以更改USART1为其它串口\r\n+    while ((USART1->SR & 0X40) == 0); //循环发送,直到发送完毕\r\n+    USART1->DR = (uint8_t) ch;\r\n+    return ch;\r\n+}\r\n \r\n+//_write函數在syscalls.c中， 使用__weak定義， 所以可以直接在其他文件中定義_write函數\r\n+__attribute__((weak)) int _write(int file, char *ptr, int len)\r\n+{\r\n+\tint DataIdx;\r\n+\tfor (DataIdx = 0; DataIdx < len; DataIdx++)\r\n+\t{\r\n+\t\t__io_putchar(*ptr++);\r\n+\t}\r\n+\treturn len;\r\n+}\r\n+\r\n /* USER CODE END 0 */\r\n \r\n /**\r\n   * @brief  The application entry point.\r\n"
                },
                {
                    "date": 1624437675932,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,15 +55,13 @@\n /* Private user code ---------------------------------------------------------*/\r\n /* USER CODE BEGIN 0 */\r\n int __io_putchar(int ch)\r\n {\r\n-    //具体哪个串口可以更改USART1为其它串口\r\n-    while ((USART1->SR & 0X40) == 0); //循环发送,直到发送完毕\r\n+    while ((USART1->SR & 0X40) == 0);\r\n     USART1->DR = (uint8_t) ch;\r\n     return ch;\r\n }\r\n \r\n-//_write函數在syscalls.c中， 使用__weak定義， 所以可以直接在其他文件中定義_write函數\r\n __attribute__((weak)) int _write(int file, char *ptr, int len)\r\n {\r\n \tint DataIdx;\r\n \tfor (DataIdx = 0; DataIdx < len; DataIdx++)\r\n"
                },
                {
                    "date": 1624437702729,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,24 +53,9 @@\n /* USER CODE END PFP */\r\n \r\n /* Private user code ---------------------------------------------------------*/\r\n /* USER CODE BEGIN 0 */\r\n-int __io_putchar(int ch)\r\n-{\r\n-    while ((USART1->SR & 0X40) == 0);\r\n-    USART1->DR = (uint8_t) ch;\r\n-    return ch;\r\n-}\r\n \r\n-__attribute__((weak)) int _write(int file, char *ptr, int len)\r\n-{\r\n-\tint DataIdx;\r\n-\tfor (DataIdx = 0; DataIdx < len; DataIdx++)\r\n-\t{\r\n-\t\t__io_putchar(*ptr++);\r\n-\t}\r\n-\treturn len;\r\n-}\r\n \r\n /* USER CODE END 0 */\r\n \r\n /**\r\n"
                },
                {
                    "date": 1624438914248,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -95,8 +95,9 @@\n   /* USER CODE BEGIN WHILE */\r\n   while (1)\r\n   {\r\n     printf(\"Hello\\r\\n\");\r\n+    printf(\"%f\\r\\n\",1.0);\r\n     /* USER CODE END WHILE */\r\n \r\n     /* USER CODE BEGIN 3 */\r\n   }\r\n"
                }
            ],
            "date": 1624434751111,
            "name": "Commit-0",
            "content": "/* USER CODE BEGIN Header */\r\n/**\r\n  ******************************************************************************\r\n  * @file           : main.c\r\n  * @brief          : Main program body\r\n  ******************************************************************************\r\n  * @attention\r\n  *\r\n  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.\r\n  * All rights reserved.</center></h2>\r\n  *\r\n  * This software component is licensed by ST under BSD 3-Clause license,\r\n  * the \"License\"; You may not use this file except in compliance with the\r\n  * License. You may obtain a copy of the License at:\r\n  *                        opensource.org/licenses/BSD-3-Clause\r\n  *\r\n  ******************************************************************************\r\n  */\r\n/* USER CODE END Header */\r\n/* Includes ------------------------------------------------------------------*/\r\n#include \"main.h\"\r\n#include \"usart.h\"\r\n#include \"gpio.h\"\r\n\r\n/* Private includes ----------------------------------------------------------*/\r\n/* USER CODE BEGIN Includes */\r\n#include <stdio.h>\r\n/* USER CODE END Includes */\r\n\r\n/* Private typedef -----------------------------------------------------------*/\r\n/* USER CODE BEGIN PTD */\r\n#ifdef __GNUC__\r\n  #define PUTCHAR_PROTOTYPE int __io_putchar(int ch)\r\n#else\r\n  #define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)\r\n#endif\r\n\r\nPUTCHAR_PROTOTYPE\r\n{\r\n  HAL_UART_Transmit(&huart1,(uint8_t *)&ch,1,0xFFFF);//阻塞方式打印\r\n  return ch;\r\n}\r\n/* USER CODE END PTD */\r\n\r\n/* Private define ------------------------------------------------------------*/\r\n/* USER CODE BEGIN PD */\r\n/* USER CODE END PD */\r\n\r\n/* Private macro -------------------------------------------------------------*/\r\n/* USER CODE BEGIN PM */\r\n\r\n/* USER CODE END PM */\r\n\r\n/* Private variables ---------------------------------------------------------*/\r\n\r\n/* USER CODE BEGIN PV */\r\n\r\n/* USER CODE END PV */\r\n\r\n/* Private function prototypes -----------------------------------------------*/\r\nvoid SystemClock_Config(void);\r\n/* USER CODE BEGIN PFP */\r\n\r\n/* USER CODE END PFP */\r\n\r\n/* Private user code ---------------------------------------------------------*/\r\n/* USER CODE BEGIN 0 */\r\n\r\n/* USER CODE END 0 */\r\n\r\n/**\r\n  * @brief  The application entry point.\r\n  * @retval int\r\n  */\r\nint main(void)\r\n{\r\n  /* USER CODE BEGIN 1 */\r\n\r\n  /* USER CODE END 1 */\r\n\r\n  /* MCU Configuration--------------------------------------------------------*/\r\n\r\n  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */\r\n  HAL_Init();\r\n\r\n  /* USER CODE BEGIN Init */\r\n\r\n  /* USER CODE END Init */\r\n\r\n  /* Configure the system clock */\r\n  SystemClock_Config();\r\n\r\n  /* USER CODE BEGIN SysInit */\r\n\r\n  /* USER CODE END SysInit */\r\n\r\n  /* Initialize all configured peripherals */\r\n  MX_GPIO_Init();\r\n  MX_USART1_UART_Init();\r\n  /* USER CODE BEGIN 2 */\r\n\r\n  /* USER CODE END 2 */\r\n\r\n  /* Infinite loop */\r\n  /* USER CODE BEGIN WHILE */\r\n  while (1)\r\n  {\r\n    printf(\"Hello\\r\\n\");\r\n    /* USER CODE END WHILE */\r\n\r\n    /* USER CODE BEGIN 3 */\r\n  }\r\n  /* USER CODE END 3 */\r\n}\r\n\r\n/**\r\n  * @brief System Clock Configuration\r\n  * @retval None\r\n  */\r\nvoid SystemClock_Config(void)\r\n{\r\n  RCC_OscInitTypeDef RCC_OscInitStruct = {0};\r\n  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};\r\n\r\n  /** Configure the main internal regulator output voltage\r\n  */\r\n  __HAL_RCC_PWR_CLK_ENABLE();\r\n  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);\r\n  /** Initializes the RCC Oscillators according to the specified parameters\r\n  * in the RCC_OscInitTypeDef structure.\r\n  */\r\n  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;\r\n  RCC_OscInitStruct.HSEState = RCC_HSE_ON;\r\n  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;\r\n  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;\r\n  RCC_OscInitStruct.PLL.PLLM = 25;\r\n  RCC_OscInitStruct.PLL.PLLN = 144;\r\n  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;\r\n  RCC_OscInitStruct.PLL.PLLQ = 4;\r\n  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)\r\n  {\r\n    Error_Handler();\r\n  }\r\n  /** Initializes the CPU, AHB and APB buses clocks\r\n  */\r\n  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK\r\n                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;\r\n  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;\r\n  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;\r\n  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;\r\n  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;\r\n\r\n  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)\r\n  {\r\n    Error_Handler();\r\n  }\r\n}\r\n\r\n/* USER CODE BEGIN 4 */\r\n\r\n/* USER CODE END 4 */\r\n\r\n/**\r\n  * @brief  This function is executed in case of error occurrence.\r\n  * @retval None\r\n  */\r\nvoid Error_Handler(void)\r\n{\r\n  /* USER CODE BEGIN Error_Handler_Debug */\r\n  /* User can add his own implementation to report the HAL error return state */\r\n  __disable_irq();\r\n  while (1)\r\n  {\r\n  }\r\n  /* USER CODE END Error_Handler_Debug */\r\n}\r\n\r\n#ifdef  USE_FULL_ASSERT\r\n/**\r\n  * @brief  Reports the name of the source file and the source line number\r\n  *         where the assert_param error has occurred.\r\n  * @param  file: pointer to the source file name\r\n  * @param  line: assert_param error line source number\r\n  * @retval None\r\n  */\r\nvoid assert_failed(uint8_t *file, uint32_t line)\r\n{\r\n  /* USER CODE BEGIN 6 */\r\n  /* User can add his own implementation to report the file name and line number,\r\n     ex: printf(\"Wrong parameters value: file %s on line %d\\r\\n\", file, line) */\r\n  /* USER CODE END 6 */\r\n}\r\n#endif /* USE_FULL_ASSERT */\r\n\r\n/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/\r\n"
        }
    ]
}