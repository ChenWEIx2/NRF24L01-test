ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"SEGGER_RTT.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._GetAvailWriteSpace,"ax",%progbits
  18              		.align	1
  19              		.arch armv7e-m
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	_GetAvailWriteSpace:
  26              	.LVL0:
  27              	.LFB4:
  28              		.file 1 "RTT/SEGGER_RTT.c"
   1:RTT/SEGGER_RTT.c **** /*********************************************************************
   2:RTT/SEGGER_RTT.c **** *                    SEGGER Microcontroller GmbH                     *
   3:RTT/SEGGER_RTT.c **** *                        The Embedded Experts                        *
   4:RTT/SEGGER_RTT.c **** **********************************************************************
   5:RTT/SEGGER_RTT.c **** *                                                                    *
   6:RTT/SEGGER_RTT.c **** *            (c) 1995 - 2021 SEGGER Microcontroller GmbH             *
   7:RTT/SEGGER_RTT.c **** *                                                                    *
   8:RTT/SEGGER_RTT.c **** *       www.segger.com     Support: support@segger.com               *
   9:RTT/SEGGER_RTT.c **** *                                                                    *
  10:RTT/SEGGER_RTT.c **** **********************************************************************
  11:RTT/SEGGER_RTT.c **** *                                                                    *
  12:RTT/SEGGER_RTT.c **** *       SEGGER RTT * Real Time Transfer for embedded targets         *
  13:RTT/SEGGER_RTT.c **** *                                                                    *
  14:RTT/SEGGER_RTT.c **** **********************************************************************
  15:RTT/SEGGER_RTT.c **** *                                                                    *
  16:RTT/SEGGER_RTT.c **** * All rights reserved.                                               *
  17:RTT/SEGGER_RTT.c **** *                                                                    *
  18:RTT/SEGGER_RTT.c **** * SEGGER strongly recommends to not make any changes                 *
  19:RTT/SEGGER_RTT.c **** * to or modify the source code of this software in order to stay     *
  20:RTT/SEGGER_RTT.c **** * compatible with the RTT protocol and J-Link.                       *
  21:RTT/SEGGER_RTT.c **** *                                                                    *
  22:RTT/SEGGER_RTT.c **** * Redistribution and use in source and binary forms, with or         *
  23:RTT/SEGGER_RTT.c **** * without modification, are permitted provided that the following    *
  24:RTT/SEGGER_RTT.c **** * condition is met:                                                  *
  25:RTT/SEGGER_RTT.c **** *                                                                    *
  26:RTT/SEGGER_RTT.c **** * o Redistributions of source code must retain the above copyright   *
  27:RTT/SEGGER_RTT.c **** *   notice, this condition and the following disclaimer.             *
  28:RTT/SEGGER_RTT.c **** *                                                                    *
  29:RTT/SEGGER_RTT.c **** * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND             *
  30:RTT/SEGGER_RTT.c **** * CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,        *
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 2


  31:RTT/SEGGER_RTT.c **** * INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF           *
  32:RTT/SEGGER_RTT.c **** * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE           *
  33:RTT/SEGGER_RTT.c **** * DISCLAIMED. IN NO EVENT SHALL SEGGER Microcontroller BE LIABLE FOR *
  34:RTT/SEGGER_RTT.c **** * ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR           *
  35:RTT/SEGGER_RTT.c **** * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT  *
  36:RTT/SEGGER_RTT.c **** * OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;    *
  37:RTT/SEGGER_RTT.c **** * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF      *
  38:RTT/SEGGER_RTT.c **** * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT          *
  39:RTT/SEGGER_RTT.c **** * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE  *
  40:RTT/SEGGER_RTT.c **** * USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH   *
  41:RTT/SEGGER_RTT.c **** * DAMAGE.                                                            *
  42:RTT/SEGGER_RTT.c **** *                                                                    *
  43:RTT/SEGGER_RTT.c **** **********************************************************************
  44:RTT/SEGGER_RTT.c **** *                                                                    *
  45:RTT/SEGGER_RTT.c **** *       RTT version: 7.22a                                           *
  46:RTT/SEGGER_RTT.c **** *                                                                    *
  47:RTT/SEGGER_RTT.c **** **********************************************************************
  48:RTT/SEGGER_RTT.c **** 
  49:RTT/SEGGER_RTT.c **** ---------------------------END-OF-HEADER------------------------------
  50:RTT/SEGGER_RTT.c **** File    : SEGGER_RTT.c
  51:RTT/SEGGER_RTT.c **** Purpose : Implementation of SEGGER real-time transfer (RTT) which
  52:RTT/SEGGER_RTT.c ****           allows real-time communication on targets which support
  53:RTT/SEGGER_RTT.c ****           debugger memory accesses while the CPU is running.
  54:RTT/SEGGER_RTT.c **** Revision: $Rev: 22333 $
  55:RTT/SEGGER_RTT.c **** 
  56:RTT/SEGGER_RTT.c **** Additional information:
  57:RTT/SEGGER_RTT.c ****           Type "int" is assumed to be 32-bits in size
  58:RTT/SEGGER_RTT.c ****           H->T    Host to target communication
  59:RTT/SEGGER_RTT.c ****           T->H    Target to host communication
  60:RTT/SEGGER_RTT.c **** 
  61:RTT/SEGGER_RTT.c ****           RTT channel 0 is always present and reserved for Terminal usage.
  62:RTT/SEGGER_RTT.c ****           Name is fixed to "Terminal"
  63:RTT/SEGGER_RTT.c **** 
  64:RTT/SEGGER_RTT.c ****           Effective buffer size: SizeOfBuffer - 1
  65:RTT/SEGGER_RTT.c **** 
  66:RTT/SEGGER_RTT.c ****           WrOff == RdOff:       Buffer is empty
  67:RTT/SEGGER_RTT.c ****           WrOff == (RdOff - 1): Buffer is full
  68:RTT/SEGGER_RTT.c ****           WrOff >  RdOff:       Free space includes wrap-around
  69:RTT/SEGGER_RTT.c ****           WrOff <  RdOff:       Used space includes wrap-around
  70:RTT/SEGGER_RTT.c ****           (WrOff == (SizeOfBuffer - 1)) && (RdOff == 0):  
  71:RTT/SEGGER_RTT.c ****                                 Buffer full and wrap-around after next byte
  72:RTT/SEGGER_RTT.c **** 
  73:RTT/SEGGER_RTT.c **** 
  74:RTT/SEGGER_RTT.c **** ----------------------------------------------------------------------
  75:RTT/SEGGER_RTT.c **** */
  76:RTT/SEGGER_RTT.c **** 
  77:RTT/SEGGER_RTT.c **** #include "SEGGER_RTT.h"
  78:RTT/SEGGER_RTT.c **** 
  79:RTT/SEGGER_RTT.c **** #include <string.h>                 // for memcpy
  80:RTT/SEGGER_RTT.c **** 
  81:RTT/SEGGER_RTT.c **** /*********************************************************************
  82:RTT/SEGGER_RTT.c **** *
  83:RTT/SEGGER_RTT.c **** *       Configuration, default values
  84:RTT/SEGGER_RTT.c **** *
  85:RTT/SEGGER_RTT.c **** **********************************************************************
  86:RTT/SEGGER_RTT.c **** */
  87:RTT/SEGGER_RTT.c **** 
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 3


  88:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_CPU_CACHE_LINE_SIZE
  89:RTT/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_CB_ALIGN
  90:RTT/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_CB_ALIGN() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE != 0"
  91:RTT/SEGGER_RTT.c ****   #endif
  92:RTT/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_BUFFER_ALIGN
  93:RTT/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_BUFFER_ALIGN() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE !=
  94:RTT/SEGGER_RTT.c ****   #endif
  95:RTT/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_PUT_CB_SECTION
  96:RTT/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_PUT_CB_SECTION() is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE 
  97:RTT/SEGGER_RTT.c ****   #endif
  98:RTT/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_PUT_BUFFER_SECTION
  99:RTT/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_PUT_BUFFER_SECTION() is not supported for SEGGER_RTT_CPU_CACHE_LINE_S
 100:RTT/SEGGER_RTT.c ****   #endif
 101:RTT/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_BUFFER_ALIGNMENT
 102:RTT/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_BUFFER_ALIGNMENT is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE 
 103:RTT/SEGGER_RTT.c ****   #endif
 104:RTT/SEGGER_RTT.c ****   #ifdef SEGGER_RTT_ALIGNMENT
 105:RTT/SEGGER_RTT.c ****     #error "Custom SEGGER_RTT_ALIGNMENT is not supported for SEGGER_RTT_CPU_CACHE_LINE_SIZE != 0"
 106:RTT/SEGGER_RTT.c ****   #endif
 107:RTT/SEGGER_RTT.c **** #endif
 108:RTT/SEGGER_RTT.c **** 
 109:RTT/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_UP
 110:RTT/SEGGER_RTT.c ****   #define BUFFER_SIZE_UP                                  1024  // Size of the buffer for terminal 
 111:RTT/SEGGER_RTT.c **** #endif
 112:RTT/SEGGER_RTT.c **** 
 113:RTT/SEGGER_RTT.c **** #ifndef   BUFFER_SIZE_DOWN
 114:RTT/SEGGER_RTT.c ****   #define BUFFER_SIZE_DOWN                                16    // Size of the buffer for terminal 
 115:RTT/SEGGER_RTT.c **** #endif
 116:RTT/SEGGER_RTT.c **** 
 117:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_UP_BUFFERS
 118:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_UP_BUFFERS                    2    // Number of up-buffers (T->H) avai
 119:RTT/SEGGER_RTT.c **** #endif
 120:RTT/SEGGER_RTT.c **** 
 121:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MAX_NUM_DOWN_BUFFERS
 122:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MAX_NUM_DOWN_BUFFERS                  2    // Number of down-buffers (H->T) av
 123:RTT/SEGGER_RTT.c **** #endif
 124:RTT/SEGGER_RTT.c **** 
 125:RTT/SEGGER_RTT.c **** #ifndef SEGGER_RTT_BUFFER_SECTION
 126:RTT/SEGGER_RTT.c ****   #if defined(SEGGER_RTT_SECTION)
 127:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_BUFFER_SECTION SEGGER_RTT_SECTION
 128:RTT/SEGGER_RTT.c ****   #endif
 129:RTT/SEGGER_RTT.c **** #endif
 130:RTT/SEGGER_RTT.c **** 
 131:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_ALIGNMENT
 132:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGNMENT                            SEGGER_RTT_CPU_CACHE_LINE_SIZE
 133:RTT/SEGGER_RTT.c **** #endif
 134:RTT/SEGGER_RTT.c **** 
 135:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_BUFFER_ALIGNMENT
 136:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGNMENT                     SEGGER_RTT_CPU_CACHE_LINE_SIZE
 137:RTT/SEGGER_RTT.c **** #endif
 138:RTT/SEGGER_RTT.c **** 
 139:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MODE_DEFAULT
 140:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MODE_DEFAULT                         SEGGER_RTT_MODE_NO_BLOCK_SKIP
 141:RTT/SEGGER_RTT.c **** #endif
 142:RTT/SEGGER_RTT.c **** 
 143:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_LOCK
 144:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_LOCK()
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 4


 145:RTT/SEGGER_RTT.c **** #endif
 146:RTT/SEGGER_RTT.c **** 
 147:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_UNLOCK
 148:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_UNLOCK()
 149:RTT/SEGGER_RTT.c **** #endif
 150:RTT/SEGGER_RTT.c **** 
 151:RTT/SEGGER_RTT.c **** #ifndef   STRLEN
 152:RTT/SEGGER_RTT.c ****   #define STRLEN(a)                                       strlen((a))
 153:RTT/SEGGER_RTT.c **** #endif
 154:RTT/SEGGER_RTT.c **** 
 155:RTT/SEGGER_RTT.c **** #ifndef   STRCPY
 156:RTT/SEGGER_RTT.c ****   #define STRCPY(pDest, pSrc)                             strcpy((pDest), (pSrc))
 157:RTT/SEGGER_RTT.c **** #endif
 158:RTT/SEGGER_RTT.c **** 
 159:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY_USE_BYTELOOP
 160:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_MEMCPY_USE_BYTELOOP                  0
 161:RTT/SEGGER_RTT.c **** #endif
 162:RTT/SEGGER_RTT.c **** 
 163:RTT/SEGGER_RTT.c **** #ifndef   SEGGER_RTT_MEMCPY
 164:RTT/SEGGER_RTT.c ****   #ifdef  MEMCPY
 165:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      MEMCPY((pDest), (pSrc), (NumBytes))
 166:RTT/SEGGER_RTT.c ****   #else
 167:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_MEMCPY(pDest, pSrc, NumBytes)      memcpy((pDest), (pSrc), (NumBytes))
 168:RTT/SEGGER_RTT.c ****   #endif
 169:RTT/SEGGER_RTT.c **** #endif
 170:RTT/SEGGER_RTT.c **** 
 171:RTT/SEGGER_RTT.c **** #ifndef   MIN
 172:RTT/SEGGER_RTT.c ****   #define MIN(a, b)         (((a) < (b)) ? (a) : (b))
 173:RTT/SEGGER_RTT.c **** #endif
 174:RTT/SEGGER_RTT.c **** 
 175:RTT/SEGGER_RTT.c **** #ifndef   MAX
 176:RTT/SEGGER_RTT.c ****   #define MAX(a, b)         (((a) > (b)) ? (a) : (b))
 177:RTT/SEGGER_RTT.c **** #endif
 178:RTT/SEGGER_RTT.c **** //
 179:RTT/SEGGER_RTT.c **** // For some environments, NULL may not be defined until certain headers are included
 180:RTT/SEGGER_RTT.c **** //
 181:RTT/SEGGER_RTT.c **** #ifndef NULL
 182:RTT/SEGGER_RTT.c ****   #define NULL 0
 183:RTT/SEGGER_RTT.c **** #endif
 184:RTT/SEGGER_RTT.c **** 
 185:RTT/SEGGER_RTT.c **** /*********************************************************************
 186:RTT/SEGGER_RTT.c **** *
 187:RTT/SEGGER_RTT.c **** *       Defines, fixed
 188:RTT/SEGGER_RTT.c **** *
 189:RTT/SEGGER_RTT.c **** **********************************************************************
 190:RTT/SEGGER_RTT.c **** */
 191:RTT/SEGGER_RTT.c **** #if (defined __ICCARM__) || (defined __ICCRX__)
 192:RTT/SEGGER_RTT.c ****   #define RTT_PRAGMA(P) _Pragma(#P)
 193:RTT/SEGGER_RTT.c **** #endif
 194:RTT/SEGGER_RTT.c **** 
 195:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT || SEGGER_RTT_BUFFER_ALIGNMENT
 196:RTT/SEGGER_RTT.c ****   #if (defined __GNUC__)
 197:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 198:RTT/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 199:RTT/SEGGER_RTT.c ****     #define PRAGMA(A) _Pragma(#A)
 200:RTT/SEGGER_RTT.c **** #define SEGGER_RTT_ALIGN(Var, Alignment) RTT_PRAGMA(data_alignment=Alignment) \
 201:RTT/SEGGER_RTT.c ****                                   Var
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 5


 202:RTT/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 203:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_ALIGN(Var, Alignment) Var __attribute__ ((aligned (Alignment)))
 204:RTT/SEGGER_RTT.c ****   #else
 205:RTT/SEGGER_RTT.c ****     #error "Alignment not supported for this compiler."
 206:RTT/SEGGER_RTT.c ****   #endif
 207:RTT/SEGGER_RTT.c **** #else
 208:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_ALIGN(Var, Alignment) Var
 209:RTT/SEGGER_RTT.c **** #endif
 210:RTT/SEGGER_RTT.c **** 
 211:RTT/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION) || defined (SEGGER_RTT_BUFFER_SECTION)
 212:RTT/SEGGER_RTT.c ****   #if (defined __GNUC__)
 213:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section))) Var
 214:RTT/SEGGER_RTT.c ****   #elif (defined __ICCARM__) || (defined __ICCRX__)
 215:RTT/SEGGER_RTT.c **** #define SEGGER_RTT_PUT_SECTION(Var, Section) RTT_PRAGMA(location=Section) \
 216:RTT/SEGGER_RTT.c ****                                         Var
 217:RTT/SEGGER_RTT.c ****   #elif (defined __CC_ARM)
 218:RTT/SEGGER_RTT.c ****     #define SEGGER_RTT_PUT_SECTION(Var, Section) __attribute__ ((section (Section), zero_init))  Va
 219:RTT/SEGGER_RTT.c ****   #else
 220:RTT/SEGGER_RTT.c ****     #error "Section placement not supported for this compiler."
 221:RTT/SEGGER_RTT.c ****   #endif
 222:RTT/SEGGER_RTT.c **** #else
 223:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_SECTION(Var, Section) Var
 224:RTT/SEGGER_RTT.c **** #endif
 225:RTT/SEGGER_RTT.c **** 
 226:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_ALIGNMENT
 227:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_ALIGNMENT)
 228:RTT/SEGGER_RTT.c **** #else
 229:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_CB_ALIGN(Var)  Var
 230:RTT/SEGGER_RTT.c **** #endif
 231:RTT/SEGGER_RTT.c **** 
 232:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_BUFFER_ALIGNMENT
 233:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  SEGGER_RTT_ALIGN(Var, SEGGER_RTT_BUFFER_ALIGNMENT)
 234:RTT/SEGGER_RTT.c **** #else
 235:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_BUFFER_ALIGN(Var)  Var
 236:RTT/SEGGER_RTT.c **** #endif
 237:RTT/SEGGER_RTT.c **** 
 238:RTT/SEGGER_RTT.c **** 
 239:RTT/SEGGER_RTT.c **** #if defined(SEGGER_RTT_SECTION)
 240:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_SECTION)
 241:RTT/SEGGER_RTT.c **** #else
 242:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_CB_SECTION(Var) Var
 243:RTT/SEGGER_RTT.c **** #endif
 244:RTT/SEGGER_RTT.c **** 
 245:RTT/SEGGER_RTT.c **** #if defined(SEGGER_RTT_BUFFER_SECTION)
 246:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) SEGGER_RTT_PUT_SECTION(Var, SEGGER_RTT_BUFFER_SECTION)
 247:RTT/SEGGER_RTT.c **** #else
 248:RTT/SEGGER_RTT.c ****   #define SEGGER_RTT_PUT_BUFFER_SECTION(Var) Var
 249:RTT/SEGGER_RTT.c **** #endif
 250:RTT/SEGGER_RTT.c **** 
 251:RTT/SEGGER_RTT.c **** /*********************************************************************
 252:RTT/SEGGER_RTT.c **** *
 253:RTT/SEGGER_RTT.c **** *       Static const data
 254:RTT/SEGGER_RTT.c **** *
 255:RTT/SEGGER_RTT.c **** **********************************************************************
 256:RTT/SEGGER_RTT.c **** */
 257:RTT/SEGGER_RTT.c **** 
 258:RTT/SEGGER_RTT.c **** static unsigned char _aTerminalId[16] = { '0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 6


 259:RTT/SEGGER_RTT.c **** 
 260:RTT/SEGGER_RTT.c **** /*********************************************************************
 261:RTT/SEGGER_RTT.c **** *
 262:RTT/SEGGER_RTT.c **** *       Static data
 263:RTT/SEGGER_RTT.c **** *
 264:RTT/SEGGER_RTT.c **** **********************************************************************
 265:RTT/SEGGER_RTT.c **** */
 266:RTT/SEGGER_RTT.c **** 
 267:RTT/SEGGER_RTT.c **** //
 268:RTT/SEGGER_RTT.c **** // RTT Control Block and allocate buffers for channel 0
 269:RTT/SEGGER_RTT.c **** //
 270:RTT/SEGGER_RTT.c **** SEGGER_RTT_PUT_CB_SECTION(SEGGER_RTT_CB_ALIGN(SEGGER_RTT_CB _SEGGER_RTT));
 271:RTT/SEGGER_RTT.c **** SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acUpBuffer  [SEGGER_RTT__ROUND_U
 272:RTT/SEGGER_RTT.c **** SEGGER_RTT_PUT_BUFFER_SECTION(SEGGER_RTT_BUFFER_ALIGN(static char _acDownBuffer[SEGGER_RTT__ROUND_U
 273:RTT/SEGGER_RTT.c **** 
 274:RTT/SEGGER_RTT.c **** static unsigned char _ActiveTerminal;
 275:RTT/SEGGER_RTT.c **** 
 276:RTT/SEGGER_RTT.c **** /*********************************************************************
 277:RTT/SEGGER_RTT.c **** *
 278:RTT/SEGGER_RTT.c **** *       Static functions
 279:RTT/SEGGER_RTT.c **** *
 280:RTT/SEGGER_RTT.c **** **********************************************************************
 281:RTT/SEGGER_RTT.c **** */
 282:RTT/SEGGER_RTT.c **** 
 283:RTT/SEGGER_RTT.c **** /*********************************************************************
 284:RTT/SEGGER_RTT.c **** *
 285:RTT/SEGGER_RTT.c **** *       _DoInit()
 286:RTT/SEGGER_RTT.c **** *
 287:RTT/SEGGER_RTT.c **** *  Function description
 288:RTT/SEGGER_RTT.c **** *    Initializes the control block an buffers.
 289:RTT/SEGGER_RTT.c **** *    May only be called via INIT() to avoid overriding settings.
 290:RTT/SEGGER_RTT.c **** *
 291:RTT/SEGGER_RTT.c **** */
 292:RTT/SEGGER_RTT.c **** #define INIT()  {                                                                                  
 293:RTT/SEGGER_RTT.c ****                   volatile SEGGER_RTT_CB* pRTTCBInit;                                              
 294:RTT/SEGGER_RTT.c ****                   pRTTCBInit = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_
 295:RTT/SEGGER_RTT.c ****                   do {                                                                             
 296:RTT/SEGGER_RTT.c ****                     if (pRTTCBInit->acID[0] == '\0') {                                             
 297:RTT/SEGGER_RTT.c ****                       _DoInit();                                                                   
 298:RTT/SEGGER_RTT.c ****                     }                                                                              
 299:RTT/SEGGER_RTT.c ****                   } while (0);                                                                     
 300:RTT/SEGGER_RTT.c ****                 }
 301:RTT/SEGGER_RTT.c **** 
 302:RTT/SEGGER_RTT.c **** static void _DoInit(void) {
 303:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of ac
 304:RTT/SEGGER_RTT.c ****   //
 305:RTT/SEGGER_RTT.c ****   // Initialize control block
 306:RTT/SEGGER_RTT.c ****   //
 307:RTT/SEGGER_RTT.c ****   p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);
 308:RTT/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 309:RTT/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 310:RTT/SEGGER_RTT.c ****   //
 311:RTT/SEGGER_RTT.c ****   // Initialize up buffer 0
 312:RTT/SEGGER_RTT.c ****   //
 313:RTT/SEGGER_RTT.c ****   p->aUp[0].sName         = "Terminal";
 314:RTT/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 315:RTT/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 7


 316:RTT/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 317:RTT/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 318:RTT/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 319:RTT/SEGGER_RTT.c ****   //
 320:RTT/SEGGER_RTT.c ****   // Initialize down buffer 0
 321:RTT/SEGGER_RTT.c ****   //
 322:RTT/SEGGER_RTT.c ****   p->aDown[0].sName         = "Terminal";
 323:RTT/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 324:RTT/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 325:RTT/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 326:RTT/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 327:RTT/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 328:RTT/SEGGER_RTT.c ****   //
 329:RTT/SEGGER_RTT.c ****   // Finish initialization of the control block.
 330:RTT/SEGGER_RTT.c ****   // Copy Id string in three steps to make sure "SEGGER RTT" is not found
 331:RTT/SEGGER_RTT.c ****   // in initializer memory (usually flash) by J-Link
 332:RTT/SEGGER_RTT.c ****   //
 333:RTT/SEGGER_RTT.c ****   STRCPY((char*)&p->acID[7], "RTT");
 334:RTT/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accessed inside core for cores that al
 335:RTT/SEGGER_RTT.c ****   STRCPY((char*)&p->acID[0], "SEGGER");
 336:RTT/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accessed inside core for cores that al
 337:RTT/SEGGER_RTT.c ****   p->acID[6] = ' ';
 338:RTT/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accessed inside core for cores that al
 339:RTT/SEGGER_RTT.c **** }
 340:RTT/SEGGER_RTT.c **** 
 341:RTT/SEGGER_RTT.c **** /*********************************************************************
 342:RTT/SEGGER_RTT.c **** *
 343:RTT/SEGGER_RTT.c **** *       _WriteBlocking()
 344:RTT/SEGGER_RTT.c **** *
 345:RTT/SEGGER_RTT.c **** *  Function description
 346:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 347:RTT/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 348:RTT/SEGGER_RTT.c **** *    read by the host.
 349:RTT/SEGGER_RTT.c **** *    The caller is responsible for managing the write chunk sizes as
 350:RTT/SEGGER_RTT.c **** *    _WriteBlocking() will block until all data has been posted successfully.
 351:RTT/SEGGER_RTT.c **** *
 352:RTT/SEGGER_RTT.c **** *  Parameters
 353:RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 354:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 355:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 356:RTT/SEGGER_RTT.c **** *
 357:RTT/SEGGER_RTT.c **** *  Return value
 358:RTT/SEGGER_RTT.c **** *    >= 0 - Number of bytes written into buffer.
 359:RTT/SEGGER_RTT.c **** */
 360:RTT/SEGGER_RTT.c **** static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes)
 361:RTT/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 362:RTT/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 363:RTT/SEGGER_RTT.c ****   unsigned RdOff;
 364:RTT/SEGGER_RTT.c ****   unsigned WrOff;
 365:RTT/SEGGER_RTT.c ****   volatile char* pDst;
 366:RTT/SEGGER_RTT.c ****   //
 367:RTT/SEGGER_RTT.c ****   // Write data to buffer and handle wrap-around if necessary
 368:RTT/SEGGER_RTT.c ****   //
 369:RTT/SEGGER_RTT.c ****   NumBytesWritten = 0u;
 370:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 371:RTT/SEGGER_RTT.c ****   do {
 372:RTT/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 8


 373:RTT/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 374:RTT/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 375:RTT/SEGGER_RTT.c ****     } else {
 376:RTT/SEGGER_RTT.c ****       NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 377:RTT/SEGGER_RTT.c ****     }
 378:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes 
 379:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 380:RTT/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 381:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 382:RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 383:RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 384:RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 385:RTT/SEGGER_RTT.c ****     while (NumBytesToWrite--) {
 386:RTT/SEGGER_RTT.c ****       *pDst++ = *pBuffer++;
 387:RTT/SEGGER_RTT.c ****     };
 388:RTT/SEGGER_RTT.c **** #else
 389:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 390:RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 391:RTT/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 392:RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 393:RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 394:RTT/SEGGER_RTT.c **** #endif
 395:RTT/SEGGER_RTT.c ****     if (WrOff == pRing->SizeOfBuffer) {
 396:RTT/SEGGER_RTT.c ****       WrOff = 0u;
 397:RTT/SEGGER_RTT.c ****     }
 398:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 399:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 400:RTT/SEGGER_RTT.c ****   } while (NumBytes);
 401:RTT/SEGGER_RTT.c ****   return NumBytesWritten;
 402:RTT/SEGGER_RTT.c **** }
 403:RTT/SEGGER_RTT.c **** 
 404:RTT/SEGGER_RTT.c **** /*********************************************************************
 405:RTT/SEGGER_RTT.c **** *
 406:RTT/SEGGER_RTT.c **** *       _WriteNoCheck()
 407:RTT/SEGGER_RTT.c **** *
 408:RTT/SEGGER_RTT.c **** *  Function description
 409:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT ring buffer
 410:RTT/SEGGER_RTT.c **** *    and updates the associated write pointer which is periodically
 411:RTT/SEGGER_RTT.c **** *    read by the host.
 412:RTT/SEGGER_RTT.c **** *    It is callers responsibility to make sure data actually fits in buffer.
 413:RTT/SEGGER_RTT.c **** *
 414:RTT/SEGGER_RTT.c **** *  Parameters
 415:RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 416:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 417:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 418:RTT/SEGGER_RTT.c **** *
 419:RTT/SEGGER_RTT.c **** *  Notes
 420:RTT/SEGGER_RTT.c **** *    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
 421:RTT/SEGGER_RTT.c **** */
 422:RTT/SEGGER_RTT.c **** static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 423:RTT/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
 424:RTT/SEGGER_RTT.c ****   unsigned WrOff;
 425:RTT/SEGGER_RTT.c ****   unsigned Rem;
 426:RTT/SEGGER_RTT.c ****   volatile char* pDst;
 427:RTT/SEGGER_RTT.c **** 
 428:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 429:RTT/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 9


 430:RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 431:RTT/SEGGER_RTT.c ****     //
 432:RTT/SEGGER_RTT.c ****     // All data fits before wrap around
 433:RTT/SEGGER_RTT.c ****     //
 434:RTT/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 435:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 436:RTT/SEGGER_RTT.c ****     WrOff += NumBytes;
 437:RTT/SEGGER_RTT.c ****     while (NumBytes--) {
 438:RTT/SEGGER_RTT.c ****       *pDst++ = *pData++;
 439:RTT/SEGGER_RTT.c ****     };
 440:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 441:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 442:RTT/SEGGER_RTT.c **** #else
 443:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 444:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 445:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 446:RTT/SEGGER_RTT.c **** #endif
 447:RTT/SEGGER_RTT.c ****   } else {
 448:RTT/SEGGER_RTT.c ****     //
 449:RTT/SEGGER_RTT.c ****     // We reach the end of the buffer, so need to wrap around
 450:RTT/SEGGER_RTT.c ****     //
 451:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 452:RTT/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 453:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 454:RTT/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 455:RTT/SEGGER_RTT.c ****       *pDst++ = *pData++;
 456:RTT/SEGGER_RTT.c ****     };
 457:RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 458:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 459:RTT/SEGGER_RTT.c ****     while (NumBytesAtOnce--) {
 460:RTT/SEGGER_RTT.c ****       *pDst++ = *pData++;
 461:RTT/SEGGER_RTT.c ****     };
 462:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 463:RTT/SEGGER_RTT.c ****     pRing->WrOff = NumBytes - Rem;
 464:RTT/SEGGER_RTT.c **** #else
 465:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = Rem;
 466:RTT/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 467:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 468:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 469:RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 470:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 471:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 472:RTT/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 473:RTT/SEGGER_RTT.c **** #endif
 474:RTT/SEGGER_RTT.c ****   }
 475:RTT/SEGGER_RTT.c **** }
 476:RTT/SEGGER_RTT.c **** 
 477:RTT/SEGGER_RTT.c **** /*********************************************************************
 478:RTT/SEGGER_RTT.c **** *
 479:RTT/SEGGER_RTT.c **** *       _PostTerminalSwitch()
 480:RTT/SEGGER_RTT.c **** *
 481:RTT/SEGGER_RTT.c **** *  Function description
 482:RTT/SEGGER_RTT.c **** *    Switch terminal to the given terminal ID.  It is the caller's
 483:RTT/SEGGER_RTT.c **** *    responsibility to ensure the terminal ID is correct and there is
 484:RTT/SEGGER_RTT.c **** *    enough space in the buffer for this to complete successfully.
 485:RTT/SEGGER_RTT.c **** *
 486:RTT/SEGGER_RTT.c **** *  Parameters
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 10


 487:RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to post to.
 488:RTT/SEGGER_RTT.c **** *    TerminalId   Terminal ID to switch to.
 489:RTT/SEGGER_RTT.c **** */
 490:RTT/SEGGER_RTT.c **** static void _PostTerminalSwitch(SEGGER_RTT_BUFFER_UP* pRing, unsigned char TerminalId) {
 491:RTT/SEGGER_RTT.c ****   unsigned char ac[2];
 492:RTT/SEGGER_RTT.c **** 
 493:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 494:RTT/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 495:RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 496:RTT/SEGGER_RTT.c **** }
 497:RTT/SEGGER_RTT.c **** 
 498:RTT/SEGGER_RTT.c **** /*********************************************************************
 499:RTT/SEGGER_RTT.c **** *
 500:RTT/SEGGER_RTT.c **** *       _GetAvailWriteSpace()
 501:RTT/SEGGER_RTT.c **** *
 502:RTT/SEGGER_RTT.c **** *  Function description
 503:RTT/SEGGER_RTT.c **** *    Returns the number of bytes that can be written to the ring
 504:RTT/SEGGER_RTT.c **** *    buffer without blocking.
 505:RTT/SEGGER_RTT.c **** *
 506:RTT/SEGGER_RTT.c **** *  Parameters
 507:RTT/SEGGER_RTT.c **** *    pRing        Ring buffer to check.
 508:RTT/SEGGER_RTT.c **** *
 509:RTT/SEGGER_RTT.c **** *  Return value
 510:RTT/SEGGER_RTT.c **** *    Number of bytes that are free in the buffer.
 511:RTT/SEGGER_RTT.c **** */
 512:RTT/SEGGER_RTT.c **** static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
  29              		.loc 1 512 66 view -0
  30              		.cfi_startproc
  31              		@ args = 0, pretend = 0, frame = 0
  32              		@ frame_needed = 0, uses_anonymous_args = 0
  33              		@ link register save eliminated.
 513:RTT/SEGGER_RTT.c ****   unsigned RdOff;
  34              		.loc 1 513 3 view .LVU1
 514:RTT/SEGGER_RTT.c ****   unsigned WrOff;
  35              		.loc 1 514 3 view .LVU2
 515:RTT/SEGGER_RTT.c ****   unsigned r;
  36              		.loc 1 515 3 view .LVU3
 516:RTT/SEGGER_RTT.c ****   //
 517:RTT/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
 518:RTT/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
 519:RTT/SEGGER_RTT.c ****   //
 520:RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
  37              		.loc 1 520 3 view .LVU4
  38              		.loc 1 520 9 is_stmt 0 view .LVU5
  39 0000 0369     		ldr	r3, [r0, #16]
  40              	.LVL1:
 521:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
  41              		.loc 1 521 3 is_stmt 1 view .LVU6
  42              		.loc 1 521 9 is_stmt 0 view .LVU7
  43 0002 C268     		ldr	r2, [r0, #12]
  44              	.LVL2:
 522:RTT/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
  45              		.loc 1 522 3 is_stmt 1 view .LVU8
  46              		.loc 1 522 6 is_stmt 0 view .LVU9
  47 0004 9342     		cmp	r3, r2
  48 0006 04D8     		bhi	.L2
 523:RTT/SEGGER_RTT.c ****     r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 11


  49              		.loc 1 523 5 is_stmt 1 view .LVU10
  50              		.loc 1 523 14 is_stmt 0 view .LVU11
  51 0008 8068     		ldr	r0, [r0, #8]
  52              	.LVL3:
  53              		.loc 1 523 34 view .LVU12
  54 000a 801A     		subs	r0, r0, r2
  55              		.loc 1 523 42 view .LVU13
  56 000c 0344     		add	r3, r3, r0
  57              	.LVL4:
  58              		.loc 1 523 7 view .LVU14
  59 000e 581E     		subs	r0, r3, #1
  60              	.LVL5:
  61              		.loc 1 523 7 view .LVU15
  62 0010 7047     		bx	lr
  63              	.LVL6:
  64              	.L2:
 524:RTT/SEGGER_RTT.c ****   } else {
 525:RTT/SEGGER_RTT.c ****     r = RdOff - WrOff - 1u;
  65              		.loc 1 525 5 is_stmt 1 view .LVU16
  66              		.loc 1 525 15 is_stmt 0 view .LVU17
  67 0012 9B1A     		subs	r3, r3, r2
  68              	.LVL7:
  69              		.loc 1 525 7 view .LVU18
  70 0014 581E     		subs	r0, r3, #1
  71              	.LVL8:
 526:RTT/SEGGER_RTT.c ****   }
 527:RTT/SEGGER_RTT.c ****   return r;
  72              		.loc 1 527 3 is_stmt 1 view .LVU19
 528:RTT/SEGGER_RTT.c **** }
  73              		.loc 1 528 1 is_stmt 0 view .LVU20
  74 0016 7047     		bx	lr
  75              		.cfi_endproc
  76              	.LFE4:
  78              		.section	.text._WriteNoCheck,"ax",%progbits
  79              		.align	1
  80              		.syntax unified
  81              		.thumb
  82              		.thumb_func
  83              		.fpu fpv4-sp-d16
  85              	_WriteNoCheck:
  86              	.LVL9:
  87              	.LFB2:
 422:RTT/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  88              		.loc 1 422 94 is_stmt 1 view -0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
 422:RTT/SEGGER_RTT.c ****   unsigned NumBytesAtOnce;
  92              		.loc 1 422 94 is_stmt 0 view .LVU22
  93 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
  94              	.LCFI0:
  95              		.cfi_def_cfa_offset 32
  96              		.cfi_offset 3, -32
  97              		.cfi_offset 4, -28
  98              		.cfi_offset 5, -24
  99              		.cfi_offset 6, -20
 100              		.cfi_offset 7, -16
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 12


 101              		.cfi_offset 8, -12
 102              		.cfi_offset 9, -8
 103              		.cfi_offset 14, -4
 104 0004 0446     		mov	r4, r0
 105 0006 8846     		mov	r8, r1
 106 0008 1646     		mov	r6, r2
 423:RTT/SEGGER_RTT.c ****   unsigned WrOff;
 107              		.loc 1 423 3 is_stmt 1 view .LVU23
 424:RTT/SEGGER_RTT.c ****   unsigned Rem;
 108              		.loc 1 424 3 view .LVU24
 425:RTT/SEGGER_RTT.c ****   volatile char* pDst;
 109              		.loc 1 425 3 view .LVU25
 426:RTT/SEGGER_RTT.c **** 
 110              		.loc 1 426 3 view .LVU26
 428:RTT/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 111              		.loc 1 428 3 view .LVU27
 428:RTT/SEGGER_RTT.c ****   Rem = pRing->SizeOfBuffer - WrOff;
 112              		.loc 1 428 9 is_stmt 0 view .LVU28
 113 000a C568     		ldr	r5, [r0, #12]
 114              	.LVL10:
 429:RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 115              		.loc 1 429 3 is_stmt 1 view .LVU29
 429:RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 116              		.loc 1 429 14 is_stmt 0 view .LVU30
 117 000c 8768     		ldr	r7, [r0, #8]
 429:RTT/SEGGER_RTT.c ****   if (Rem > NumBytes) {
 118              		.loc 1 429 7 view .LVU31
 119 000e A7EB0509 		sub	r9, r7, r5
 120              	.LVL11:
 430:RTT/SEGGER_RTT.c ****     //
 121              		.loc 1 430 3 is_stmt 1 view .LVU32
 430:RTT/SEGGER_RTT.c ****     //
 122              		.loc 1 430 6 is_stmt 0 view .LVU33
 123 0012 9145     		cmp	r9, r2
 124 0014 09D9     		bls	.L5
 434:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 125              		.loc 1 434 5 is_stmt 1 view .LVU34
 434:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 126              		.loc 1 434 18 is_stmt 0 view .LVU35
 127 0016 4068     		ldr	r0, [r0, #4]
 128              	.LVL12:
 443:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 129              		.loc 1 443 5 is_stmt 1 view .LVU36
 130 0018 2844     		add	r0, r0, r5
 131              	.LVL13:
 443:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 132              		.loc 1 443 5 is_stmt 0 view .LVU37
 133 001a FFF7FEFF 		bl	memcpy
 134              	.LVL14:
 444:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
 135              		.loc 1 444 5 is_stmt 1 view .LVU38
 136              		.syntax unified
 137              	@ 444 "RTT/SEGGER_RTT.c" 1
 138 001e BFF35F8F 		dmb
 139              	
 140              	@ 0 "" 2
 444:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff + NumBytes;
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 13


 141              		.loc 1 444 15 view .LVU39
 445:RTT/SEGGER_RTT.c **** #endif
 142              		.loc 1 445 5 view .LVU40
 445:RTT/SEGGER_RTT.c **** #endif
 143              		.loc 1 445 26 is_stmt 0 view .LVU41
 144              		.thumb
 145              		.syntax unified
 146 0022 3544     		add	r5, r5, r6
 147              	.LVL15:
 445:RTT/SEGGER_RTT.c **** #endif
 148              		.loc 1 445 18 view .LVU42
 149 0024 E560     		str	r5, [r4, #12]
 150              	.L4:
 475:RTT/SEGGER_RTT.c **** 
 151              		.loc 1 475 1 view .LVU43
 152 0026 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 153              	.LVL16:
 154              	.L5:
 465:RTT/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 155              		.loc 1 465 5 is_stmt 1 view .LVU44
 466:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 156              		.loc 1 466 5 view .LVU45
 466:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 157              		.loc 1 466 18 is_stmt 0 view .LVU46
 158 002a 4068     		ldr	r0, [r0, #4]
 159              	.LVL17:
 467:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 160              		.loc 1 467 5 is_stmt 1 view .LVU47
 161 002c 4A46     		mov	r2, r9
 162              	.LVL18:
 467:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 163              		.loc 1 467 5 is_stmt 0 view .LVU48
 164 002e 2844     		add	r0, r0, r5
 165              	.LVL19:
 467:RTT/SEGGER_RTT.c ****     NumBytesAtOnce = NumBytes - Rem;
 166              		.loc 1 467 5 view .LVU49
 167 0030 FFF7FEFF 		bl	memcpy
 168              	.LVL20:
 468:RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 169              		.loc 1 468 5 is_stmt 1 view .LVU50
 468:RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 170              		.loc 1 468 20 is_stmt 0 view .LVU51
 171 0034 ED1B     		subs	r5, r5, r7
 172              	.LVL21:
 468:RTT/SEGGER_RTT.c ****     pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 173              		.loc 1 468 20 view .LVU52
 174 0036 3544     		add	r5, r5, r6
 175              	.LVL22:
 469:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 176              		.loc 1 469 5 is_stmt 1 view .LVU53
 470:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 177              		.loc 1 470 5 view .LVU54
 178 0038 2A46     		mov	r2, r5
 179 003a 08EB0901 		add	r1, r8, r9
 180 003e 6068     		ldr	r0, [r4, #4]
 181 0040 FFF7FEFF 		bl	memcpy
 182              	.LVL23:
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 14


 471:RTT/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 183              		.loc 1 471 5 view .LVU55
 184              		.syntax unified
 185              	@ 471 "RTT/SEGGER_RTT.c" 1
 186 0044 BFF35F8F 		dmb
 187              	
 188              	@ 0 "" 2
 471:RTT/SEGGER_RTT.c ****     pRing->WrOff = NumBytesAtOnce;
 189              		.loc 1 471 15 view .LVU56
 472:RTT/SEGGER_RTT.c **** #endif
 190              		.loc 1 472 5 view .LVU57
 472:RTT/SEGGER_RTT.c **** #endif
 191              		.loc 1 472 18 is_stmt 0 view .LVU58
 192              		.thumb
 193              		.syntax unified
 194 0048 E560     		str	r5, [r4, #12]
 475:RTT/SEGGER_RTT.c **** 
 195              		.loc 1 475 1 view .LVU59
 196 004a ECE7     		b	.L4
 197              		.cfi_endproc
 198              	.LFE2:
 200              		.section	.text._WriteBlocking,"ax",%progbits
 201              		.align	1
 202              		.syntax unified
 203              		.thumb
 204              		.thumb_func
 205              		.fpu fpv4-sp-d16
 207              	_WriteBlocking:
 208              	.LVL24:
 209              	.LFB1:
 360:RTT/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 210              		.loc 1 360 101 is_stmt 1 view -0
 211              		.cfi_startproc
 212              		@ args = 0, pretend = 0, frame = 0
 213              		@ frame_needed = 0, uses_anonymous_args = 0
 360:RTT/SEGGER_RTT.c ****   unsigned NumBytesToWrite;
 214              		.loc 1 360 101 is_stmt 0 view .LVU61
 215 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 216              	.LCFI1:
 217              		.cfi_def_cfa_offset 32
 218              		.cfi_offset 3, -32
 219              		.cfi_offset 4, -28
 220              		.cfi_offset 5, -24
 221              		.cfi_offset 6, -20
 222              		.cfi_offset 7, -16
 223              		.cfi_offset 8, -12
 224              		.cfi_offset 9, -8
 225              		.cfi_offset 14, -4
 226 0004 0646     		mov	r6, r0
 227 0006 8846     		mov	r8, r1
 228 0008 1746     		mov	r7, r2
 361:RTT/SEGGER_RTT.c ****   unsigned NumBytesWritten;
 229              		.loc 1 361 3 is_stmt 1 view .LVU62
 362:RTT/SEGGER_RTT.c ****   unsigned RdOff;
 230              		.loc 1 362 3 view .LVU63
 363:RTT/SEGGER_RTT.c ****   unsigned WrOff;
 231              		.loc 1 363 3 view .LVU64
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 15


 364:RTT/SEGGER_RTT.c ****   volatile char* pDst;
 232              		.loc 1 364 3 view .LVU65
 365:RTT/SEGGER_RTT.c ****   //
 233              		.loc 1 365 3 view .LVU66
 369:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 234              		.loc 1 369 3 view .LVU67
 235              	.LVL25:
 370:RTT/SEGGER_RTT.c ****   do {
 236              		.loc 1 370 3 view .LVU68
 370:RTT/SEGGER_RTT.c ****   do {
 237              		.loc 1 370 9 is_stmt 0 view .LVU69
 238 000a C568     		ldr	r5, [r0, #12]
 239              	.LVL26:
 369:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 240              		.loc 1 369 19 view .LVU70
 241 000c 4FF00009 		mov	r9, #0
 242 0010 1AE0     		b	.L12
 243              	.LVL27:
 244              	.L17:
 374:RTT/SEGGER_RTT.c ****     } else {
 245              		.loc 1 374 7 is_stmt 1 view .LVU71
 374:RTT/SEGGER_RTT.c ****     } else {
 246              		.loc 1 374 31 is_stmt 0 view .LVU72
 247 0012 641B     		subs	r4, r4, r5
 248              	.LVL28:
 374:RTT/SEGGER_RTT.c ****     } else {
 249              		.loc 1 374 23 view .LVU73
 250 0014 621E     		subs	r2, r4, #1
 251              	.LVL29:
 252              	.L10:
 378:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 253              		.loc 1 378 5 is_stmt 1 view .LVU74
 378:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 254              		.loc 1 378 23 is_stmt 0 view .LVU75
 255 0016 B368     		ldr	r3, [r6, #8]
 256 0018 5C1B     		subs	r4, r3, r5
 378:RTT/SEGGER_RTT.c ****     NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 257              		.loc 1 378 21 view .LVU76
 258 001a 9442     		cmp	r4, r2
 259 001c 28BF     		it	cs
 260 001e 1446     		movcs	r4, r2
 261              	.LVL30:
 379:RTT/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 262              		.loc 1 379 5 is_stmt 1 view .LVU77
 379:RTT/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 263              		.loc 1 379 21 is_stmt 0 view .LVU78
 264 0020 BC42     		cmp	r4, r7
 265 0022 28BF     		it	cs
 266 0024 3C46     		movcs	r4, r7
 267              	.LVL31:
 380:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 268              		.loc 1 380 5 is_stmt 1 view .LVU79
 380:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 269              		.loc 1 380 18 is_stmt 0 view .LVU80
 270 0026 7068     		ldr	r0, [r6, #4]
 271              	.LVL32:
 389:RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 16


 272              		.loc 1 389 5 is_stmt 1 view .LVU81
 273 0028 2246     		mov	r2, r4
 274 002a 4146     		mov	r1, r8
 275 002c 2844     		add	r0, r0, r5
 276              	.LVL33:
 389:RTT/SEGGER_RTT.c ****     NumBytesWritten += NumBytesToWrite;
 277              		.loc 1 389 5 is_stmt 0 view .LVU82
 278 002e FFF7FEFF 		bl	memcpy
 279              	.LVL34:
 390:RTT/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 280              		.loc 1 390 5 is_stmt 1 view .LVU83
 390:RTT/SEGGER_RTT.c ****     pBuffer         += NumBytesToWrite;
 281              		.loc 1 390 21 is_stmt 0 view .LVU84
 282 0032 A144     		add	r9, r9, r4
 283              	.LVL35:
 391:RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 284              		.loc 1 391 5 is_stmt 1 view .LVU85
 391:RTT/SEGGER_RTT.c ****     NumBytes        -= NumBytesToWrite;
 285              		.loc 1 391 21 is_stmt 0 view .LVU86
 286 0034 A044     		add	r8, r8, r4
 287              	.LVL36:
 392:RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 288              		.loc 1 392 5 is_stmt 1 view .LVU87
 392:RTT/SEGGER_RTT.c ****     WrOff           += NumBytesToWrite;
 289              		.loc 1 392 21 is_stmt 0 view .LVU88
 290 0036 3F1B     		subs	r7, r7, r4
 291              	.LVL37:
 393:RTT/SEGGER_RTT.c **** #endif
 292              		.loc 1 393 5 is_stmt 1 view .LVU89
 393:RTT/SEGGER_RTT.c **** #endif
 293              		.loc 1 393 21 is_stmt 0 view .LVU90
 294 0038 2544     		add	r5, r5, r4
 295              	.LVL38:
 395:RTT/SEGGER_RTT.c ****       WrOff = 0u;
 296              		.loc 1 395 5 is_stmt 1 view .LVU91
 395:RTT/SEGGER_RTT.c ****       WrOff = 0u;
 297              		.loc 1 395 23 is_stmt 0 view .LVU92
 298 003a B368     		ldr	r3, [r6, #8]
 395:RTT/SEGGER_RTT.c ****       WrOff = 0u;
 299              		.loc 1 395 8 view .LVU93
 300 003c AB42     		cmp	r3, r5
 301 003e 0BD0     		beq	.L15
 302              	.LVL39:
 303              	.L11:
 398:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 304              		.loc 1 398 5 is_stmt 1 view .LVU94
 305              		.syntax unified
 306              	@ 398 "RTT/SEGGER_RTT.c" 1
 307 0040 BFF35F8F 		dmb
 308              	
 309              	@ 0 "" 2
 398:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 310              		.loc 1 398 15 view .LVU95
 399:RTT/SEGGER_RTT.c ****   } while (NumBytes);
 311              		.loc 1 399 5 view .LVU96
 399:RTT/SEGGER_RTT.c ****   } while (NumBytes);
 312              		.loc 1 399 18 is_stmt 0 view .LVU97
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 17


 313              		.thumb
 314              		.syntax unified
 315 0044 F560     		str	r5, [r6, #12]
 400:RTT/SEGGER_RTT.c ****   return NumBytesWritten;
 316              		.loc 1 400 11 is_stmt 1 view .LVU98
 400:RTT/SEGGER_RTT.c ****   return NumBytesWritten;
 317              		.loc 1 400 3 is_stmt 0 view .LVU99
 318 0046 4FB1     		cbz	r7, .L16
 319              	.LVL40:
 320              	.L12:
 371:RTT/SEGGER_RTT.c ****     RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the me
 321              		.loc 1 371 3 is_stmt 1 view .LVU100
 372:RTT/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 322              		.loc 1 372 5 view .LVU101
 372:RTT/SEGGER_RTT.c ****     if (RdOff > WrOff) {
 323              		.loc 1 372 11 is_stmt 0 view .LVU102
 324 0048 3469     		ldr	r4, [r6, #16]
 325              	.LVL41:
 373:RTT/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 326              		.loc 1 373 5 is_stmt 1 view .LVU103
 373:RTT/SEGGER_RTT.c ****       NumBytesToWrite = RdOff - WrOff - 1u;
 327              		.loc 1 373 8 is_stmt 0 view .LVU104
 328 004a A542     		cmp	r5, r4
 329 004c E1D3     		bcc	.L17
 376:RTT/SEGGER_RTT.c ****     }
 330              		.loc 1 376 7 is_stmt 1 view .LVU105
 376:RTT/SEGGER_RTT.c ****     }
 331              		.loc 1 376 30 is_stmt 0 view .LVU106
 332 004e B268     		ldr	r2, [r6, #8]
 376:RTT/SEGGER_RTT.c ****     }
 333              		.loc 1 376 62 view .LVU107
 334 0050 641B     		subs	r4, r4, r5
 335              	.LVL42:
 376:RTT/SEGGER_RTT.c ****     }
 336              		.loc 1 376 45 view .LVU108
 337 0052 1444     		add	r4, r4, r2
 376:RTT/SEGGER_RTT.c ****     }
 338              		.loc 1 376 23 view .LVU109
 339 0054 621E     		subs	r2, r4, #1
 340              	.LVL43:
 376:RTT/SEGGER_RTT.c ****     }
 341              		.loc 1 376 23 view .LVU110
 342 0056 DEE7     		b	.L10
 343              	.LVL44:
 344              	.L15:
 396:RTT/SEGGER_RTT.c ****     }
 345              		.loc 1 396 13 view .LVU111
 346 0058 0025     		movs	r5, #0
 347              	.LVL45:
 396:RTT/SEGGER_RTT.c ****     }
 348              		.loc 1 396 13 view .LVU112
 349 005a F1E7     		b	.L11
 350              	.LVL46:
 351              	.L16:
 401:RTT/SEGGER_RTT.c **** }
 352              		.loc 1 401 3 is_stmt 1 view .LVU113
 402:RTT/SEGGER_RTT.c **** 
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 18


 353              		.loc 1 402 1 is_stmt 0 view .LVU114
 354 005c 4846     		mov	r0, r9
 355 005e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 402:RTT/SEGGER_RTT.c **** 
 356              		.loc 1 402 1 view .LVU115
 357              		.cfi_endproc
 358              	.LFE1:
 360              		.section	.text._PostTerminalSwitch,"ax",%progbits
 361              		.align	1
 362              		.syntax unified
 363              		.thumb
 364              		.thumb_func
 365              		.fpu fpv4-sp-d16
 367              	_PostTerminalSwitch:
 368              	.LVL47:
 369              	.LFB3:
 490:RTT/SEGGER_RTT.c ****   unsigned char ac[2];
 370              		.loc 1 490 88 is_stmt 1 view -0
 371              		.cfi_startproc
 372              		@ args = 0, pretend = 0, frame = 8
 373              		@ frame_needed = 0, uses_anonymous_args = 0
 490:RTT/SEGGER_RTT.c ****   unsigned char ac[2];
 374              		.loc 1 490 88 is_stmt 0 view .LVU117
 375 0000 00B5     		push	{lr}
 376              	.LCFI2:
 377              		.cfi_def_cfa_offset 4
 378              		.cfi_offset 14, -4
 379 0002 83B0     		sub	sp, sp, #12
 380              	.LCFI3:
 381              		.cfi_def_cfa_offset 16
 491:RTT/SEGGER_RTT.c **** 
 382              		.loc 1 491 3 is_stmt 1 view .LVU118
 493:RTT/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 383              		.loc 1 493 3 view .LVU119
 493:RTT/SEGGER_RTT.c ****   ac[1] = _aTerminalId[TerminalId];  // Caller made already sure that TerminalId does not exceed ou
 384              		.loc 1 493 9 is_stmt 0 view .LVU120
 385 0004 FF23     		movs	r3, #255
 386 0006 8DF80430 		strb	r3, [sp, #4]
 494:RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 387              		.loc 1 494 3 is_stmt 1 view .LVU121
 494:RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 388              		.loc 1 494 23 is_stmt 0 view .LVU122
 389 000a 054B     		ldr	r3, .L20
 390 000c 5B5C     		ldrb	r3, [r3, r1]	@ zero_extendqisi2
 494:RTT/SEGGER_RTT.c ****   _WriteBlocking(pRing, (const char*)ac, 2u);
 391              		.loc 1 494 9 view .LVU123
 392 000e 8DF80530 		strb	r3, [sp, #5]
 495:RTT/SEGGER_RTT.c **** }
 393              		.loc 1 495 3 is_stmt 1 view .LVU124
 394 0012 0222     		movs	r2, #2
 395 0014 01A9     		add	r1, sp, #4
 396              	.LVL48:
 495:RTT/SEGGER_RTT.c **** }
 397              		.loc 1 495 3 is_stmt 0 view .LVU125
 398 0016 FFF7FEFF 		bl	_WriteBlocking
 399              	.LVL49:
 496:RTT/SEGGER_RTT.c **** 
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 19


 400              		.loc 1 496 1 view .LVU126
 401 001a 03B0     		add	sp, sp, #12
 402              	.LCFI4:
 403              		.cfi_def_cfa_offset 4
 404              		@ sp needed
 405 001c 5DF804FB 		ldr	pc, [sp], #4
 406              	.L21:
 407              		.align	2
 408              	.L20:
 409 0020 00000000 		.word	.LANCHOR0
 410              		.cfi_endproc
 411              	.LFE3:
 413              		.section	.rodata._DoInit.str1.4,"aMS",%progbits,1
 414              		.align	2
 415              	.LC0:
 416 0000 5465726D 		.ascii	"Terminal\000"
 416      696E616C 
 416      00
 417 0009 000000   		.align	2
 418              	.LC1:
 419 000c 52545400 		.ascii	"RTT\000"
 420              		.align	2
 421              	.LC2:
 422 0010 53454747 		.ascii	"SEGGER\000"
 422      455200
 423              		.section	.text._DoInit,"ax",%progbits
 424              		.align	1
 425              		.syntax unified
 426              		.thumb
 427              		.thumb_func
 428              		.fpu fpv4-sp-d16
 430              	_DoInit:
 431              	.LFB0:
 302:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of ac
 432              		.loc 1 302 27 is_stmt 1 view -0
 433              		.cfi_startproc
 434              		@ args = 0, pretend = 0, frame = 0
 435              		@ frame_needed = 0, uses_anonymous_args = 0
 436              		@ link register save eliminated.
 303:RTT/SEGGER_RTT.c ****   //
 437              		.loc 1 303 3 view .LVU128
 307:RTT/SEGGER_RTT.c ****   p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 438              		.loc 1 307 3 view .LVU129
 439              	.LVL50:
 308:RTT/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 440              		.loc 1 308 3 view .LVU130
 308:RTT/SEGGER_RTT.c ****   p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 441              		.loc 1 308 25 is_stmt 0 view .LVU131
 442 0000 144B     		ldr	r3, .L23
 443 0002 0322     		movs	r2, #3
 444 0004 1A61     		str	r2, [r3, #16]
 309:RTT/SEGGER_RTT.c ****   //
 445              		.loc 1 309 3 is_stmt 1 view .LVU132
 309:RTT/SEGGER_RTT.c ****   //
 446              		.loc 1 309 25 is_stmt 0 view .LVU133
 447 0006 5A61     		str	r2, [r3, #20]
 313:RTT/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 20


 448              		.loc 1 313 3 is_stmt 1 view .LVU134
 313:RTT/SEGGER_RTT.c ****   p->aUp[0].pBuffer       = _acUpBuffer;
 449              		.loc 1 313 27 is_stmt 0 view .LVU135
 450 0008 1349     		ldr	r1, .L23+4
 451 000a 9961     		str	r1, [r3, #24]
 314:RTT/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 452              		.loc 1 314 3 is_stmt 1 view .LVU136
 314:RTT/SEGGER_RTT.c ****   p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 453              		.loc 1 314 27 is_stmt 0 view .LVU137
 454 000c 134A     		ldr	r2, .L23+8
 455 000e DA61     		str	r2, [r3, #28]
 315:RTT/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 456              		.loc 1 315 3 is_stmt 1 view .LVU138
 315:RTT/SEGGER_RTT.c ****   p->aUp[0].RdOff         = 0u;
 457              		.loc 1 315 27 is_stmt 0 view .LVU139
 458 0010 4FF48062 		mov	r2, #1024
 459 0014 1A62     		str	r2, [r3, #32]
 316:RTT/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 460              		.loc 1 316 3 is_stmt 1 view .LVU140
 316:RTT/SEGGER_RTT.c ****   p->aUp[0].WrOff         = 0u;
 461              		.loc 1 316 27 is_stmt 0 view .LVU141
 462 0016 0022     		movs	r2, #0
 463 0018 9A62     		str	r2, [r3, #40]
 317:RTT/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 464              		.loc 1 317 3 is_stmt 1 view .LVU142
 317:RTT/SEGGER_RTT.c ****   p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 465              		.loc 1 317 27 is_stmt 0 view .LVU143
 466 001a 5A62     		str	r2, [r3, #36]
 318:RTT/SEGGER_RTT.c ****   //
 467              		.loc 1 318 3 is_stmt 1 view .LVU144
 318:RTT/SEGGER_RTT.c ****   //
 468              		.loc 1 318 27 is_stmt 0 view .LVU145
 469 001c DA62     		str	r2, [r3, #44]
 322:RTT/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 470              		.loc 1 322 3 is_stmt 1 view .LVU146
 322:RTT/SEGGER_RTT.c ****   p->aDown[0].pBuffer       = _acDownBuffer;
 471              		.loc 1 322 29 is_stmt 0 view .LVU147
 472 001e 1966     		str	r1, [r3, #96]
 323:RTT/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 473              		.loc 1 323 3 is_stmt 1 view .LVU148
 323:RTT/SEGGER_RTT.c ****   p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 474              		.loc 1 323 29 is_stmt 0 view .LVU149
 475 0020 0F49     		ldr	r1, .L23+12
 476 0022 5966     		str	r1, [r3, #100]
 324:RTT/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 477              		.loc 1 324 3 is_stmt 1 view .LVU150
 324:RTT/SEGGER_RTT.c ****   p->aDown[0].RdOff         = 0u;
 478              		.loc 1 324 29 is_stmt 0 view .LVU151
 479 0024 1021     		movs	r1, #16
 480 0026 9966     		str	r1, [r3, #104]
 325:RTT/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 481              		.loc 1 325 3 is_stmt 1 view .LVU152
 325:RTT/SEGGER_RTT.c ****   p->aDown[0].WrOff         = 0u;
 482              		.loc 1 325 29 is_stmt 0 view .LVU153
 483 0028 1A67     		str	r2, [r3, #112]
 326:RTT/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 484              		.loc 1 326 3 is_stmt 1 view .LVU154
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 21


 326:RTT/SEGGER_RTT.c ****   p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 485              		.loc 1 326 29 is_stmt 0 view .LVU155
 486 002a DA66     		str	r2, [r3, #108]
 327:RTT/SEGGER_RTT.c ****   //
 487              		.loc 1 327 3 is_stmt 1 view .LVU156
 327:RTT/SEGGER_RTT.c ****   //
 488              		.loc 1 327 29 is_stmt 0 view .LVU157
 489 002c 5A67     		str	r2, [r3, #116]
 333:RTT/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accessed inside core for cores that al
 490              		.loc 1 333 3 is_stmt 1 view .LVU158
 491 002e 0D4A     		ldr	r2, .L23+16
 492 0030 1068     		ldr	r0, [r2]
 493 0032 C3F80700 		str	r0, [r3, #7]	@ unaligned
 334:RTT/SEGGER_RTT.c ****   STRCPY((char*)&p->acID[0], "SEGGER");
 494              		.loc 1 334 3 view .LVU159
 495              		.syntax unified
 496              	@ 334 "RTT/SEGGER_RTT.c" 1
 497 0036 BFF35F8F 		dmb
 498              	
 499              	@ 0 "" 2
 334:RTT/SEGGER_RTT.c ****   STRCPY((char*)&p->acID[0], "SEGGER");
 500              		.loc 1 334 13 view .LVU160
 335:RTT/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accessed inside core for cores that al
 501              		.loc 1 335 3 view .LVU161
 502              		.thumb
 503              		.syntax unified
 504 003a 0B4A     		ldr	r2, .L23+20
 505 003c 92E80300 		ldm	r2, {r0, r1}
 506 0040 1860     		str	r0, [r3]
 507 0042 9980     		strh	r1, [r3, #4]	@ movhi
 336:RTT/SEGGER_RTT.c ****   p->acID[6] = ' ';
 508              		.loc 1 336 3 view .LVU162
 509              		.syntax unified
 510              	@ 336 "RTT/SEGGER_RTT.c" 1
 511 0044 BFF35F8F 		dmb
 512              	
 513              	@ 0 "" 2
 336:RTT/SEGGER_RTT.c ****   p->acID[6] = ' ';
 514              		.loc 1 336 13 view .LVU163
 337:RTT/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accessed inside core for cores that al
 515              		.loc 1 337 3 view .LVU164
 337:RTT/SEGGER_RTT.c ****   RTT__DMB();                       // Force order of memory accessed inside core for cores that al
 516              		.loc 1 337 14 is_stmt 0 view .LVU165
 517              		.thumb
 518              		.syntax unified
 519 0048 2022     		movs	r2, #32
 520 004a 9A71     		strb	r2, [r3, #6]
 338:RTT/SEGGER_RTT.c **** }
 521              		.loc 1 338 3 is_stmt 1 view .LVU166
 522              		.syntax unified
 523              	@ 338 "RTT/SEGGER_RTT.c" 1
 524 004c BFF35F8F 		dmb
 525              	
 526              	@ 0 "" 2
 338:RTT/SEGGER_RTT.c **** }
 527              		.loc 1 338 13 view .LVU167
 339:RTT/SEGGER_RTT.c **** 
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 22


 528              		.loc 1 339 1 is_stmt 0 view .LVU168
 529              		.thumb
 530              		.syntax unified
 531 0050 7047     		bx	lr
 532              	.L24:
 533 0052 00BF     		.align	2
 534              	.L23:
 535 0054 00000000 		.word	_SEGGER_RTT
 536 0058 00000000 		.word	.LC0
 537 005c 00000000 		.word	.LANCHOR1
 538 0060 00000000 		.word	.LANCHOR2
 539 0064 0C000000 		.word	.LC1
 540 0068 10000000 		.word	.LC2
 541              		.cfi_endproc
 542              	.LFE0:
 544              		.section	.text.SEGGER_RTT_ReadUpBufferNoLock,"ax",%progbits
 545              		.align	1
 546              		.global	SEGGER_RTT_ReadUpBufferNoLock
 547              		.syntax unified
 548              		.thumb
 549              		.thumb_func
 550              		.fpu fpv4-sp-d16
 552              	SEGGER_RTT_ReadUpBufferNoLock:
 553              	.LVL51:
 554              	.LFB5:
 529:RTT/SEGGER_RTT.c **** 
 530:RTT/SEGGER_RTT.c **** /*********************************************************************
 531:RTT/SEGGER_RTT.c **** *
 532:RTT/SEGGER_RTT.c **** *       Public code
 533:RTT/SEGGER_RTT.c **** *
 534:RTT/SEGGER_RTT.c **** **********************************************************************
 535:RTT/SEGGER_RTT.c **** */
 536:RTT/SEGGER_RTT.c **** 
 537:RTT/SEGGER_RTT.c **** /*********************************************************************
 538:RTT/SEGGER_RTT.c **** *
 539:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBufferNoLock()
 540:RTT/SEGGER_RTT.c **** *
 541:RTT/SEGGER_RTT.c **** *  Function description
 542:RTT/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 543:RTT/SEGGER_RTT.c **** *    which have been previously stored by the application.
 544:RTT/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 545:RTT/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 546:RTT/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 547:RTT/SEGGER_RTT.c **** *
 548:RTT/SEGGER_RTT.c **** *  Parameters
 549:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 550:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 551:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 552:RTT/SEGGER_RTT.c **** *
 553:RTT/SEGGER_RTT.c **** *  Return value
 554:RTT/SEGGER_RTT.c **** *    Number of bytes that have been read.
 555:RTT/SEGGER_RTT.c **** *
 556:RTT/SEGGER_RTT.c **** *  Additional information
 557:RTT/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 558:RTT/SEGGER_RTT.c **** */
 559:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBufferNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 555              		.loc 1 559 96 is_stmt 1 view -0
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 23


 556              		.cfi_startproc
 557              		@ args = 0, pretend = 0, frame = 0
 558              		@ frame_needed = 0, uses_anonymous_args = 0
 559              		.loc 1 559 96 is_stmt 0 view .LVU170
 560 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 561              	.LCFI5:
 562              		.cfi_def_cfa_offset 32
 563              		.cfi_offset 4, -32
 564              		.cfi_offset 5, -28
 565              		.cfi_offset 6, -24
 566              		.cfi_offset 7, -20
 567              		.cfi_offset 8, -16
 568              		.cfi_offset 9, -12
 569              		.cfi_offset 10, -8
 570              		.cfi_offset 14, -4
 571 0004 0446     		mov	r4, r0
 572 0006 8846     		mov	r8, r1
 573 0008 9146     		mov	r9, r2
 560:RTT/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 574              		.loc 1 560 3 is_stmt 1 view .LVU171
 561:RTT/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 575              		.loc 1 561 3 view .LVU172
 562:RTT/SEGGER_RTT.c ****   unsigned                RdOff;
 576              		.loc 1 562 3 view .LVU173
 563:RTT/SEGGER_RTT.c ****   unsigned                WrOff;
 577              		.loc 1 563 3 view .LVU174
 564:RTT/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 578              		.loc 1 564 3 view .LVU175
 565:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 579              		.loc 1 565 3 view .LVU176
 566:RTT/SEGGER_RTT.c ****   volatile char*          pSrc;
 580              		.loc 1 566 3 view .LVU177
 581              	.LBB2:
 567:RTT/SEGGER_RTT.c **** 
 568:RTT/SEGGER_RTT.c ****   INIT();
 582              		.loc 1 568 3 view .LVU178
 583              		.loc 1 568 3 view .LVU179
 584              	.LVL52:
 585              		.loc 1 568 3 view .LVU180
 586              		.loc 1 568 3 view .LVU181
 587 000a 274B     		ldr	r3, .L36
 588 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 589 000e C3B1     		cbz	r3, .L33
 590              	.LVL53:
 591              	.L26:
 592              		.loc 1 568 3 discriminator 3 view .LVU182
 593              	.LBE2:
 594              		.loc 1 568 9 discriminator 3 view .LVU183
 569:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 595              		.loc 1 569 3 discriminator 3 view .LVU184
 570:RTT/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 596              		.loc 1 570 3 discriminator 3 view .LVU185
 571:RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 597              		.loc 1 571 3 discriminator 3 view .LVU186
 598              		.loc 1 571 9 is_stmt 0 discriminator 3 view .LVU187
 599 0010 04EB4403 		add	r3, r4, r4, lsl #1
 600 0014 244A     		ldr	r2, .L36
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 24


 601 0016 02EBC303 		add	r3, r2, r3, lsl #3
 602 001a 9F6A     		ldr	r7, [r3, #40]
 603              	.LVL54:
 572:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 604              		.loc 1 572 3 is_stmt 1 discriminator 3 view .LVU188
 605              		.loc 1 572 9 is_stmt 0 discriminator 3 view .LVU189
 606 001c 5D6A     		ldr	r5, [r3, #36]
 607              	.LVL55:
 573:RTT/SEGGER_RTT.c ****   NumBytesRead = 0u;
 608              		.loc 1 573 3 is_stmt 1 discriminator 3 view .LVU190
 574:RTT/SEGGER_RTT.c ****   //
 575:RTT/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 576:RTT/SEGGER_RTT.c ****   //
 577:RTT/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 609              		.loc 1 577 3 discriminator 3 view .LVU191
 610              		.loc 1 577 6 is_stmt 0 discriminator 3 view .LVU192
 611 001e AF42     		cmp	r7, r5
 612 0020 12D8     		bhi	.L34
 573:RTT/SEGGER_RTT.c ****   NumBytesRead = 0u;
 613              		.loc 1 573 16 view .LVU193
 614 0022 0026     		movs	r6, #0
 615              	.LVL56:
 616              	.L27:
 578:RTT/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 579:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 580:RTT/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 581:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 582:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 583:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 584:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 585:RTT/SEGGER_RTT.c ****     while (NumBytesRem--) {
 586:RTT/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 587:RTT/SEGGER_RTT.c ****     };
 588:RTT/SEGGER_RTT.c **** #else
 589:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 590:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 591:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 592:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 593:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 594:RTT/SEGGER_RTT.c **** #endif
 595:RTT/SEGGER_RTT.c ****     //
 596:RTT/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 597:RTT/SEGGER_RTT.c ****     //
 598:RTT/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 599:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 600:RTT/SEGGER_RTT.c ****     }
 601:RTT/SEGGER_RTT.c ****   }
 602:RTT/SEGGER_RTT.c ****   //
 603:RTT/SEGGER_RTT.c ****   // Read remaining items of buffer
 604:RTT/SEGGER_RTT.c ****   //
 605:RTT/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 617              		.loc 1 605 3 is_stmt 1 view .LVU194
 618              		.loc 1 605 15 is_stmt 0 view .LVU195
 619 0024 ED1B     		subs	r5, r5, r7
 620              	.LVL57:
 606:RTT/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 621              		.loc 1 606 3 is_stmt 1 view .LVU196
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 25


 622              		.loc 1 606 15 is_stmt 0 view .LVU197
 623 0026 4D45     		cmp	r5, r9
 624 0028 28BF     		it	cs
 625 002a 4D46     		movcs	r5, r9
 626              	.LVL58:
 607:RTT/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 627              		.loc 1 607 3 is_stmt 1 view .LVU198
 628              		.loc 1 607 6 is_stmt 0 view .LVU199
 629 002c 65BB     		cbnz	r5, .L35
 630              	.LVL59:
 631              	.L28:
 608:RTT/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 609:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 610:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 611:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 612:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 613:RTT/SEGGER_RTT.c ****     while (NumBytesRem--) {
 614:RTT/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 615:RTT/SEGGER_RTT.c ****     };
 616:RTT/SEGGER_RTT.c **** #else
 617:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 618:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 619:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 620:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 621:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 622:RTT/SEGGER_RTT.c **** #endif
 623:RTT/SEGGER_RTT.c ****   }
 624:RTT/SEGGER_RTT.c ****   //
 625:RTT/SEGGER_RTT.c ****   // Update read offset of buffer
 626:RTT/SEGGER_RTT.c ****   //
 627:RTT/SEGGER_RTT.c ****   if (NumBytesRead) {
 632              		.loc 1 627 3 is_stmt 1 view .LVU200
 633              		.loc 1 627 6 is_stmt 0 view .LVU201
 634 002e 2EB1     		cbz	r6, .L25
 628:RTT/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 635              		.loc 1 628 5 is_stmt 1 view .LVU202
 636              		.loc 1 628 18 is_stmt 0 view .LVU203
 637 0030 04EB4404 		add	r4, r4, r4, lsl #1
 638              	.LVL60:
 639              		.loc 1 628 18 view .LVU204
 640 0034 1C48     		ldr	r0, .L36
 641 0036 00EBC404 		add	r4, r0, r4, lsl #3
 642 003a A762     		str	r7, [r4, #40]
 629:RTT/SEGGER_RTT.c ****   }
 630:RTT/SEGGER_RTT.c ****   //
 631:RTT/SEGGER_RTT.c ****   return NumBytesRead;
 643              		.loc 1 631 3 is_stmt 1 view .LVU205
 644              	.L25:
 632:RTT/SEGGER_RTT.c **** }
 645              		.loc 1 632 1 is_stmt 0 view .LVU206
 646 003c 3046     		mov	r0, r6
 647 003e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 648              	.LVL61:
 649              	.L33:
 650              	.LBB3:
 568:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 651              		.loc 1 568 3 is_stmt 1 discriminator 1 view .LVU207
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 26


 652 0042 FFF7FEFF 		bl	_DoInit
 653              	.LVL62:
 568:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 654              		.loc 1 568 3 is_stmt 0 discriminator 1 view .LVU208
 655 0046 E3E7     		b	.L26
 656              	.LVL63:
 657              	.L34:
 568:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 658              		.loc 1 568 3 discriminator 1 view .LVU209
 659              	.LBE3:
 578:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 660              		.loc 1 578 5 is_stmt 1 view .LVU210
 578:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 661              		.loc 1 578 24 is_stmt 0 view .LVU211
 662 0048 1346     		mov	r3, r2
 663 004a 04EB440A 		add	r10, r4, r4, lsl #1
 664 004e 02EBCA0A 		add	r10, r2, r10, lsl #3
 665 0052 DAF82060 		ldr	r6, [r10, #32]
 578:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 666              		.loc 1 578 17 view .LVU212
 667 0056 F61B     		subs	r6, r6, r7
 668              	.LVL64:
 579:RTT/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 669              		.loc 1 579 5 is_stmt 1 view .LVU213
 579:RTT/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 670              		.loc 1 579 17 is_stmt 0 view .LVU214
 671 0058 4E45     		cmp	r6, r9
 672 005a 28BF     		it	cs
 673 005c 4E46     		movcs	r6, r9
 674              	.LVL65:
 580:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 675              		.loc 1 580 5 is_stmt 1 view .LVU215
 580:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 676              		.loc 1 580 18 is_stmt 0 view .LVU216
 677 005e 621C     		adds	r2, r4, #1
 678 0060 02EB4202 		add	r2, r2, r2, lsl #1
 679 0064 03EBC203 		add	r3, r3, r2, lsl #3
 680 0068 5968     		ldr	r1, [r3, #4]
 681              	.LVL66:
 589:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 682              		.loc 1 589 5 is_stmt 1 view .LVU217
 683 006a 3246     		mov	r2, r6
 684 006c 3944     		add	r1, r1, r7
 685              	.LVL67:
 589:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 686              		.loc 1 589 5 is_stmt 0 view .LVU218
 687 006e 4046     		mov	r0, r8
 688 0070 FFF7FEFF 		bl	memcpy
 689              	.LVL68:
 590:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 690              		.loc 1 590 5 is_stmt 1 view .LVU219
 591:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 691              		.loc 1 591 5 view .LVU220
 591:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 692              		.loc 1 591 18 is_stmt 0 view .LVU221
 693 0074 B044     		add	r8, r8, r6
 694              	.LVL69:
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 27


 592:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 695              		.loc 1 592 5 is_stmt 1 view .LVU222
 592:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 696              		.loc 1 592 18 is_stmt 0 view .LVU223
 697 0076 A9EB0609 		sub	r9, r9, r6
 698              	.LVL70:
 593:RTT/SEGGER_RTT.c **** #endif
 699              		.loc 1 593 5 is_stmt 1 view .LVU224
 593:RTT/SEGGER_RTT.c **** #endif
 700              		.loc 1 593 18 is_stmt 0 view .LVU225
 701 007a 3744     		add	r7, r7, r6
 702              	.LVL71:
 598:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 703              		.loc 1 598 5 is_stmt 1 view .LVU226
 598:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 704              		.loc 1 598 23 is_stmt 0 view .LVU227
 705 007c DAF82030 		ldr	r3, [r10, #32]
 598:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 706              		.loc 1 598 8 view .LVU228
 707 0080 BB42     		cmp	r3, r7
 708 0082 CFD1     		bne	.L27
 599:RTT/SEGGER_RTT.c ****     }
 709              		.loc 1 599 13 view .LVU229
 710 0084 0027     		movs	r7, #0
 711              	.LVL72:
 599:RTT/SEGGER_RTT.c ****     }
 712              		.loc 1 599 13 view .LVU230
 713 0086 CDE7     		b	.L27
 714              	.LVL73:
 715              	.L35:
 608:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 716              		.loc 1 608 5 is_stmt 1 view .LVU231
 608:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 717              		.loc 1 608 18 is_stmt 0 view .LVU232
 718 0088 631C     		adds	r3, r4, #1
 719 008a 03EB4303 		add	r3, r3, r3, lsl #1
 720 008e 064A     		ldr	r2, .L36
 721 0090 02EBC303 		add	r3, r2, r3, lsl #3
 722 0094 5968     		ldr	r1, [r3, #4]
 723              	.LVL74:
 617:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 724              		.loc 1 617 5 is_stmt 1 view .LVU233
 725 0096 2A46     		mov	r2, r5
 726 0098 3944     		add	r1, r1, r7
 727              	.LVL75:
 617:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 728              		.loc 1 617 5 is_stmt 0 view .LVU234
 729 009a 4046     		mov	r0, r8
 730 009c FFF7FEFF 		bl	memcpy
 731              	.LVL76:
 618:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 732              		.loc 1 618 5 is_stmt 1 view .LVU235
 618:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 733              		.loc 1 618 18 is_stmt 0 view .LVU236
 734 00a0 2E44     		add	r6, r6, r5
 735              	.LVL77:
 619:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 28


 736              		.loc 1 619 5 is_stmt 1 view .LVU237
 620:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 737              		.loc 1 620 5 view .LVU238
 621:RTT/SEGGER_RTT.c **** #endif
 738              		.loc 1 621 5 view .LVU239
 621:RTT/SEGGER_RTT.c **** #endif
 739              		.loc 1 621 18 is_stmt 0 view .LVU240
 740 00a2 2F44     		add	r7, r7, r5
 741              	.LVL78:
 621:RTT/SEGGER_RTT.c **** #endif
 742              		.loc 1 621 18 view .LVU241
 743 00a4 C3E7     		b	.L28
 744              	.L37:
 745 00a6 00BF     		.align	2
 746              	.L36:
 747 00a8 00000000 		.word	_SEGGER_RTT
 748              		.cfi_endproc
 749              	.LFE5:
 751              		.section	.text.SEGGER_RTT_ReadNoLock,"ax",%progbits
 752              		.align	1
 753              		.global	SEGGER_RTT_ReadNoLock
 754              		.syntax unified
 755              		.thumb
 756              		.thumb_func
 757              		.fpu fpv4-sp-d16
 759              	SEGGER_RTT_ReadNoLock:
 760              	.LVL79:
 761              	.LFB6:
 633:RTT/SEGGER_RTT.c **** 
 634:RTT/SEGGER_RTT.c **** /*********************************************************************
 635:RTT/SEGGER_RTT.c **** *
 636:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ReadNoLock()
 637:RTT/SEGGER_RTT.c **** *
 638:RTT/SEGGER_RTT.c **** *  Function description
 639:RTT/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 640:RTT/SEGGER_RTT.c **** *    which have been previously stored by the host.
 641:RTT/SEGGER_RTT.c **** *    Do not lock against interrupts and multiple access.
 642:RTT/SEGGER_RTT.c **** *
 643:RTT/SEGGER_RTT.c **** *  Parameters
 644:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 645:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 646:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 647:RTT/SEGGER_RTT.c **** *
 648:RTT/SEGGER_RTT.c **** *  Return value
 649:RTT/SEGGER_RTT.c **** *    Number of bytes that have been read.
 650:RTT/SEGGER_RTT.c **** */
 651:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 762              		.loc 1 651 88 is_stmt 1 view -0
 763              		.cfi_startproc
 764              		@ args = 0, pretend = 0, frame = 0
 765              		@ frame_needed = 0, uses_anonymous_args = 0
 766              		.loc 1 651 88 is_stmt 0 view .LVU243
 767 0000 2DE9F047 		push	{r4, r5, r6, r7, r8, r9, r10, lr}
 768              	.LCFI6:
 769              		.cfi_def_cfa_offset 32
 770              		.cfi_offset 4, -32
 771              		.cfi_offset 5, -28
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 29


 772              		.cfi_offset 6, -24
 773              		.cfi_offset 7, -20
 774              		.cfi_offset 8, -16
 775              		.cfi_offset 9, -12
 776              		.cfi_offset 10, -8
 777              		.cfi_offset 14, -4
 778 0004 0446     		mov	r4, r0
 779 0006 8846     		mov	r8, r1
 780 0008 9146     		mov	r9, r2
 652:RTT/SEGGER_RTT.c ****   unsigned                NumBytesRem;
 781              		.loc 1 652 3 is_stmt 1 view .LVU244
 653:RTT/SEGGER_RTT.c ****   unsigned                NumBytesRead;
 782              		.loc 1 653 3 view .LVU245
 654:RTT/SEGGER_RTT.c ****   unsigned                RdOff;
 783              		.loc 1 654 3 view .LVU246
 655:RTT/SEGGER_RTT.c ****   unsigned                WrOff;
 784              		.loc 1 655 3 view .LVU247
 656:RTT/SEGGER_RTT.c ****   unsigned char*          pBuffer;
 785              		.loc 1 656 3 view .LVU248
 657:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 786              		.loc 1 657 3 view .LVU249
 658:RTT/SEGGER_RTT.c ****   volatile char*          pSrc;
 787              		.loc 1 658 3 view .LVU250
 788              	.LBB4:
 659:RTT/SEGGER_RTT.c ****   //
 660:RTT/SEGGER_RTT.c ****   INIT();
 789              		.loc 1 660 3 view .LVU251
 790              		.loc 1 660 3 view .LVU252
 791              	.LVL80:
 792              		.loc 1 660 3 view .LVU253
 793              		.loc 1 660 3 view .LVU254
 794 000a 244B     		ldr	r3, .L49
 795 000c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 796 000e C3B1     		cbz	r3, .L46
 797              	.LVL81:
 798              	.L39:
 799              		.loc 1 660 3 discriminator 3 view .LVU255
 800              	.LBE4:
 801              		.loc 1 660 9 discriminator 3 view .LVU256
 661:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 802              		.loc 1 661 3 discriminator 3 view .LVU257
 662:RTT/SEGGER_RTT.c ****   pBuffer = (unsigned char*)pData;
 803              		.loc 1 662 3 discriminator 3 view .LVU258
 663:RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 804              		.loc 1 663 3 discriminator 3 view .LVU259
 805              		.loc 1 663 9 is_stmt 0 discriminator 3 view .LVU260
 806 0010 04EB4403 		add	r3, r4, r4, lsl #1
 807 0014 214A     		ldr	r2, .L49
 808 0016 02EBC303 		add	r3, r2, r3, lsl #3
 809 001a 1F6F     		ldr	r7, [r3, #112]
 810              	.LVL82:
 664:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 811              		.loc 1 664 3 is_stmt 1 discriminator 3 view .LVU261
 812              		.loc 1 664 9 is_stmt 0 discriminator 3 view .LVU262
 813 001c DD6E     		ldr	r5, [r3, #108]
 814              	.LVL83:
 665:RTT/SEGGER_RTT.c ****   NumBytesRead = 0u;
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 30


 815              		.loc 1 665 3 is_stmt 1 discriminator 3 view .LVU263
 666:RTT/SEGGER_RTT.c ****   //
 667:RTT/SEGGER_RTT.c ****   // Read from current read position to wrap-around of buffer, first
 668:RTT/SEGGER_RTT.c ****   //
 669:RTT/SEGGER_RTT.c ****   if (RdOff > WrOff) {
 816              		.loc 1 669 3 discriminator 3 view .LVU264
 817              		.loc 1 669 6 is_stmt 0 discriminator 3 view .LVU265
 818 001e AF42     		cmp	r7, r5
 819 0020 12D8     		bhi	.L47
 665:RTT/SEGGER_RTT.c ****   NumBytesRead = 0u;
 820              		.loc 1 665 16 view .LVU266
 821 0022 0026     		movs	r6, #0
 822              	.LVL84:
 823              	.L40:
 670:RTT/SEGGER_RTT.c ****     NumBytesRem = pRing->SizeOfBuffer - RdOff;
 671:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 672:RTT/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 673:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 674:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 675:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 676:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 677:RTT/SEGGER_RTT.c ****     while (NumBytesRem--) {
 678:RTT/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 679:RTT/SEGGER_RTT.c ****     };
 680:RTT/SEGGER_RTT.c **** #else
 681:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 682:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 683:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 684:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 685:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 686:RTT/SEGGER_RTT.c **** #endif
 687:RTT/SEGGER_RTT.c ****     //
 688:RTT/SEGGER_RTT.c ****     // Handle wrap-around of buffer
 689:RTT/SEGGER_RTT.c ****     //
 690:RTT/SEGGER_RTT.c ****     if (RdOff == pRing->SizeOfBuffer) {
 691:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 692:RTT/SEGGER_RTT.c ****     }
 693:RTT/SEGGER_RTT.c ****   }
 694:RTT/SEGGER_RTT.c ****   //
 695:RTT/SEGGER_RTT.c ****   // Read remaining items of buffer
 696:RTT/SEGGER_RTT.c ****   //
 697:RTT/SEGGER_RTT.c ****   NumBytesRem = WrOff - RdOff;
 824              		.loc 1 697 3 is_stmt 1 view .LVU267
 825              		.loc 1 697 15 is_stmt 0 view .LVU268
 826 0024 ED1B     		subs	r5, r5, r7
 827              	.LVL85:
 698:RTT/SEGGER_RTT.c ****   NumBytesRem = MIN(NumBytesRem, BufferSize);
 828              		.loc 1 698 3 is_stmt 1 view .LVU269
 829              		.loc 1 698 15 is_stmt 0 view .LVU270
 830 0026 4D45     		cmp	r5, r9
 831 0028 28BF     		it	cs
 832 002a 4D46     		movcs	r5, r9
 833              	.LVL86:
 699:RTT/SEGGER_RTT.c ****   if (NumBytesRem > 0u) {
 834              		.loc 1 699 3 is_stmt 1 view .LVU271
 835              		.loc 1 699 6 is_stmt 0 view .LVU272
 836 002c 3DBB     		cbnz	r5, .L48
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 31


 837              	.LVL87:
 838              	.L41:
 700:RTT/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 701:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 702:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 703:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 704:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 705:RTT/SEGGER_RTT.c ****     while (NumBytesRem--) {
 706:RTT/SEGGER_RTT.c ****       *pBuffer++ = *pSrc++;
 707:RTT/SEGGER_RTT.c ****     };
 708:RTT/SEGGER_RTT.c **** #else
 709:RTT/SEGGER_RTT.c ****     SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 710:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 711:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 712:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 713:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 714:RTT/SEGGER_RTT.c **** #endif
 715:RTT/SEGGER_RTT.c ****   }
 716:RTT/SEGGER_RTT.c ****   if (NumBytesRead) {
 839              		.loc 1 716 3 is_stmt 1 view .LVU273
 840              		.loc 1 716 6 is_stmt 0 view .LVU274
 841 002e 2EB1     		cbz	r6, .L38
 717:RTT/SEGGER_RTT.c ****     pRing->RdOff = RdOff;
 842              		.loc 1 717 5 is_stmt 1 view .LVU275
 843              		.loc 1 717 18 is_stmt 0 view .LVU276
 844 0030 04EB4404 		add	r4, r4, r4, lsl #1
 845              	.LVL88:
 846              		.loc 1 717 18 view .LVU277
 847 0034 1948     		ldr	r0, .L49
 848 0036 00EBC404 		add	r4, r0, r4, lsl #3
 849 003a 2767     		str	r7, [r4, #112]
 718:RTT/SEGGER_RTT.c ****   }
 719:RTT/SEGGER_RTT.c ****   //
 720:RTT/SEGGER_RTT.c ****   return NumBytesRead;
 850              		.loc 1 720 3 is_stmt 1 view .LVU278
 851              	.L38:
 721:RTT/SEGGER_RTT.c **** }
 852              		.loc 1 721 1 is_stmt 0 view .LVU279
 853 003c 3046     		mov	r0, r6
 854 003e BDE8F087 		pop	{r4, r5, r6, r7, r8, r9, r10, pc}
 855              	.LVL89:
 856              	.L46:
 857              	.LBB5:
 660:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 858              		.loc 1 660 3 is_stmt 1 discriminator 1 view .LVU280
 859 0042 FFF7FEFF 		bl	_DoInit
 860              	.LVL90:
 660:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 861              		.loc 1 660 3 is_stmt 0 discriminator 1 view .LVU281
 862 0046 E3E7     		b	.L39
 863              	.LVL91:
 864              	.L47:
 660:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 865              		.loc 1 660 3 discriminator 1 view .LVU282
 866              	.LBE5:
 670:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 867              		.loc 1 670 5 is_stmt 1 view .LVU283
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 32


 670:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 868              		.loc 1 670 24 is_stmt 0 view .LVU284
 869 0048 04EB440A 		add	r10, r4, r4, lsl #1
 870 004c 02EBCA0A 		add	r10, r2, r10, lsl #3
 871 0050 DAF86860 		ldr	r6, [r10, #104]
 670:RTT/SEGGER_RTT.c ****     NumBytesRem = MIN(NumBytesRem, BufferSize);
 872              		.loc 1 670 17 view .LVU285
 873 0054 F61B     		subs	r6, r6, r7
 874              	.LVL92:
 671:RTT/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 875              		.loc 1 671 5 is_stmt 1 view .LVU286
 671:RTT/SEGGER_RTT.c ****     pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 876              		.loc 1 671 17 is_stmt 0 view .LVU287
 877 0056 4E45     		cmp	r6, r9
 878 0058 28BF     		it	cs
 879 005a 4E46     		movcs	r6, r9
 880              	.LVL93:
 672:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 881              		.loc 1 672 5 is_stmt 1 view .LVU288
 672:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 882              		.loc 1 672 18 is_stmt 0 view .LVU289
 883 005c DAF86410 		ldr	r1, [r10, #100]
 884              	.LVL94:
 681:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 885              		.loc 1 681 5 is_stmt 1 view .LVU290
 886 0060 3246     		mov	r2, r6
 887 0062 3944     		add	r1, r1, r7
 888              	.LVL95:
 681:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 889              		.loc 1 681 5 is_stmt 0 view .LVU291
 890 0064 4046     		mov	r0, r8
 891 0066 FFF7FEFF 		bl	memcpy
 892              	.LVL96:
 682:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 893              		.loc 1 682 5 is_stmt 1 view .LVU292
 683:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 894              		.loc 1 683 5 view .LVU293
 683:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 895              		.loc 1 683 18 is_stmt 0 view .LVU294
 896 006a B044     		add	r8, r8, r6
 897              	.LVL97:
 684:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 898              		.loc 1 684 5 is_stmt 1 view .LVU295
 684:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 899              		.loc 1 684 18 is_stmt 0 view .LVU296
 900 006c A9EB0609 		sub	r9, r9, r6
 901              	.LVL98:
 685:RTT/SEGGER_RTT.c **** #endif
 902              		.loc 1 685 5 is_stmt 1 view .LVU297
 685:RTT/SEGGER_RTT.c **** #endif
 903              		.loc 1 685 18 is_stmt 0 view .LVU298
 904 0070 3744     		add	r7, r7, r6
 905              	.LVL99:
 690:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 906              		.loc 1 690 5 is_stmt 1 view .LVU299
 690:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 907              		.loc 1 690 23 is_stmt 0 view .LVU300
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 33


 908 0072 DAF86830 		ldr	r3, [r10, #104]
 690:RTT/SEGGER_RTT.c ****       RdOff = 0u;
 909              		.loc 1 690 8 view .LVU301
 910 0076 BB42     		cmp	r3, r7
 911 0078 D4D1     		bne	.L40
 691:RTT/SEGGER_RTT.c ****     }
 912              		.loc 1 691 13 view .LVU302
 913 007a 0027     		movs	r7, #0
 914              	.LVL100:
 691:RTT/SEGGER_RTT.c ****     }
 915              		.loc 1 691 13 view .LVU303
 916 007c D2E7     		b	.L40
 917              	.LVL101:
 918              	.L48:
 700:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 919              		.loc 1 700 5 is_stmt 1 view .LVU304
 700:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 920              		.loc 1 700 18 is_stmt 0 view .LVU305
 921 007e 04EB4403 		add	r3, r4, r4, lsl #1
 922 0082 064A     		ldr	r2, .L49
 923 0084 02EBC303 		add	r3, r2, r3, lsl #3
 924 0088 596E     		ldr	r1, [r3, #100]
 925              	.LVL102:
 709:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 926              		.loc 1 709 5 is_stmt 1 view .LVU306
 927 008a 2A46     		mov	r2, r5
 928 008c 3944     		add	r1, r1, r7
 929              	.LVL103:
 709:RTT/SEGGER_RTT.c ****     NumBytesRead += NumBytesRem;
 930              		.loc 1 709 5 is_stmt 0 view .LVU307
 931 008e 4046     		mov	r0, r8
 932 0090 FFF7FEFF 		bl	memcpy
 933              	.LVL104:
 710:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 934              		.loc 1 710 5 is_stmt 1 view .LVU308
 710:RTT/SEGGER_RTT.c ****     pBuffer      += NumBytesRem;
 935              		.loc 1 710 18 is_stmt 0 view .LVU309
 936 0094 2E44     		add	r6, r6, r5
 937              	.LVL105:
 711:RTT/SEGGER_RTT.c ****     BufferSize   -= NumBytesRem;
 938              		.loc 1 711 5 is_stmt 1 view .LVU310
 712:RTT/SEGGER_RTT.c ****     RdOff        += NumBytesRem;
 939              		.loc 1 712 5 view .LVU311
 713:RTT/SEGGER_RTT.c **** #endif
 940              		.loc 1 713 5 view .LVU312
 713:RTT/SEGGER_RTT.c **** #endif
 941              		.loc 1 713 18 is_stmt 0 view .LVU313
 942 0096 2F44     		add	r7, r7, r5
 943              	.LVL106:
 713:RTT/SEGGER_RTT.c **** #endif
 944              		.loc 1 713 18 view .LVU314
 945 0098 C9E7     		b	.L41
 946              	.L50:
 947 009a 00BF     		.align	2
 948              	.L49:
 949 009c 00000000 		.word	_SEGGER_RTT
 950              		.cfi_endproc
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 34


 951              	.LFE6:
 953              		.section	.text.SEGGER_RTT_ReadUpBuffer,"ax",%progbits
 954              		.align	1
 955              		.global	SEGGER_RTT_ReadUpBuffer
 956              		.syntax unified
 957              		.thumb
 958              		.thumb_func
 959              		.fpu fpv4-sp-d16
 961              	SEGGER_RTT_ReadUpBuffer:
 962              	.LVL107:
 963              	.LFB7:
 722:RTT/SEGGER_RTT.c **** 
 723:RTT/SEGGER_RTT.c **** /*********************************************************************
 724:RTT/SEGGER_RTT.c **** *
 725:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ReadUpBuffer
 726:RTT/SEGGER_RTT.c **** *
 727:RTT/SEGGER_RTT.c **** *  Function description
 728:RTT/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 729:RTT/SEGGER_RTT.c **** *    which have been previously stored by the application.
 730:RTT/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 731:RTT/SEGGER_RTT.c **** *    RTT data via other channels, such as TCP/IP or UART.
 732:RTT/SEGGER_RTT.c **** *
 733:RTT/SEGGER_RTT.c **** *  Parameters
 734:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of Up-buffer to be used.
 735:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-up-
 736:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 737:RTT/SEGGER_RTT.c **** *
 738:RTT/SEGGER_RTT.c **** *  Return value
 739:RTT/SEGGER_RTT.c **** *    Number of bytes that have been read.
 740:RTT/SEGGER_RTT.c **** *
 741:RTT/SEGGER_RTT.c **** *  Additional information
 742:RTT/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
 743:RTT/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
 744:RTT/SEGGER_RTT.c **** *    the read operation, writing is also locked.
 745:RTT/SEGGER_RTT.c **** *    If only one consumer reads from the up buffer, 
 746:RTT/SEGGER_RTT.c **** *    call sEGGER_RTT_ReadUpBufferNoLock() instead.
 747:RTT/SEGGER_RTT.c **** */
 748:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_ReadUpBuffer(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 964              		.loc 1 748 92 is_stmt 1 view -0
 965              		.cfi_startproc
 966              		@ args = 0, pretend = 0, frame = 0
 967              		@ frame_needed = 0, uses_anonymous_args = 0
 968              		.loc 1 748 92 is_stmt 0 view .LVU316
 969 0000 10B5     		push	{r4, lr}
 970              	.LCFI7:
 971              		.cfi_def_cfa_offset 8
 972              		.cfi_offset 4, -8
 973              		.cfi_offset 14, -4
 974 0002 0B46     		mov	r3, r1
 749:RTT/SEGGER_RTT.c ****   unsigned NumBytesRead;
 975              		.loc 1 749 3 is_stmt 1 view .LVU317
 976              	.LBB6:
 750:RTT/SEGGER_RTT.c **** 
 751:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 977              		.loc 1 751 3 view .LVU318
 978              		.loc 1 751 3 view .LVU319
 979              		.syntax unified
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 35


 980              	@ 751 "RTT/SEGGER_RTT.c" 1
 981 0004 EFF31184 		mrs   r4, basepri  
 982 0008 4FF02001 		mov   r1, #32       
 983 000c 81F31188 		msr   basepri, r1  
 984              		
 985              	@ 0 "" 2
 986              	.LVL108:
 987              		.loc 1 751 20 view .LVU320
 752:RTT/SEGGER_RTT.c ****   //
 753:RTT/SEGGER_RTT.c ****   // Call the non-locking read function
 754:RTT/SEGGER_RTT.c ****   //
 755:RTT/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadUpBufferNoLock(BufferIndex, pBuffer, BufferSize);
 988              		.loc 1 755 3 view .LVU321
 989              		.loc 1 755 18 is_stmt 0 view .LVU322
 990              		.thumb
 991              		.syntax unified
 992 0010 1946     		mov	r1, r3
 993 0012 FFF7FEFF 		bl	SEGGER_RTT_ReadUpBufferNoLock
 994              	.LVL109:
 756:RTT/SEGGER_RTT.c ****   //
 757:RTT/SEGGER_RTT.c ****   // Finish up.
 758:RTT/SEGGER_RTT.c ****   //
 759:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 995              		.loc 1 759 3 is_stmt 1 view .LVU323
 996              		.syntax unified
 997              	@ 759 "RTT/SEGGER_RTT.c" 1
 998 0016 84F31188 		msr   basepri, r4  
 999              		
 1000              	@ 0 "" 2
 1001              		.thumb
 1002              		.syntax unified
 1003              	.LBE6:
 1004              		.loc 1 759 22 view .LVU324
 760:RTT/SEGGER_RTT.c ****   //
 761:RTT/SEGGER_RTT.c ****   return NumBytesRead;
 1005              		.loc 1 761 3 view .LVU325
 762:RTT/SEGGER_RTT.c **** }
 1006              		.loc 1 762 1 is_stmt 0 view .LVU326
 1007 001a 10BD     		pop	{r4, pc}
 1008              		.loc 1 762 1 view .LVU327
 1009              		.cfi_endproc
 1010              	.LFE7:
 1012              		.section	.text.SEGGER_RTT_Read,"ax",%progbits
 1013              		.align	1
 1014              		.global	SEGGER_RTT_Read
 1015              		.syntax unified
 1016              		.thumb
 1017              		.thumb_func
 1018              		.fpu fpv4-sp-d16
 1020              	SEGGER_RTT_Read:
 1021              	.LVL110:
 1022              	.LFB8:
 763:RTT/SEGGER_RTT.c **** 
 764:RTT/SEGGER_RTT.c **** /*********************************************************************
 765:RTT/SEGGER_RTT.c **** *
 766:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_Read
 767:RTT/SEGGER_RTT.c **** *
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 36


 768:RTT/SEGGER_RTT.c **** *  Function description
 769:RTT/SEGGER_RTT.c **** *    Reads characters from SEGGER real-time-terminal control block
 770:RTT/SEGGER_RTT.c **** *    which have been previously stored by the host.
 771:RTT/SEGGER_RTT.c **** *
 772:RTT/SEGGER_RTT.c **** *  Parameters
 773:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of Down-buffer to be used (e.g. 0 for "Terminal").
 774:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to buffer provided by target application, to copy characters from RTT-dow
 775:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the target application buffer.
 776:RTT/SEGGER_RTT.c **** *
 777:RTT/SEGGER_RTT.c **** *  Return value
 778:RTT/SEGGER_RTT.c **** *    Number of bytes that have been read.
 779:RTT/SEGGER_RTT.c **** */
 780:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_Read(unsigned BufferIndex, void* pBuffer, unsigned BufferSize) {
 1023              		.loc 1 780 84 is_stmt 1 view -0
 1024              		.cfi_startproc
 1025              		@ args = 0, pretend = 0, frame = 0
 1026              		@ frame_needed = 0, uses_anonymous_args = 0
 1027              		.loc 1 780 84 is_stmt 0 view .LVU329
 1028 0000 10B5     		push	{r4, lr}
 1029              	.LCFI8:
 1030              		.cfi_def_cfa_offset 8
 1031              		.cfi_offset 4, -8
 1032              		.cfi_offset 14, -4
 1033 0002 0B46     		mov	r3, r1
 781:RTT/SEGGER_RTT.c ****   unsigned NumBytesRead;
 1034              		.loc 1 781 3 is_stmt 1 view .LVU330
 1035              	.LBB7:
 782:RTT/SEGGER_RTT.c **** 
 783:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1036              		.loc 1 783 3 view .LVU331
 1037              		.loc 1 783 3 view .LVU332
 1038              		.syntax unified
 1039              	@ 783 "RTT/SEGGER_RTT.c" 1
 1040 0004 EFF31184 		mrs   r4, basepri  
 1041 0008 4FF02001 		mov   r1, #32       
 1042 000c 81F31188 		msr   basepri, r1  
 1043              		
 1044              	@ 0 "" 2
 1045              	.LVL111:
 1046              		.loc 1 783 20 view .LVU333
 784:RTT/SEGGER_RTT.c ****   //
 785:RTT/SEGGER_RTT.c ****   // Call the non-locking read function
 786:RTT/SEGGER_RTT.c ****   //
 787:RTT/SEGGER_RTT.c ****   NumBytesRead = SEGGER_RTT_ReadNoLock(BufferIndex, pBuffer, BufferSize);
 1047              		.loc 1 787 3 view .LVU334
 1048              		.loc 1 787 18 is_stmt 0 view .LVU335
 1049              		.thumb
 1050              		.syntax unified
 1051 0010 1946     		mov	r1, r3
 1052 0012 FFF7FEFF 		bl	SEGGER_RTT_ReadNoLock
 1053              	.LVL112:
 788:RTT/SEGGER_RTT.c ****   //
 789:RTT/SEGGER_RTT.c ****   // Finish up.
 790:RTT/SEGGER_RTT.c ****   //
 791:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1054              		.loc 1 791 3 is_stmt 1 view .LVU336
 1055              		.syntax unified
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 37


 1056              	@ 791 "RTT/SEGGER_RTT.c" 1
 1057 0016 84F31188 		msr   basepri, r4  
 1058              		
 1059              	@ 0 "" 2
 1060              		.thumb
 1061              		.syntax unified
 1062              	.LBE7:
 1063              		.loc 1 791 22 view .LVU337
 792:RTT/SEGGER_RTT.c ****   //
 793:RTT/SEGGER_RTT.c ****   return NumBytesRead;
 1064              		.loc 1 793 3 view .LVU338
 794:RTT/SEGGER_RTT.c **** }
 1065              		.loc 1 794 1 is_stmt 0 view .LVU339
 1066 001a 10BD     		pop	{r4, pc}
 1067              		.loc 1 794 1 view .LVU340
 1068              		.cfi_endproc
 1069              	.LFE8:
 1071              		.section	.text.SEGGER_RTT_WriteWithOverwriteNoLock,"ax",%progbits
 1072              		.align	1
 1073              		.global	SEGGER_RTT_WriteWithOverwriteNoLock
 1074              		.syntax unified
 1075              		.thumb
 1076              		.thumb_func
 1077              		.fpu fpv4-sp-d16
 1079              	SEGGER_RTT_WriteWithOverwriteNoLock:
 1080              	.LVL113:
 1081              	.LFB9:
 795:RTT/SEGGER_RTT.c **** 
 796:RTT/SEGGER_RTT.c **** /*********************************************************************
 797:RTT/SEGGER_RTT.c **** *
 798:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteWithOverwriteNoLock
 799:RTT/SEGGER_RTT.c **** *
 800:RTT/SEGGER_RTT.c **** *  Function description
 801:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 802:RTT/SEGGER_RTT.c **** *    control block.
 803:RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteWithOverwriteNoLock does not lock the application 
 804:RTT/SEGGER_RTT.c **** *    and overwrites data if the data does not fit into the buffer.
 805:RTT/SEGGER_RTT.c **** *
 806:RTT/SEGGER_RTT.c **** *  Parameters
 807:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 808:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 809:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 810:RTT/SEGGER_RTT.c **** *
 811:RTT/SEGGER_RTT.c **** *  Notes
 812:RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, data is overwritten.
 813:RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 814:RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 815:RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 816:RTT/SEGGER_RTT.c **** *    (3) Do not use SEGGER_RTT_WriteWithOverwriteNoLock if a J-Link 
 817:RTT/SEGGER_RTT.c **** *        connection reads RTT data.
 818:RTT/SEGGER_RTT.c **** */
 819:RTT/SEGGER_RTT.c **** void SEGGER_RTT_WriteWithOverwriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumByt
 1082              		.loc 1 819 104 is_stmt 1 view -0
 1083              		.cfi_startproc
 1084              		@ args = 0, pretend = 0, frame = 0
 1085              		@ frame_needed = 0, uses_anonymous_args = 0
 1086              		.loc 1 819 104 is_stmt 0 view .LVU342
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 38


 1087 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 1088              	.LCFI9:
 1089              		.cfi_def_cfa_offset 32
 1090              		.cfi_offset 3, -32
 1091              		.cfi_offset 4, -28
 1092              		.cfi_offset 5, -24
 1093              		.cfi_offset 6, -20
 1094              		.cfi_offset 7, -16
 1095              		.cfi_offset 8, -12
 1096              		.cfi_offset 9, -8
 1097              		.cfi_offset 14, -4
 1098 0004 0646     		mov	r6, r0
 1099 0006 8846     		mov	r8, r1
 1100 0008 1746     		mov	r7, r2
 820:RTT/SEGGER_RTT.c ****   const char*           pData;
 1101              		.loc 1 820 3 is_stmt 1 view .LVU343
 821:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1102              		.loc 1 821 3 view .LVU344
 822:RTT/SEGGER_RTT.c ****   unsigned              Avail;
 1103              		.loc 1 822 3 view .LVU345
 823:RTT/SEGGER_RTT.c ****   volatile char*        pDst;
 1104              		.loc 1 823 3 view .LVU346
 824:RTT/SEGGER_RTT.c ****   //
 825:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer and copy some elements into local variables.
 826:RTT/SEGGER_RTT.c ****   //
 827:RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1105              		.loc 1 827 3 view .LVU347
 1106              	.LVL114:
 828:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1107              		.loc 1 828 3 view .LVU348
 829:RTT/SEGGER_RTT.c ****   //
 830:RTT/SEGGER_RTT.c ****   // Check if we will overwrite data and need to adjust the RdOff.
 831:RTT/SEGGER_RTT.c ****   //
 832:RTT/SEGGER_RTT.c ****   if (pRing->WrOff == pRing->RdOff) {
 1108              		.loc 1 832 3 view .LVU349
 1109              		.loc 1 832 12 is_stmt 0 view .LVU350
 1110 000a 00EB4002 		add	r2, r0, r0, lsl #1
 1111              	.LVL115:
 1112              		.loc 1 832 12 view .LVU351
 1113 000e 414B     		ldr	r3, .L68
 1114 0010 03EBC203 		add	r3, r3, r2, lsl #3
 1115 0014 596A     		ldr	r1, [r3, #36]
 1116              	.LVL116:
 1117              		.loc 1 832 28 view .LVU352
 1118 0016 9B6A     		ldr	r3, [r3, #40]
 1119              		.loc 1 832 6 view .LVU353
 1120 0018 9942     		cmp	r1, r3
 1121 001a 0FD0     		beq	.L66
 833:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 834:RTT/SEGGER_RTT.c ****   } else if ( pRing->WrOff < pRing->RdOff) {
 1122              		.loc 1 834 10 is_stmt 1 view .LVU354
 1123              		.loc 1 834 35 is_stmt 0 view .LVU355
 1124 001c 00EB4003 		add	r3, r0, r0, lsl #1
 1125 0020 3C4A     		ldr	r2, .L68
 1126 0022 02EBC303 		add	r3, r2, r3, lsl #3
 1127 0026 9B6A     		ldr	r3, [r3, #40]
 1128              		.loc 1 834 13 view .LVU356
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 39


 1129 0028 9942     		cmp	r1, r3
 1130 002a 19D2     		bcs	.L58
 835:RTT/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u;
 1131              		.loc 1 835 5 is_stmt 1 view .LVU357
 1132              		.loc 1 835 18 is_stmt 0 view .LVU358
 1133 002c 00EB4003 		add	r3, r0, r0, lsl #1
 1134 0030 02EBC303 		add	r3, r2, r3, lsl #3
 1135 0034 9B6A     		ldr	r3, [r3, #40]
 1136              		.loc 1 835 26 view .LVU359
 1137 0036 5B1A     		subs	r3, r3, r1
 1138              		.loc 1 835 11 view .LVU360
 1139 0038 013B     		subs	r3, r3, #1
 1140              	.LVL117:
 1141              		.loc 1 835 11 view .LVU361
 1142 003a 05E0     		b	.L57
 1143              	.LVL118:
 1144              	.L66:
 833:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1145              		.loc 1 833 5 is_stmt 1 view .LVU362
 833:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1146              		.loc 1 833 18 is_stmt 0 view .LVU363
 1147 003c 1346     		mov	r3, r2
 1148 003e 354A     		ldr	r2, .L68
 1149 0040 02EBC303 		add	r3, r2, r3, lsl #3
 1150 0044 1B6A     		ldr	r3, [r3, #32]
 833:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - 1u;
 1151              		.loc 1 833 11 view .LVU364
 1152 0046 013B     		subs	r3, r3, #1
 1153              	.LVL119:
 1154              	.L57:
 836:RTT/SEGGER_RTT.c ****   } else {
 837:RTT/SEGGER_RTT.c ****     Avail = pRing->RdOff - pRing->WrOff - 1u + pRing->SizeOfBuffer;
 838:RTT/SEGGER_RTT.c ****   }
 839:RTT/SEGGER_RTT.c ****   if (NumBytes > Avail) {
 1155              		.loc 1 839 3 is_stmt 1 view .LVU365
 1156              		.loc 1 839 6 is_stmt 0 view .LVU366
 1157 0048 BB42     		cmp	r3, r7
 1158 004a 25D2     		bcs	.L59
 840:RTT/SEGGER_RTT.c ****     pRing->RdOff += (NumBytes - Avail);
 1159              		.loc 1 840 5 is_stmt 1 view .LVU367
 1160              		.loc 1 840 18 is_stmt 0 view .LVU368
 1161 004c 06EB4602 		add	r2, r6, r6, lsl #1
 1162 0050 3048     		ldr	r0, .L68
 1163              	.LVL120:
 1164              		.loc 1 840 18 view .LVU369
 1165 0052 00EBC202 		add	r2, r0, r2, lsl #3
 1166 0056 906A     		ldr	r0, [r2, #40]
 1167              		.loc 1 840 31 view .LVU370
 1168 0058 FB1A     		subs	r3, r7, r3
 1169              	.LVL121:
 1170              		.loc 1 840 18 view .LVU371
 1171 005a 0344     		add	r3, r3, r0
 1172 005c 9362     		str	r3, [r2, #40]
 841:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1173              		.loc 1 841 5 is_stmt 1 view .LVU372
 1174              		.loc 1 841 11 is_stmt 0 view .LVU373
 1175 005e 12E0     		b	.L60
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 40


 1176              	.LVL122:
 1177              	.L58:
 837:RTT/SEGGER_RTT.c ****   }
 1178              		.loc 1 837 5 is_stmt 1 view .LVU374
 837:RTT/SEGGER_RTT.c ****   }
 1179              		.loc 1 837 18 is_stmt 0 view .LVU375
 1180 0060 00EB4002 		add	r2, r0, r0, lsl #1
 1181 0064 2B4B     		ldr	r3, .L68
 1182 0066 03EBC202 		add	r2, r3, r2, lsl #3
 1183 006a 936A     		ldr	r3, [r2, #40]
 837:RTT/SEGGER_RTT.c ****   }
 1184              		.loc 1 837 26 view .LVU376
 1185 006c 5B1A     		subs	r3, r3, r1
 837:RTT/SEGGER_RTT.c ****   }
 1186              		.loc 1 837 53 view .LVU377
 1187 006e 126A     		ldr	r2, [r2, #32]
 837:RTT/SEGGER_RTT.c ****   }
 1188              		.loc 1 837 46 view .LVU378
 1189 0070 1344     		add	r3, r3, r2
 837:RTT/SEGGER_RTT.c ****   }
 1190              		.loc 1 837 11 view .LVU379
 1191 0072 013B     		subs	r3, r3, #1
 1192              	.LVL123:
 837:RTT/SEGGER_RTT.c ****   }
 1193              		.loc 1 837 11 view .LVU380
 1194 0074 E8E7     		b	.L57
 1195              	.LVL124:
 1196              	.L61:
 842:RTT/SEGGER_RTT.c ****       pRing->RdOff -= pRing->SizeOfBuffer;
 1197              		.loc 1 842 7 is_stmt 1 view .LVU381
 1198              		.loc 1 842 20 is_stmt 0 view .LVU382
 1199 0076 06EB4603 		add	r3, r6, r6, lsl #1
 1200 007a 264A     		ldr	r2, .L68
 1201 007c 02EBC303 		add	r3, r2, r3, lsl #3
 1202 0080 9A6A     		ldr	r2, [r3, #40]
 1203 0082 121A     		subs	r2, r2, r0
 1204 0084 9A62     		str	r2, [r3, #40]
 1205              	.L60:
 841:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1206              		.loc 1 841 11 is_stmt 1 view .LVU383
 841:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1207              		.loc 1 841 17 is_stmt 0 view .LVU384
 1208 0086 06EB4603 		add	r3, r6, r6, lsl #1
 1209 008a 224A     		ldr	r2, .L68
 1210 008c 02EBC303 		add	r3, r2, r3, lsl #3
 1211 0090 9A6A     		ldr	r2, [r3, #40]
 841:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1212              		.loc 1 841 33 view .LVU385
 1213 0092 186A     		ldr	r0, [r3, #32]
 841:RTT/SEGGER_RTT.c ****     while (pRing->RdOff >= pRing->SizeOfBuffer) {
 1214              		.loc 1 841 11 view .LVU386
 1215 0094 8242     		cmp	r2, r0
 1216 0096 EED2     		bcs	.L61
 1217              	.L59:
 843:RTT/SEGGER_RTT.c ****     }
 844:RTT/SEGGER_RTT.c ****   }
 845:RTT/SEGGER_RTT.c ****   //
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 41


 846:RTT/SEGGER_RTT.c ****   // Write all data, no need to check the RdOff, but possibly handle multiple wrap-arounds
 847:RTT/SEGGER_RTT.c ****   //
 848:RTT/SEGGER_RTT.c ****   Avail = pRing->SizeOfBuffer - pRing->WrOff;
 1218              		.loc 1 848 3 is_stmt 1 view .LVU387
 1219              		.loc 1 848 16 is_stmt 0 view .LVU388
 1220 0098 06EB4603 		add	r3, r6, r6, lsl #1
 1221 009c 1D4A     		ldr	r2, .L68
 1222 009e 02EBC303 		add	r3, r2, r3, lsl #3
 1223 00a2 1C6A     		ldr	r4, [r3, #32]
 1224              		.loc 1 848 9 view .LVU389
 1225 00a4 641A     		subs	r4, r4, r1
 1226              	.LVL125:
 1227              	.L64:
 849:RTT/SEGGER_RTT.c ****   do {
 1228              		.loc 1 849 3 is_stmt 1 view .LVU390
 850:RTT/SEGGER_RTT.c ****     if (Avail > NumBytes) {
 1229              		.loc 1 850 5 view .LVU391
 1230              		.loc 1 850 8 is_stmt 0 view .LVU392
 1231 00a6 A742     		cmp	r7, r4
 1232 00a8 1BD3     		bcc	.L67
 851:RTT/SEGGER_RTT.c ****       //
 852:RTT/SEGGER_RTT.c ****       // Last round
 853:RTT/SEGGER_RTT.c ****       //
 854:RTT/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 855:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 856:RTT/SEGGER_RTT.c ****       Avail = NumBytes;
 857:RTT/SEGGER_RTT.c ****       while (NumBytes--) {
 858:RTT/SEGGER_RTT.c ****         *pDst++ = *pData++;
 859:RTT/SEGGER_RTT.c ****       };
 860:RTT/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 861:RTT/SEGGER_RTT.c ****       pRing->WrOff += Avail;
 862:RTT/SEGGER_RTT.c **** #else
 863:RTT/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 864:RTT/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 865:RTT/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 866:RTT/SEGGER_RTT.c **** #endif
 867:RTT/SEGGER_RTT.c ****       break;
 868:RTT/SEGGER_RTT.c ****     } else {
 869:RTT/SEGGER_RTT.c ****       //
 870:RTT/SEGGER_RTT.c ****       //  Wrap-around necessary, write until wrap-around and reset WrOff
 871:RTT/SEGGER_RTT.c ****       //
 872:RTT/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1233              		.loc 1 872 7 is_stmt 1 view .LVU393
 1234              		.loc 1 872 20 is_stmt 0 view .LVU394
 1235 00aa 1A4D     		ldr	r5, .L68
 1236 00ac 731C     		adds	r3, r6, #1
 1237 00ae 03EB4303 		add	r3, r3, r3, lsl #1
 1238 00b2 05EBC303 		add	r3, r5, r3, lsl #3
 1239 00b6 5868     		ldr	r0, [r3, #4]
 1240              		.loc 1 872 37 view .LVU395
 1241 00b8 06EB4603 		add	r3, r6, r6, lsl #1
 1242 00bc 05EBC305 		add	r5, r5, r3, lsl #3
 1243 00c0 6B6A     		ldr	r3, [r5, #36]
 1244              	.LVL126:
 873:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 874:RTT/SEGGER_RTT.c ****       NumBytes -= Avail;
 875:RTT/SEGGER_RTT.c ****       while (Avail--) {
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 42


 876:RTT/SEGGER_RTT.c ****         *pDst++ = *pData++;
 877:RTT/SEGGER_RTT.c ****       };
 878:RTT/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 879:RTT/SEGGER_RTT.c ****       pRing->WrOff = 0;
 880:RTT/SEGGER_RTT.c **** #else
 881:RTT/SEGGER_RTT.c ****       SEGGER_RTT_MEMCPY((void*)pDst, pData, Avail);
 1245              		.loc 1 881 7 is_stmt 1 view .LVU396
 1246 00c2 2246     		mov	r2, r4
 1247 00c4 4146     		mov	r1, r8
 1248 00c6 1844     		add	r0, r0, r3
 1249              	.LVL127:
 1250              		.loc 1 881 7 is_stmt 0 view .LVU397
 1251 00c8 FFF7FEFF 		bl	memcpy
 1252              	.LVL128:
 882:RTT/SEGGER_RTT.c ****       pData += Avail;
 1253              		.loc 1 882 7 is_stmt 1 view .LVU398
 1254              		.loc 1 882 13 is_stmt 0 view .LVU399
 1255 00cc A044     		add	r8, r8, r4
 1256              	.LVL129:
 883:RTT/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1257              		.loc 1 883 7 is_stmt 1 view .LVU400
 1258              		.syntax unified
 1259              	@ 883 "RTT/SEGGER_RTT.c" 1
 1260 00ce BFF35F8F 		dmb
 1261              	
 1262              	@ 0 "" 2
 1263              		.loc 1 883 17 view .LVU401
 884:RTT/SEGGER_RTT.c ****       pRing->WrOff = 0;
 1264              		.loc 1 884 7 view .LVU402
 1265              		.loc 1 884 20 is_stmt 0 view .LVU403
 1266              		.thumb
 1267              		.syntax unified
 1268 00d2 0023     		movs	r3, #0
 1269 00d4 6B62     		str	r3, [r5, #36]
 885:RTT/SEGGER_RTT.c ****       NumBytes -= Avail;
 1270              		.loc 1 885 7 is_stmt 1 view .LVU404
 1271              		.loc 1 885 16 is_stmt 0 view .LVU405
 1272 00d6 3F1B     		subs	r7, r7, r4
 1273              	.LVL130:
 886:RTT/SEGGER_RTT.c **** #endif
 887:RTT/SEGGER_RTT.c ****       Avail = (pRing->SizeOfBuffer - 1);
 1274              		.loc 1 887 7 is_stmt 1 view .LVU406
 1275              		.loc 1 887 21 is_stmt 0 view .LVU407
 1276 00d8 2C6A     		ldr	r4, [r5, #32]
 1277              	.LVL131:
 1278              		.loc 1 887 13 view .LVU408
 1279 00da 013C     		subs	r4, r4, #1
 1280              	.LVL132:
 888:RTT/SEGGER_RTT.c ****     }
 889:RTT/SEGGER_RTT.c ****   } while (NumBytes);
 1281              		.loc 1 889 11 is_stmt 1 view .LVU409
 1282              		.loc 1 889 3 is_stmt 0 view .LVU410
 1283 00dc 002F     		cmp	r7, #0
 1284 00de E2D1     		bne	.L64
 1285 00e0 15E0     		b	.L55
 1286              	.L67:
 854:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 43


 1287              		.loc 1 854 7 is_stmt 1 view .LVU411
 854:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1288              		.loc 1 854 20 is_stmt 0 view .LVU412
 1289 00e2 0C4C     		ldr	r4, .L68
 1290              	.LVL133:
 854:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1291              		.loc 1 854 20 view .LVU413
 1292 00e4 731C     		adds	r3, r6, #1
 1293 00e6 03EB4303 		add	r3, r3, r3, lsl #1
 1294 00ea 04EBC303 		add	r3, r4, r3, lsl #3
 1295 00ee 5868     		ldr	r0, [r3, #4]
 854:RTT/SEGGER_RTT.c **** #if SEGGER_RTT_MEMCPY_USE_BYTELOOP
 1296              		.loc 1 854 37 view .LVU414
 1297 00f0 06EB4605 		add	r5, r6, r6, lsl #1
 1298 00f4 04EBC505 		add	r5, r4, r5, lsl #3
 1299 00f8 6B6A     		ldr	r3, [r5, #36]
 1300              	.LVL134:
 863:RTT/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1301              		.loc 1 863 7 is_stmt 1 view .LVU415
 1302 00fa 3A46     		mov	r2, r7
 1303 00fc 4146     		mov	r1, r8
 1304 00fe 1844     		add	r0, r0, r3
 1305              	.LVL135:
 863:RTT/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 1306              		.loc 1 863 7 is_stmt 0 view .LVU416
 1307 0100 FFF7FEFF 		bl	memcpy
 1308              	.LVL136:
 864:RTT/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 1309              		.loc 1 864 7 is_stmt 1 view .LVU417
 1310              		.syntax unified
 1311              	@ 864 "RTT/SEGGER_RTT.c" 1
 1312 0104 BFF35F8F 		dmb
 1313              	
 1314              	@ 0 "" 2
 864:RTT/SEGGER_RTT.c ****       pRing->WrOff += NumBytes;
 1315              		.loc 1 864 17 view .LVU418
 865:RTT/SEGGER_RTT.c **** #endif
 1316              		.loc 1 865 7 view .LVU419
 865:RTT/SEGGER_RTT.c **** #endif
 1317              		.loc 1 865 20 is_stmt 0 view .LVU420
 1318              		.thumb
 1319              		.syntax unified
 1320 0108 6B6A     		ldr	r3, [r5, #36]
 1321 010a 1F44     		add	r7, r7, r3
 1322              	.LVL137:
 865:RTT/SEGGER_RTT.c **** #endif
 1323              		.loc 1 865 20 view .LVU421
 1324 010c 6F62     		str	r7, [r5, #36]
 867:RTT/SEGGER_RTT.c ****     } else {
 1325              		.loc 1 867 7 is_stmt 1 view .LVU422
 1326              	.L55:
 890:RTT/SEGGER_RTT.c **** }
 1327              		.loc 1 890 1 is_stmt 0 view .LVU423
 1328 010e BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 1329              	.LVL138:
 1330              	.L69:
 1331              		.loc 1 890 1 view .LVU424
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 44


 1332 0112 00BF     		.align	2
 1333              	.L68:
 1334 0114 00000000 		.word	_SEGGER_RTT
 1335              		.cfi_endproc
 1336              	.LFE9:
 1338              		.section	.text.SEGGER_RTT_WriteDownBufferNoLock,"ax",%progbits
 1339              		.align	1
 1340              		.global	SEGGER_RTT_WriteDownBufferNoLock
 1341              		.syntax unified
 1342              		.thumb
 1343              		.thumb_func
 1344              		.fpu fpv4-sp-d16
 1346              	SEGGER_RTT_WriteDownBufferNoLock:
 1347              	.LVL139:
 1348              	.LFB10:
 891:RTT/SEGGER_RTT.c **** 
 892:RTT/SEGGER_RTT.c **** /*********************************************************************
 893:RTT/SEGGER_RTT.c **** *
 894:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteSkipNoLock
 895:RTT/SEGGER_RTT.c **** *
 896:RTT/SEGGER_RTT.c **** *  Function description
 897:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 898:RTT/SEGGER_RTT.c **** *    control block which is then read by the host.
 899:RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteSkipNoLock does not lock the application and
 900:RTT/SEGGER_RTT.c **** *    skips all data, if the data does not fit into the buffer.
 901:RTT/SEGGER_RTT.c **** *
 902:RTT/SEGGER_RTT.c **** *  Parameters
 903:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
 904:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 905:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 906:RTT/SEGGER_RTT.c **** *                 MUST be > 0!!!
 907:RTT/SEGGER_RTT.c **** *                 This is done for performance reasons, so no initial check has do be done.
 908:RTT/SEGGER_RTT.c **** *
 909:RTT/SEGGER_RTT.c **** *  Return value
 910:RTT/SEGGER_RTT.c **** *    1: Data has been copied
 911:RTT/SEGGER_RTT.c **** *    0: No space, data has not been copied
 912:RTT/SEGGER_RTT.c **** *
 913:RTT/SEGGER_RTT.c **** *  Notes
 914:RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, all data is dropped.
 915:RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
 916:RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
 917:RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
 918:RTT/SEGGER_RTT.c **** */
 919:RTT/SEGGER_RTT.c **** #if (RTT_USE_ASM == 0)
 920:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 921:RTT/SEGGER_RTT.c ****   const char*           pData;
 922:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 923:RTT/SEGGER_RTT.c ****   unsigned              Avail;
 924:RTT/SEGGER_RTT.c ****   unsigned              RdOff;
 925:RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 926:RTT/SEGGER_RTT.c ****   unsigned              Rem;
 927:RTT/SEGGER_RTT.c ****   volatile char*        pDst;
 928:RTT/SEGGER_RTT.c ****   //
 929:RTT/SEGGER_RTT.c ****   // Cases:
 930:RTT/SEGGER_RTT.c ****   //   1) RdOff <= WrOff => Space until wrap-around is sufficient
 931:RTT/SEGGER_RTT.c ****   //   2) RdOff <= WrOff => Space after wrap-around needed (copy in 2 chunks)
 932:RTT/SEGGER_RTT.c ****   //   3) RdOff <  WrOff => No space in buf
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 45


 933:RTT/SEGGER_RTT.c ****   //   4) RdOff >  WrOff => Space is sufficient
 934:RTT/SEGGER_RTT.c ****   //   5) RdOff >  WrOff => No space in buf
 935:RTT/SEGGER_RTT.c ****   //
 936:RTT/SEGGER_RTT.c ****   // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enou
 937:RTT/SEGGER_RTT.c ****   //
 938:RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 939:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 940:RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 941:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff;
 942:RTT/SEGGER_RTT.c ****   if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
 943:RTT/SEGGER_RTT.c ****     Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte n
 944:RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 1)?
 945:RTT/SEGGER_RTT.c **** CopyStraight:
 946:RTT/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 947:RTT/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, NumBytes);
 948:RTT/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 949:RTT/SEGGER_RTT.c ****       pRing->WrOff = WrOff + NumBytes;
 950:RTT/SEGGER_RTT.c ****       return 1;
 951:RTT/SEGGER_RTT.c ****     }
 952:RTT/SEGGER_RTT.c ****     Avail += RdOff;                                     // Space incl. wrap-around
 953:RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does
 954:RTT/SEGGER_RTT.c ****       Rem = pRing->SizeOfBuffer - WrOff;                // Space until end of buffer
 955:RTT/SEGGER_RTT.c ****       pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 956:RTT/SEGGER_RTT.c ****       memcpy((void*)pDst, pData, Rem);                  // Copy 1st chunk
 957:RTT/SEGGER_RTT.c ****       NumBytes -= Rem;
 958:RTT/SEGGER_RTT.c ****       //
 959:RTT/SEGGER_RTT.c ****       // Special case: First check that assumed RdOff == 0 calculated that last element before wrap
 960:RTT/SEGGER_RTT.c ****       // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is
 961:RTT/SEGGER_RTT.c ****       // In this case, we may use a copy straight until buffer end anyway without needing to copy 2
 962:RTT/SEGGER_RTT.c ****       // Therefore, check if 2nd memcpy is necessary at all
 963:RTT/SEGGER_RTT.c ****       //
 964:RTT/SEGGER_RTT.c ****       if (NumBytes) {
 965:RTT/SEGGER_RTT.c ****         pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 966:RTT/SEGGER_RTT.c ****         memcpy((void*)pDst, pData + Rem, NumBytes);
 967:RTT/SEGGER_RTT.c ****       }
 968:RTT/SEGGER_RTT.c ****       RTT__DMB();                     // Force data write to be complete before writing the <WrOff>
 969:RTT/SEGGER_RTT.c ****       pRing->WrOff = NumBytes;
 970:RTT/SEGGER_RTT.c ****       return 1;
 971:RTT/SEGGER_RTT.c ****     }
 972:RTT/SEGGER_RTT.c ****   } else {                                             // Potential case 4)
 973:RTT/SEGGER_RTT.c ****     Avail = RdOff - WrOff - 1u;
 974:RTT/SEGGER_RTT.c ****     if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does
 975:RTT/SEGGER_RTT.c ****       goto CopyStraight;
 976:RTT/SEGGER_RTT.c ****     }
 977:RTT/SEGGER_RTT.c ****   }
 978:RTT/SEGGER_RTT.c ****   return 0;     // No space in buffer
 979:RTT/SEGGER_RTT.c **** }
 980:RTT/SEGGER_RTT.c **** #endif
 981:RTT/SEGGER_RTT.c **** 
 982:RTT/SEGGER_RTT.c **** /*********************************************************************
 983:RTT/SEGGER_RTT.c **** *
 984:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBufferNoLock
 985:RTT/SEGGER_RTT.c **** *
 986:RTT/SEGGER_RTT.c **** *  Function description
 987:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
 988:RTT/SEGGER_RTT.c **** *    control block inside a <Down> buffer.
 989:RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteDownBufferNoLock does not lock the application.
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 46


 990:RTT/SEGGER_RTT.c **** *    Used to do the same operation that J-Link does, to transfer 
 991:RTT/SEGGER_RTT.c **** *    RTT data from other channels, such as TCP/IP or UART.
 992:RTT/SEGGER_RTT.c **** *
 993:RTT/SEGGER_RTT.c **** *  Parameters
 994:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Down"-buffer to be used.
 995:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
 996:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
 997:RTT/SEGGER_RTT.c **** *
 998:RTT/SEGGER_RTT.c **** *  Return value
 999:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
1000:RTT/SEGGER_RTT.c **** *
1001:RTT/SEGGER_RTT.c **** *  Notes
1002:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1003:RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1004:RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1005:RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1006:RTT/SEGGER_RTT.c **** *
1007:RTT/SEGGER_RTT.c **** *  Additional information
1008:RTT/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1009:RTT/SEGGER_RTT.c **** */
1010:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBufferNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBy
 1349              		.loc 1 1010 105 is_stmt 1 view -0
 1350              		.cfi_startproc
 1351              		@ args = 0, pretend = 0, frame = 0
 1352              		@ frame_needed = 0, uses_anonymous_args = 0
 1353              		.loc 1 1010 105 is_stmt 0 view .LVU426
 1354 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1355              	.LCFI10:
 1356              		.cfi_def_cfa_offset 24
 1357              		.cfi_offset 3, -24
 1358              		.cfi_offset 4, -20
 1359              		.cfi_offset 5, -16
 1360              		.cfi_offset 6, -12
 1361              		.cfi_offset 7, -8
 1362              		.cfi_offset 14, -4
 1363 0002 0F46     		mov	r7, r1
 1364 0004 1646     		mov	r6, r2
1011:RTT/SEGGER_RTT.c ****   unsigned                Status;
 1365              		.loc 1 1011 3 is_stmt 1 view .LVU427
1012:RTT/SEGGER_RTT.c ****   unsigned                Avail;
 1366              		.loc 1 1012 3 view .LVU428
1013:RTT/SEGGER_RTT.c ****   const char*             pData;
 1367              		.loc 1 1013 3 view .LVU429
1014:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP*   pRing;
 1368              		.loc 1 1014 3 view .LVU430
1015:RTT/SEGGER_RTT.c ****   //
1016:RTT/SEGGER_RTT.c ****   // Get "to-target" ring buffer.
1017:RTT/SEGGER_RTT.c ****   // It is save to cast that to a "to-host" buffer. Up and Down buffer differ in volatility of offs
1018:RTT/SEGGER_RTT.c ****   //
1019:RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1369              		.loc 1 1019 3 view .LVU431
 1370              	.LVL140:
1020:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF)
 1371              		.loc 1 1020 3 view .LVU432
 1372              		.loc 1 1020 9 is_stmt 0 view .LVU433
 1373 0006 00EB4000 		add	r0, r0, r0, lsl #1
 1374              	.LVL141:
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 47


 1375              		.loc 1 1020 9 view .LVU434
 1376 000a C400     		lsls	r4, r0, #3
 1377 000c 6034     		adds	r4, r4, #96
 1378 000e 144B     		ldr	r3, .L77
 1379 0010 1C44     		add	r4, r4, r3
 1380              	.LVL142:
1021:RTT/SEGGER_RTT.c ****   //
1022:RTT/SEGGER_RTT.c ****   // How we output depends upon the mode...
1023:RTT/SEGGER_RTT.c ****   //
1024:RTT/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1381              		.loc 1 1024 3 is_stmt 1 view .LVU435
 1382              		.loc 1 1024 16 is_stmt 0 view .LVU436
 1383 0012 6569     		ldr	r5, [r4, #20]
 1384              		.loc 1 1024 3 view .LVU437
 1385 0014 012D     		cmp	r5, #1
 1386 0016 11D0     		beq	.L71
 1387 0018 022D     		cmp	r5, #2
 1388 001a 1CD0     		beq	.L72
 1389 001c 15B1     		cbz	r5, .L76
 1390 001e 0025     		movs	r5, #0
 1391              	.LVL143:
1025:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1026:RTT/SEGGER_RTT.c ****     //
1027:RTT/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1028:RTT/SEGGER_RTT.c ****     // of this output, don't bother.
1029:RTT/SEGGER_RTT.c ****     //
1030:RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1031:RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
1032:RTT/SEGGER_RTT.c ****       Status = 0u;
1033:RTT/SEGGER_RTT.c ****     } else {
1034:RTT/SEGGER_RTT.c ****       Status = NumBytes;
1035:RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1036:RTT/SEGGER_RTT.c ****     }
1037:RTT/SEGGER_RTT.c ****     break;
1038:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1039:RTT/SEGGER_RTT.c ****     //
1040:RTT/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1041:RTT/SEGGER_RTT.c ****     //
1042:RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1043:RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
1044:RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
1045:RTT/SEGGER_RTT.c ****     break;
1046:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1047:RTT/SEGGER_RTT.c ****     //
1048:RTT/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1049:RTT/SEGGER_RTT.c ****     //
1050:RTT/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
1051:RTT/SEGGER_RTT.c ****     break;
1052:RTT/SEGGER_RTT.c ****   default:
1053:RTT/SEGGER_RTT.c ****     Status = 0u;
1054:RTT/SEGGER_RTT.c ****     break;
1055:RTT/SEGGER_RTT.c ****   }
1056:RTT/SEGGER_RTT.c ****   //
1057:RTT/SEGGER_RTT.c ****   // Finish up.
1058:RTT/SEGGER_RTT.c ****   //
1059:RTT/SEGGER_RTT.c ****   return Status;
 1392              		.loc 1 1059 3 is_stmt 1 view .LVU438
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 48


 1393              	.L70:
1060:RTT/SEGGER_RTT.c **** }
 1394              		.loc 1 1060 1 is_stmt 0 view .LVU439
 1395 0020 2846     		mov	r0, r5
 1396 0022 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1397              	.LVL144:
 1398              	.L76:
1030:RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1399              		.loc 1 1030 5 is_stmt 1 view .LVU440
1030:RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1400              		.loc 1 1030 13 is_stmt 0 view .LVU441
 1401 0024 2046     		mov	r0, r4
 1402 0026 FFF7FEFF 		bl	_GetAvailWriteSpace
 1403              	.LVL145:
1031:RTT/SEGGER_RTT.c ****       Status = 0u;
 1404              		.loc 1 1031 5 is_stmt 1 view .LVU442
1031:RTT/SEGGER_RTT.c ****       Status = 0u;
 1405              		.loc 1 1031 8 is_stmt 0 view .LVU443
 1406 002a 8642     		cmp	r6, r0
 1407 002c F8D8     		bhi	.L70
1034:RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1408              		.loc 1 1034 7 is_stmt 1 view .LVU444
 1409              	.LVL146:
1035:RTT/SEGGER_RTT.c ****     }
 1410              		.loc 1 1035 7 view .LVU445
 1411 002e 3246     		mov	r2, r6
 1412 0030 3946     		mov	r1, r7
 1413 0032 2046     		mov	r0, r4
 1414              	.LVL147:
1035:RTT/SEGGER_RTT.c ****     }
 1415              		.loc 1 1035 7 is_stmt 0 view .LVU446
 1416 0034 FFF7FEFF 		bl	_WriteNoCheck
 1417              	.LVL148:
1034:RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1418              		.loc 1 1034 14 view .LVU447
 1419 0038 3546     		mov	r5, r6
 1420 003a F1E7     		b	.L70
 1421              	.LVL149:
 1422              	.L71:
1042:RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1423              		.loc 1 1042 5 is_stmt 1 view .LVU448
1042:RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1424              		.loc 1 1042 13 is_stmt 0 view .LVU449
 1425 003c 2046     		mov	r0, r4
 1426 003e FFF7FEFF 		bl	_GetAvailWriteSpace
 1427              	.LVL150:
1043:RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1428              		.loc 1 1043 5 is_stmt 1 view .LVU450
1043:RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1429              		.loc 1 1043 12 is_stmt 0 view .LVU451
 1430 0042 3546     		mov	r5, r6
 1431 0044 8642     		cmp	r6, r0
 1432 0046 28BF     		it	cs
 1433 0048 0546     		movcs	r5, r0
 1434              	.LVL151:
1044:RTT/SEGGER_RTT.c ****     break;
 1435              		.loc 1 1044 5 is_stmt 1 view .LVU452
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 49


 1436 004a 2A46     		mov	r2, r5
 1437 004c 3946     		mov	r1, r7
 1438 004e 2046     		mov	r0, r4
 1439              	.LVL152:
1044:RTT/SEGGER_RTT.c ****     break;
 1440              		.loc 1 1044 5 is_stmt 0 view .LVU453
 1441 0050 FFF7FEFF 		bl	_WriteNoCheck
 1442              	.LVL153:
1045:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 1443              		.loc 1 1045 5 is_stmt 1 view .LVU454
 1444 0054 E4E7     		b	.L70
 1445              	.LVL154:
 1446              	.L72:
1050:RTT/SEGGER_RTT.c ****     break;
 1447              		.loc 1 1050 5 view .LVU455
1050:RTT/SEGGER_RTT.c ****     break;
 1448              		.loc 1 1050 14 is_stmt 0 view .LVU456
 1449 0056 2046     		mov	r0, r4
 1450 0058 FFF7FEFF 		bl	_WriteBlocking
 1451              	.LVL155:
1050:RTT/SEGGER_RTT.c ****     break;
 1452              		.loc 1 1050 14 view .LVU457
 1453 005c 0546     		mov	r5, r0
 1454              	.LVL156:
1051:RTT/SEGGER_RTT.c ****   default:
 1455              		.loc 1 1051 5 is_stmt 1 view .LVU458
 1456 005e DFE7     		b	.L70
 1457              	.L78:
 1458              		.align	2
 1459              	.L77:
 1460 0060 00000000 		.word	_SEGGER_RTT
 1461              		.cfi_endproc
 1462              	.LFE10:
 1464              		.section	.text.SEGGER_RTT_WriteNoLock,"ax",%progbits
 1465              		.align	1
 1466              		.global	SEGGER_RTT_WriteNoLock
 1467              		.syntax unified
 1468              		.thumb
 1469              		.thumb_func
 1470              		.fpu fpv4-sp-d16
 1472              	SEGGER_RTT_WriteNoLock:
 1473              	.LVL157:
 1474              	.LFB11:
1061:RTT/SEGGER_RTT.c **** 
1062:RTT/SEGGER_RTT.c **** /*********************************************************************
1063:RTT/SEGGER_RTT.c **** *
1064:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteNoLock
1065:RTT/SEGGER_RTT.c **** *
1066:RTT/SEGGER_RTT.c **** *  Function description
1067:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1068:RTT/SEGGER_RTT.c **** *    control block which is then read by the host.
1069:RTT/SEGGER_RTT.c **** *    SEGGER_RTT_WriteNoLock does not lock the application.
1070:RTT/SEGGER_RTT.c **** *
1071:RTT/SEGGER_RTT.c **** *  Parameters
1072:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1073:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1074:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 50


1075:RTT/SEGGER_RTT.c **** *
1076:RTT/SEGGER_RTT.c **** *  Return value
1077:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1078:RTT/SEGGER_RTT.c **** *
1079:RTT/SEGGER_RTT.c **** *  Notes
1080:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1081:RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1082:RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1083:RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1084:RTT/SEGGER_RTT.c **** */
1085:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1475              		.loc 1 1085 95 view -0
 1476              		.cfi_startproc
 1477              		@ args = 0, pretend = 0, frame = 0
 1478              		@ frame_needed = 0, uses_anonymous_args = 0
 1479              		.loc 1 1085 95 is_stmt 0 view .LVU460
 1480 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1481              	.LCFI11:
 1482              		.cfi_def_cfa_offset 24
 1483              		.cfi_offset 3, -24
 1484              		.cfi_offset 4, -20
 1485              		.cfi_offset 5, -16
 1486              		.cfi_offset 6, -12
 1487              		.cfi_offset 7, -8
 1488              		.cfi_offset 14, -4
 1489 0002 0F46     		mov	r7, r1
 1490 0004 1646     		mov	r6, r2
1086:RTT/SEGGER_RTT.c ****   unsigned              Status;
 1491              		.loc 1 1086 3 is_stmt 1 view .LVU461
1087:RTT/SEGGER_RTT.c ****   unsigned              Avail;
 1492              		.loc 1 1087 3 view .LVU462
1088:RTT/SEGGER_RTT.c ****   const char*           pData;
 1493              		.loc 1 1088 3 view .LVU463
1089:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1494              		.loc 1 1089 3 view .LVU464
1090:RTT/SEGGER_RTT.c ****   //
1091:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1092:RTT/SEGGER_RTT.c ****   //
1093:RTT/SEGGER_RTT.c ****   pData = (const char *)pBuffer;
 1495              		.loc 1 1093 3 view .LVU465
 1496              	.LVL158:
1094:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1497              		.loc 1 1094 3 view .LVU466
 1498              		.loc 1 1094 9 is_stmt 0 view .LVU467
 1499 0006 451C     		adds	r5, r0, #1
 1500 0008 05EB4505 		add	r5, r5, r5, lsl #1
 1501 000c 164B     		ldr	r3, .L86
 1502 000e 03EBC505 		add	r5, r3, r5, lsl #3
 1503              	.LVL159:
1095:RTT/SEGGER_RTT.c ****   //
1096:RTT/SEGGER_RTT.c ****   // How we output depends upon the mode...
1097:RTT/SEGGER_RTT.c ****   //
1098:RTT/SEGGER_RTT.c ****   switch (pRing->Flags) {
 1504              		.loc 1 1098 3 is_stmt 1 view .LVU468
 1505              		.loc 1 1098 16 is_stmt 0 view .LVU469
 1506 0012 00EB4000 		add	r0, r0, r0, lsl #1
 1507              	.LVL160:
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 51


 1508              		.loc 1 1098 16 view .LVU470
 1509 0016 03EBC000 		add	r0, r3, r0, lsl #3
 1510 001a C46A     		ldr	r4, [r0, #44]
 1511              		.loc 1 1098 3 view .LVU471
 1512 001c 012C     		cmp	r4, #1
 1513 001e 11D0     		beq	.L80
 1514 0020 022C     		cmp	r4, #2
 1515 0022 1CD0     		beq	.L81
 1516 0024 14B1     		cbz	r4, .L85
 1517 0026 0024     		movs	r4, #0
 1518              	.LVL161:
1099:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1100:RTT/SEGGER_RTT.c ****     //
1101:RTT/SEGGER_RTT.c ****     // If we are in skip mode and there is no space for the whole
1102:RTT/SEGGER_RTT.c ****     // of this output, don't bother.
1103:RTT/SEGGER_RTT.c ****     //
1104:RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1105:RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
1106:RTT/SEGGER_RTT.c ****       Status = 0u;
1107:RTT/SEGGER_RTT.c ****     } else {
1108:RTT/SEGGER_RTT.c ****       Status = NumBytes;
1109:RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
1110:RTT/SEGGER_RTT.c ****     }
1111:RTT/SEGGER_RTT.c ****     break;
1112:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1113:RTT/SEGGER_RTT.c ****     //
1114:RTT/SEGGER_RTT.c ****     // If we are in trim mode, trim to what we can output without blocking.
1115:RTT/SEGGER_RTT.c ****     //
1116:RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
1117:RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
1118:RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
1119:RTT/SEGGER_RTT.c ****     break;
1120:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
1121:RTT/SEGGER_RTT.c ****     //
1122:RTT/SEGGER_RTT.c ****     // If we are in blocking mode, output everything.
1123:RTT/SEGGER_RTT.c ****     //
1124:RTT/SEGGER_RTT.c ****     Status = _WriteBlocking(pRing, pData, NumBytes);
1125:RTT/SEGGER_RTT.c ****     break;
1126:RTT/SEGGER_RTT.c ****   default:
1127:RTT/SEGGER_RTT.c ****     Status = 0u;
1128:RTT/SEGGER_RTT.c ****     break;
1129:RTT/SEGGER_RTT.c ****   }
1130:RTT/SEGGER_RTT.c ****   //
1131:RTT/SEGGER_RTT.c ****   // Finish up.
1132:RTT/SEGGER_RTT.c ****   //
1133:RTT/SEGGER_RTT.c ****   return Status;
 1519              		.loc 1 1133 3 is_stmt 1 view .LVU472
 1520              	.L79:
1134:RTT/SEGGER_RTT.c **** }
 1521              		.loc 1 1134 1 is_stmt 0 view .LVU473
 1522 0028 2046     		mov	r0, r4
 1523 002a F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1524              	.LVL162:
 1525              	.L85:
1104:RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
 1526              		.loc 1 1104 5 is_stmt 1 view .LVU474
1104:RTT/SEGGER_RTT.c ****     if (Avail < NumBytes) {
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 52


 1527              		.loc 1 1104 13 is_stmt 0 view .LVU475
 1528 002c 2846     		mov	r0, r5
 1529 002e FFF7FEFF 		bl	_GetAvailWriteSpace
 1530              	.LVL163:
1105:RTT/SEGGER_RTT.c ****       Status = 0u;
 1531              		.loc 1 1105 5 is_stmt 1 view .LVU476
1105:RTT/SEGGER_RTT.c ****       Status = 0u;
 1532              		.loc 1 1105 8 is_stmt 0 view .LVU477
 1533 0032 8642     		cmp	r6, r0
 1534 0034 F8D8     		bhi	.L79
1108:RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1535              		.loc 1 1108 7 is_stmt 1 view .LVU478
 1536              	.LVL164:
1109:RTT/SEGGER_RTT.c ****     }
 1537              		.loc 1 1109 7 view .LVU479
 1538 0036 3246     		mov	r2, r6
 1539 0038 3946     		mov	r1, r7
 1540 003a 2846     		mov	r0, r5
 1541              	.LVL165:
1109:RTT/SEGGER_RTT.c ****     }
 1542              		.loc 1 1109 7 is_stmt 0 view .LVU480
 1543 003c FFF7FEFF 		bl	_WriteNoCheck
 1544              	.LVL166:
1108:RTT/SEGGER_RTT.c ****       _WriteNoCheck(pRing, pData, NumBytes);
 1545              		.loc 1 1108 14 view .LVU481
 1546 0040 3446     		mov	r4, r6
 1547 0042 F1E7     		b	.L79
 1548              	.LVL167:
 1549              	.L80:
1116:RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1550              		.loc 1 1116 5 is_stmt 1 view .LVU482
1116:RTT/SEGGER_RTT.c ****     Status = Avail < NumBytes ? Avail : NumBytes;
 1551              		.loc 1 1116 13 is_stmt 0 view .LVU483
 1552 0044 2846     		mov	r0, r5
 1553 0046 FFF7FEFF 		bl	_GetAvailWriteSpace
 1554              	.LVL168:
1117:RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1555              		.loc 1 1117 5 is_stmt 1 view .LVU484
1117:RTT/SEGGER_RTT.c ****     _WriteNoCheck(pRing, pData, Status);
 1556              		.loc 1 1117 12 is_stmt 0 view .LVU485
 1557 004a 3446     		mov	r4, r6
 1558 004c 8642     		cmp	r6, r0
 1559 004e 28BF     		it	cs
 1560 0050 0446     		movcs	r4, r0
 1561              	.LVL169:
1118:RTT/SEGGER_RTT.c ****     break;
 1562              		.loc 1 1118 5 is_stmt 1 view .LVU486
 1563 0052 2246     		mov	r2, r4
 1564 0054 3946     		mov	r1, r7
 1565 0056 2846     		mov	r0, r5
 1566              	.LVL170:
1118:RTT/SEGGER_RTT.c ****     break;
 1567              		.loc 1 1118 5 is_stmt 0 view .LVU487
 1568 0058 FFF7FEFF 		bl	_WriteNoCheck
 1569              	.LVL171:
1119:RTT/SEGGER_RTT.c ****   case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
 1570              		.loc 1 1119 5 is_stmt 1 view .LVU488
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 53


 1571 005c E4E7     		b	.L79
 1572              	.LVL172:
 1573              	.L81:
1124:RTT/SEGGER_RTT.c ****     break;
 1574              		.loc 1 1124 5 view .LVU489
1124:RTT/SEGGER_RTT.c ****     break;
 1575              		.loc 1 1124 14 is_stmt 0 view .LVU490
 1576 005e 2846     		mov	r0, r5
 1577 0060 FFF7FEFF 		bl	_WriteBlocking
 1578              	.LVL173:
1124:RTT/SEGGER_RTT.c ****     break;
 1579              		.loc 1 1124 14 view .LVU491
 1580 0064 0446     		mov	r4, r0
 1581              	.LVL174:
1125:RTT/SEGGER_RTT.c ****   default:
 1582              		.loc 1 1125 5 is_stmt 1 view .LVU492
 1583 0066 DFE7     		b	.L79
 1584              	.L87:
 1585              		.align	2
 1586              	.L86:
 1587 0068 00000000 		.word	_SEGGER_RTT
 1588              		.cfi_endproc
 1589              	.LFE11:
 1591              		.section	.text.SEGGER_RTT_WriteDownBuffer,"ax",%progbits
 1592              		.align	1
 1593              		.global	SEGGER_RTT_WriteDownBuffer
 1594              		.syntax unified
 1595              		.thumb
 1596              		.thumb_func
 1597              		.fpu fpv4-sp-d16
 1599              	SEGGER_RTT_WriteDownBuffer:
 1600              	.LVL175:
 1601              	.LFB12:
1135:RTT/SEGGER_RTT.c **** 
1136:RTT/SEGGER_RTT.c **** /*********************************************************************
1137:RTT/SEGGER_RTT.c **** *
1138:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteDownBuffer
1139:RTT/SEGGER_RTT.c **** *
1140:RTT/SEGGER_RTT.c **** *  Function description
1141:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT control block in a <Down> buffer.
1142:RTT/SEGGER_RTT.c **** *
1143:RTT/SEGGER_RTT.c **** *  Parameters
1144:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1145:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1146:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1147:RTT/SEGGER_RTT.c **** *
1148:RTT/SEGGER_RTT.c **** *  Return value
1149:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Down"-buffer.
1150:RTT/SEGGER_RTT.c **** *
1151:RTT/SEGGER_RTT.c **** *  Notes
1152:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1153:RTT/SEGGER_RTT.c **** *
1154:RTT/SEGGER_RTT.c **** *  Additional information
1155:RTT/SEGGER_RTT.c **** *    This function must not be called when J-Link might also do RTT.
1156:RTT/SEGGER_RTT.c **** *    This function locks against all other RTT operations. I.e. during
1157:RTT/SEGGER_RTT.c **** *    the write operation, writing from the application is also locked.
1158:RTT/SEGGER_RTT.c **** *    If only one consumer writes to the down buffer, 
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 54


1159:RTT/SEGGER_RTT.c **** *    call SEGGER_RTT_WriteDownBufferNoLock() instead.
1160:RTT/SEGGER_RTT.c **** */
1161:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteDownBuffer(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1602              		.loc 1 1161 99 view -0
 1603              		.cfi_startproc
 1604              		@ args = 0, pretend = 0, frame = 0
 1605              		@ frame_needed = 0, uses_anonymous_args = 0
 1606              		.loc 1 1161 99 is_stmt 0 view .LVU494
 1607 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1608              	.LCFI12:
 1609              		.cfi_def_cfa_offset 24
 1610              		.cfi_offset 3, -24
 1611              		.cfi_offset 4, -20
 1612              		.cfi_offset 5, -16
 1613              		.cfi_offset 6, -12
 1614              		.cfi_offset 7, -8
 1615              		.cfi_offset 14, -4
 1616 0002 0446     		mov	r4, r0
 1617 0004 0D46     		mov	r5, r1
 1618 0006 1646     		mov	r6, r2
1162:RTT/SEGGER_RTT.c ****   unsigned Status;
 1619              		.loc 1 1162 3 is_stmt 1 view .LVU495
 1620              	.LBB8:
1163:RTT/SEGGER_RTT.c **** 
1164:RTT/SEGGER_RTT.c ****   INIT();
 1621              		.loc 1 1164 3 view .LVU496
 1622              		.loc 1 1164 3 view .LVU497
 1623              	.LVL176:
 1624              		.loc 1 1164 3 view .LVU498
 1625              		.loc 1 1164 3 view .LVU499
 1626 0008 094B     		ldr	r3, .L92
 1627 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1628 000c 6BB1     		cbz	r3, .L91
 1629              	.LVL177:
 1630              	.L89:
 1631              		.loc 1 1164 3 discriminator 3 view .LVU500
 1632              	.LBE8:
 1633              		.loc 1 1164 9 discriminator 3 view .LVU501
 1634              	.LBB9:
1165:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1635              		.loc 1 1165 3 discriminator 3 view .LVU502
 1636              		.loc 1 1165 3 discriminator 3 view .LVU503
 1637              		.syntax unified
 1638              	@ 1165 "RTT/SEGGER_RTT.c" 1
 1639 000e EFF31187 		mrs   r7, basepri  
 1640 0012 4FF02001 		mov   r1, #32       
 1641 0016 81F31188 		msr   basepri, r1  
 1642              		
 1643              	@ 0 "" 2
 1644              	.LVL178:
 1645              		.loc 1 1165 20 discriminator 3 view .LVU504
1166:RTT/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteDownBufferNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locki
 1646              		.loc 1 1166 3 discriminator 3 view .LVU505
 1647              		.loc 1 1166 12 is_stmt 0 discriminator 3 view .LVU506
 1648              		.thumb
 1649              		.syntax unified
 1650 001a 3246     		mov	r2, r6
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 55


 1651 001c 2946     		mov	r1, r5
 1652 001e 2046     		mov	r0, r4
 1653 0020 FFF7FEFF 		bl	SEGGER_RTT_WriteDownBufferNoLock
 1654              	.LVL179:
1167:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1655              		.loc 1 1167 3 is_stmt 1 discriminator 3 view .LVU507
 1656              		.syntax unified
 1657              	@ 1167 "RTT/SEGGER_RTT.c" 1
 1658 0024 87F31188 		msr   basepri, r7  
 1659              		
 1660              	@ 0 "" 2
 1661              		.thumb
 1662              		.syntax unified
 1663              	.LBE9:
 1664              		.loc 1 1167 22 discriminator 3 view .LVU508
1168:RTT/SEGGER_RTT.c ****   return Status;
 1665              		.loc 1 1168 3 discriminator 3 view .LVU509
1169:RTT/SEGGER_RTT.c **** }
 1666              		.loc 1 1169 1 is_stmt 0 discriminator 3 view .LVU510
 1667 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1668              	.LVL180:
 1669              	.L91:
 1670              	.LBB10:
1164:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1671              		.loc 1 1164 3 is_stmt 1 discriminator 1 view .LVU511
 1672 002a FFF7FEFF 		bl	_DoInit
 1673              	.LVL181:
1164:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1674              		.loc 1 1164 3 is_stmt 0 discriminator 1 view .LVU512
 1675 002e EEE7     		b	.L89
 1676              	.L93:
 1677              		.align	2
 1678              	.L92:
 1679 0030 00000000 		.word	_SEGGER_RTT
 1680              	.LBE10:
 1681              		.cfi_endproc
 1682              	.LFE12:
 1684              		.section	.text.SEGGER_RTT_Write,"ax",%progbits
 1685              		.align	1
 1686              		.global	SEGGER_RTT_Write
 1687              		.syntax unified
 1688              		.thumb
 1689              		.thumb_func
 1690              		.fpu fpv4-sp-d16
 1692              	SEGGER_RTT_Write:
 1693              	.LVL182:
 1694              	.LFB13:
1170:RTT/SEGGER_RTT.c **** 
1171:RTT/SEGGER_RTT.c **** /*********************************************************************
1172:RTT/SEGGER_RTT.c **** *
1173:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_Write
1174:RTT/SEGGER_RTT.c **** *
1175:RTT/SEGGER_RTT.c **** *  Function description
1176:RTT/SEGGER_RTT.c **** *    Stores a specified number of characters in SEGGER RTT
1177:RTT/SEGGER_RTT.c **** *    control block which is then read by the host.
1178:RTT/SEGGER_RTT.c **** *
1179:RTT/SEGGER_RTT.c **** *  Parameters
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 56


1180:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1181:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to character array. Does not need to point to a \0 terminated string.
1182:RTT/SEGGER_RTT.c **** *    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
1183:RTT/SEGGER_RTT.c **** *
1184:RTT/SEGGER_RTT.c **** *  Return value
1185:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1186:RTT/SEGGER_RTT.c **** *
1187:RTT/SEGGER_RTT.c **** *  Notes
1188:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1189:RTT/SEGGER_RTT.c **** */
1190:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 1695              		.loc 1 1190 89 is_stmt 1 view -0
 1696              		.cfi_startproc
 1697              		@ args = 0, pretend = 0, frame = 0
 1698              		@ frame_needed = 0, uses_anonymous_args = 0
 1699              		.loc 1 1190 89 is_stmt 0 view .LVU514
 1700 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1701              	.LCFI13:
 1702              		.cfi_def_cfa_offset 24
 1703              		.cfi_offset 3, -24
 1704              		.cfi_offset 4, -20
 1705              		.cfi_offset 5, -16
 1706              		.cfi_offset 6, -12
 1707              		.cfi_offset 7, -8
 1708              		.cfi_offset 14, -4
 1709 0002 0446     		mov	r4, r0
 1710 0004 0D46     		mov	r5, r1
 1711 0006 1646     		mov	r6, r2
1191:RTT/SEGGER_RTT.c ****   unsigned Status;
 1712              		.loc 1 1191 3 is_stmt 1 view .LVU515
 1713              	.LBB11:
1192:RTT/SEGGER_RTT.c **** 
1193:RTT/SEGGER_RTT.c ****   INIT();
 1714              		.loc 1 1193 3 view .LVU516
 1715              		.loc 1 1193 3 view .LVU517
 1716              	.LVL183:
 1717              		.loc 1 1193 3 view .LVU518
 1718              		.loc 1 1193 3 view .LVU519
 1719 0008 094B     		ldr	r3, .L98
 1720 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1721 000c 6BB1     		cbz	r3, .L97
 1722              	.LVL184:
 1723              	.L95:
 1724              		.loc 1 1193 3 discriminator 3 view .LVU520
 1725              	.LBE11:
 1726              		.loc 1 1193 9 discriminator 3 view .LVU521
 1727              	.LBB12:
1194:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1728              		.loc 1 1194 3 discriminator 3 view .LVU522
 1729              		.loc 1 1194 3 discriminator 3 view .LVU523
 1730              		.syntax unified
 1731              	@ 1194 "RTT/SEGGER_RTT.c" 1
 1732 000e EFF31187 		mrs   r7, basepri  
 1733 0012 4FF02001 		mov   r1, #32       
 1734 0016 81F31188 		msr   basepri, r1  
 1735              		
 1736              	@ 0 "" 2
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 57


 1737              	.LVL185:
 1738              		.loc 1 1194 20 discriminator 3 view .LVU524
1195:RTT/SEGGER_RTT.c ****   Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write f
 1739              		.loc 1 1195 3 discriminator 3 view .LVU525
 1740              		.loc 1 1195 12 is_stmt 0 discriminator 3 view .LVU526
 1741              		.thumb
 1742              		.syntax unified
 1743 001a 3246     		mov	r2, r6
 1744 001c 2946     		mov	r1, r5
 1745 001e 2046     		mov	r0, r4
 1746 0020 FFF7FEFF 		bl	SEGGER_RTT_WriteNoLock
 1747              	.LVL186:
1196:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 1748              		.loc 1 1196 3 is_stmt 1 discriminator 3 view .LVU527
 1749              		.syntax unified
 1750              	@ 1196 "RTT/SEGGER_RTT.c" 1
 1751 0024 87F31188 		msr   basepri, r7  
 1752              		
 1753              	@ 0 "" 2
 1754              		.thumb
 1755              		.syntax unified
 1756              	.LBE12:
 1757              		.loc 1 1196 22 discriminator 3 view .LVU528
1197:RTT/SEGGER_RTT.c ****   return Status;
 1758              		.loc 1 1197 3 discriminator 3 view .LVU529
1198:RTT/SEGGER_RTT.c **** }
 1759              		.loc 1 1198 1 is_stmt 0 discriminator 3 view .LVU530
 1760 0028 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1761              	.LVL187:
 1762              	.L97:
 1763              	.LBB13:
1193:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1764              		.loc 1 1193 3 is_stmt 1 discriminator 1 view .LVU531
 1765 002a FFF7FEFF 		bl	_DoInit
 1766              	.LVL188:
1193:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1767              		.loc 1 1193 3 is_stmt 0 discriminator 1 view .LVU532
 1768 002e EEE7     		b	.L95
 1769              	.L99:
 1770              		.align	2
 1771              	.L98:
 1772 0030 00000000 		.word	_SEGGER_RTT
 1773              	.LBE13:
 1774              		.cfi_endproc
 1775              	.LFE13:
 1777              		.section	.text.SEGGER_RTT_WriteString,"ax",%progbits
 1778              		.align	1
 1779              		.global	SEGGER_RTT_WriteString
 1780              		.syntax unified
 1781              		.thumb
 1782              		.thumb_func
 1783              		.fpu fpv4-sp-d16
 1785              	SEGGER_RTT_WriteString:
 1786              	.LVL189:
 1787              	.LFB14:
1199:RTT/SEGGER_RTT.c **** 
1200:RTT/SEGGER_RTT.c **** /*********************************************************************
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 58


1201:RTT/SEGGER_RTT.c **** *
1202:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WriteString
1203:RTT/SEGGER_RTT.c **** *
1204:RTT/SEGGER_RTT.c **** *  Function description
1205:RTT/SEGGER_RTT.c **** *    Stores string in SEGGER RTT control block.
1206:RTT/SEGGER_RTT.c **** *    This data is read by the host.
1207:RTT/SEGGER_RTT.c **** *
1208:RTT/SEGGER_RTT.c **** *  Parameters
1209:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1210:RTT/SEGGER_RTT.c **** *    s            Pointer to string.
1211:RTT/SEGGER_RTT.c **** *
1212:RTT/SEGGER_RTT.c **** *  Return value
1213:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1214:RTT/SEGGER_RTT.c **** *
1215:RTT/SEGGER_RTT.c **** *  Notes
1216:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1217:RTT/SEGGER_RTT.c **** *    (2) String passed to this function has to be \0 terminated
1218:RTT/SEGGER_RTT.c **** *    (3) \0 termination character is *not* stored in RTT buffer
1219:RTT/SEGGER_RTT.c **** */
1220:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_WriteString(unsigned BufferIndex, const char* s) {
 1788              		.loc 1 1220 70 is_stmt 1 view -0
 1789              		.cfi_startproc
 1790              		@ args = 0, pretend = 0, frame = 0
 1791              		@ frame_needed = 0, uses_anonymous_args = 0
 1792              		.loc 1 1220 70 is_stmt 0 view .LVU534
 1793 0000 38B5     		push	{r3, r4, r5, lr}
 1794              	.LCFI14:
 1795              		.cfi_def_cfa_offset 16
 1796              		.cfi_offset 3, -16
 1797              		.cfi_offset 4, -12
 1798              		.cfi_offset 5, -8
 1799              		.cfi_offset 14, -4
 1800 0002 0546     		mov	r5, r0
 1801 0004 0C46     		mov	r4, r1
1221:RTT/SEGGER_RTT.c ****   unsigned Len;
 1802              		.loc 1 1221 3 is_stmt 1 view .LVU535
1222:RTT/SEGGER_RTT.c **** 
1223:RTT/SEGGER_RTT.c ****   Len = STRLEN(s);
 1803              		.loc 1 1223 3 view .LVU536
 1804              		.loc 1 1223 9 is_stmt 0 view .LVU537
 1805 0006 0846     		mov	r0, r1
 1806              	.LVL190:
 1807              		.loc 1 1223 9 view .LVU538
 1808 0008 FFF7FEFF 		bl	strlen
 1809              	.LVL191:
 1810              		.loc 1 1223 9 view .LVU539
 1811 000c 0246     		mov	r2, r0
 1812              	.LVL192:
1224:RTT/SEGGER_RTT.c ****   return SEGGER_RTT_Write(BufferIndex, s, Len);
 1813              		.loc 1 1224 3 is_stmt 1 view .LVU540
 1814              		.loc 1 1224 10 is_stmt 0 view .LVU541
 1815 000e 2146     		mov	r1, r4
 1816 0010 2846     		mov	r0, r5
 1817              	.LVL193:
 1818              		.loc 1 1224 10 view .LVU542
 1819 0012 FFF7FEFF 		bl	SEGGER_RTT_Write
 1820              	.LVL194:
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 59


1225:RTT/SEGGER_RTT.c **** }
 1821              		.loc 1 1225 1 view .LVU543
 1822 0016 38BD     		pop	{r3, r4, r5, pc}
 1823              		.loc 1 1225 1 view .LVU544
 1824              		.cfi_endproc
 1825              	.LFE14:
 1827              		.section	.text.SEGGER_RTT_PutCharSkipNoLock,"ax",%progbits
 1828              		.align	1
 1829              		.global	SEGGER_RTT_PutCharSkipNoLock
 1830              		.syntax unified
 1831              		.thumb
 1832              		.thumb_func
 1833              		.fpu fpv4-sp-d16
 1835              	SEGGER_RTT_PutCharSkipNoLock:
 1836              	.LVL195:
 1837              	.LFB15:
1226:RTT/SEGGER_RTT.c **** 
1227:RTT/SEGGER_RTT.c **** /*********************************************************************
1228:RTT/SEGGER_RTT.c **** *
1229:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkipNoLock
1230:RTT/SEGGER_RTT.c **** *
1231:RTT/SEGGER_RTT.c **** *  Function description
1232:RTT/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1233:RTT/SEGGER_RTT.c **** *    SEGGER_RTT_PutCharSkipNoLock does not lock the application and
1234:RTT/SEGGER_RTT.c **** *    skips the byte, if it does not fit into the buffer.
1235:RTT/SEGGER_RTT.c **** *
1236:RTT/SEGGER_RTT.c **** *  Parameters
1237:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1238:RTT/SEGGER_RTT.c **** *    c            Byte to be stored.
1239:RTT/SEGGER_RTT.c **** *
1240:RTT/SEGGER_RTT.c **** *  Return value
1241:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1242:RTT/SEGGER_RTT.c **** *
1243:RTT/SEGGER_RTT.c **** *  Notes
1244:RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1245:RTT/SEGGER_RTT.c **** *    (2) For performance reasons this function does not call Init()
1246:RTT/SEGGER_RTT.c **** *        and may only be called after RTT has been initialized.
1247:RTT/SEGGER_RTT.c **** *        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
1248:RTT/SEGGER_RTT.c **** */
1249:RTT/SEGGER_RTT.c **** 
1250:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkipNoLock(unsigned BufferIndex, char c) {
 1838              		.loc 1 1250 69 is_stmt 1 view -0
 1839              		.cfi_startproc
 1840              		@ args = 0, pretend = 0, frame = 0
 1841              		@ frame_needed = 0, uses_anonymous_args = 0
 1842              		@ link register save eliminated.
 1843              		.loc 1 1250 69 is_stmt 0 view .LVU546
 1844 0000 30B4     		push	{r4, r5}
 1845              	.LCFI15:
 1846              		.cfi_def_cfa_offset 8
 1847              		.cfi_offset 4, -8
 1848              		.cfi_offset 5, -4
1251:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1849              		.loc 1 1251 3 is_stmt 1 view .LVU547
1252:RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 1850              		.loc 1 1252 3 view .LVU548
1253:RTT/SEGGER_RTT.c ****   unsigned              Status;
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 60


 1851              		.loc 1 1253 3 view .LVU549
1254:RTT/SEGGER_RTT.c ****   volatile char*        pDst;
 1852              		.loc 1 1254 3 view .LVU550
1255:RTT/SEGGER_RTT.c ****   //
1256:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1257:RTT/SEGGER_RTT.c ****   //
1258:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 1853              		.loc 1 1258 3 view .LVU551
 1854              	.LVL196:
1259:RTT/SEGGER_RTT.c ****   //
1260:RTT/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1261:RTT/SEGGER_RTT.c ****   //
1262:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 1855              		.loc 1 1262 3 view .LVU552
 1856              		.loc 1 1262 16 is_stmt 0 view .LVU553
 1857 0002 00EB4002 		add	r2, r0, r0, lsl #1
 1858 0006 124B     		ldr	r3, .L109
 1859 0008 03EBC203 		add	r3, r3, r2, lsl #3
 1860 000c 5D6A     		ldr	r5, [r3, #36]
 1861              		.loc 1 1262 9 view .LVU554
 1862 000e 6A1C     		adds	r2, r5, #1
 1863              	.LVL197:
1263:RTT/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 1864              		.loc 1 1263 3 is_stmt 1 view .LVU555
 1865              		.loc 1 1263 21 is_stmt 0 view .LVU556
 1866 0010 1B6A     		ldr	r3, [r3, #32]
 1867              		.loc 1 1263 6 view .LVU557
 1868 0012 9342     		cmp	r3, r2
 1869 0014 18D0     		beq	.L108
 1870              	.LVL198:
 1871              	.L103:
1264:RTT/SEGGER_RTT.c ****     WrOff = 0;
1265:RTT/SEGGER_RTT.c ****   }
1266:RTT/SEGGER_RTT.c ****   //
1267:RTT/SEGGER_RTT.c ****   // Output byte if free space is available
1268:RTT/SEGGER_RTT.c ****   //
1269:RTT/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 1872              		.loc 1 1269 3 is_stmt 1 view .LVU558
 1873              		.loc 1 1269 21 is_stmt 0 view .LVU559
 1874 0016 00EB4003 		add	r3, r0, r0, lsl #1
 1875 001a 0D4C     		ldr	r4, .L109
 1876 001c 04EBC303 		add	r3, r4, r3, lsl #3
 1877 0020 9B6A     		ldr	r3, [r3, #40]
 1878              		.loc 1 1269 6 view .LVU560
 1879 0022 9342     		cmp	r3, r2
 1880 0024 12D0     		beq	.L106
1270:RTT/SEGGER_RTT.c ****     pDst = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 1881              		.loc 1 1270 5 is_stmt 1 view .LVU561
 1882              		.loc 1 1270 18 is_stmt 0 view .LVU562
 1883 0026 431C     		adds	r3, r0, #1
 1884 0028 03EB4303 		add	r3, r3, r3, lsl #1
 1885 002c 04EBC303 		add	r3, r4, r3, lsl #3
 1886 0030 5B68     		ldr	r3, [r3, #4]
 1887              	.LVL199:
1271:RTT/SEGGER_RTT.c ****     *pDst = c;
 1888              		.loc 1 1271 5 is_stmt 1 view .LVU563
 1889              		.loc 1 1271 11 is_stmt 0 view .LVU564
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 61


 1890 0032 5955     		strb	r1, [r3, r5]
1272:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 1891              		.loc 1 1272 5 is_stmt 1 view .LVU565
 1892              		.syntax unified
 1893              	@ 1272 "RTT/SEGGER_RTT.c" 1
 1894 0034 BFF35F8F 		dmb
 1895              	
 1896              	@ 0 "" 2
 1897              		.loc 1 1272 15 view .LVU566
1273:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 1898              		.loc 1 1273 5 view .LVU567
 1899              		.loc 1 1273 18 is_stmt 0 view .LVU568
 1900              		.thumb
 1901              		.syntax unified
 1902 0038 00EB4000 		add	r0, r0, r0, lsl #1
 1903              	.LVL200:
 1904              		.loc 1 1273 18 view .LVU569
 1905 003c 04EBC000 		add	r0, r4, r0, lsl #3
 1906 0040 4262     		str	r2, [r0, #36]
1274:RTT/SEGGER_RTT.c ****     Status = 1;
 1907              		.loc 1 1274 5 is_stmt 1 view .LVU570
 1908              	.LVL201:
 1909              		.loc 1 1274 12 is_stmt 0 view .LVU571
 1910 0042 0120     		movs	r0, #1
 1911              	.LVL202:
 1912              	.L102:
1275:RTT/SEGGER_RTT.c ****   } else {
1276:RTT/SEGGER_RTT.c ****     Status = 0;
1277:RTT/SEGGER_RTT.c ****   }
1278:RTT/SEGGER_RTT.c ****   //
1279:RTT/SEGGER_RTT.c ****   return Status;
1280:RTT/SEGGER_RTT.c **** }
 1913              		.loc 1 1280 1 view .LVU572
 1914 0044 30BC     		pop	{r4, r5}
 1915              	.LCFI16:
 1916              		.cfi_remember_state
 1917              		.cfi_restore 5
 1918              		.cfi_restore 4
 1919              		.cfi_def_cfa_offset 0
 1920 0046 7047     		bx	lr
 1921              	.LVL203:
 1922              	.L108:
 1923              	.LCFI17:
 1924              		.cfi_restore_state
1264:RTT/SEGGER_RTT.c ****   }
 1925              		.loc 1 1264 11 view .LVU573
 1926 0048 0022     		movs	r2, #0
 1927              	.LVL204:
1264:RTT/SEGGER_RTT.c ****   }
 1928              		.loc 1 1264 11 view .LVU574
 1929 004a E4E7     		b	.L103
 1930              	.LVL205:
 1931              	.L106:
1276:RTT/SEGGER_RTT.c ****   }
 1932              		.loc 1 1276 12 view .LVU575
 1933 004c 0020     		movs	r0, #0
 1934              	.LVL206:
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 62


1279:RTT/SEGGER_RTT.c **** }
 1935              		.loc 1 1279 3 is_stmt 1 view .LVU576
1279:RTT/SEGGER_RTT.c **** }
 1936              		.loc 1 1279 10 is_stmt 0 view .LVU577
 1937 004e F9E7     		b	.L102
 1938              	.L110:
 1939              		.align	2
 1940              	.L109:
 1941 0050 00000000 		.word	_SEGGER_RTT
 1942              		.cfi_endproc
 1943              	.LFE15:
 1945              		.section	.text.SEGGER_RTT_PutCharSkip,"ax",%progbits
 1946              		.align	1
 1947              		.global	SEGGER_RTT_PutCharSkip
 1948              		.syntax unified
 1949              		.thumb
 1950              		.thumb_func
 1951              		.fpu fpv4-sp-d16
 1953              	SEGGER_RTT_PutCharSkip:
 1954              	.LVL207:
 1955              	.LFB16:
1281:RTT/SEGGER_RTT.c **** 
1282:RTT/SEGGER_RTT.c **** /*********************************************************************
1283:RTT/SEGGER_RTT.c **** *
1284:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_PutCharSkip
1285:RTT/SEGGER_RTT.c **** *
1286:RTT/SEGGER_RTT.c **** *  Function description
1287:RTT/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1288:RTT/SEGGER_RTT.c **** *
1289:RTT/SEGGER_RTT.c **** *  Parameters
1290:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1291:RTT/SEGGER_RTT.c **** *    c            Byte to be stored.
1292:RTT/SEGGER_RTT.c **** *
1293:RTT/SEGGER_RTT.c **** *  Return value
1294:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1295:RTT/SEGGER_RTT.c **** *
1296:RTT/SEGGER_RTT.c **** *  Notes
1297:RTT/SEGGER_RTT.c **** *    (1) If there is not enough space in the "Up"-buffer, the character is dropped.
1298:RTT/SEGGER_RTT.c **** */
1299:RTT/SEGGER_RTT.c **** 
1300:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutCharSkip(unsigned BufferIndex, char c) {
 1956              		.loc 1 1300 63 is_stmt 1 view -0
 1957              		.cfi_startproc
 1958              		@ args = 0, pretend = 0, frame = 0
 1959              		@ frame_needed = 0, uses_anonymous_args = 0
 1960              		.loc 1 1300 63 is_stmt 0 view .LVU579
 1961 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1962              	.LCFI18:
 1963              		.cfi_def_cfa_offset 24
 1964              		.cfi_offset 3, -24
 1965              		.cfi_offset 4, -20
 1966              		.cfi_offset 5, -16
 1967              		.cfi_offset 6, -12
 1968              		.cfi_offset 7, -8
 1969              		.cfi_offset 14, -4
 1970 0002 0446     		mov	r4, r0
 1971 0004 0D46     		mov	r5, r1
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 63


1301:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 1972              		.loc 1 1301 3 is_stmt 1 view .LVU580
1302:RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 1973              		.loc 1 1302 3 view .LVU581
1303:RTT/SEGGER_RTT.c ****   unsigned              Status;
 1974              		.loc 1 1303 3 view .LVU582
1304:RTT/SEGGER_RTT.c ****   volatile char*        pDst;
 1975              		.loc 1 1304 3 view .LVU583
 1976              	.LBB14:
1305:RTT/SEGGER_RTT.c ****   //
1306:RTT/SEGGER_RTT.c ****   // Prepare
1307:RTT/SEGGER_RTT.c ****   //
1308:RTT/SEGGER_RTT.c ****   INIT();
 1977              		.loc 1 1308 3 view .LVU584
 1978              		.loc 1 1308 3 view .LVU585
 1979              	.LVL208:
 1980              		.loc 1 1308 3 view .LVU586
 1981              		.loc 1 1308 3 view .LVU587
 1982 0006 1A4B     		ldr	r3, .L120
 1983 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 1984 000a 4BB3     		cbz	r3, .L118
 1985              	.LVL209:
 1986              	.L112:
 1987              		.loc 1 1308 3 discriminator 3 view .LVU588
 1988              	.LBE14:
 1989              		.loc 1 1308 9 discriminator 3 view .LVU589
 1990              	.LBB15:
1309:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 1991              		.loc 1 1309 3 discriminator 3 view .LVU590
 1992              		.loc 1 1309 3 discriminator 3 view .LVU591
 1993              		.syntax unified
 1994              	@ 1309 "RTT/SEGGER_RTT.c" 1
 1995 000c EFF31186 		mrs   r6, basepri  
 1996 0010 4FF02001 		mov   r1, #32       
 1997 0014 81F31188 		msr   basepri, r1  
 1998              		
 1999              	@ 0 "" 2
 2000              	.LVL210:
 2001              		.loc 1 1309 20 discriminator 3 view .LVU592
1310:RTT/SEGGER_RTT.c ****   //
1311:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1312:RTT/SEGGER_RTT.c ****   //
1313:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 2002              		.loc 1 1313 3 discriminator 3 view .LVU593
1314:RTT/SEGGER_RTT.c ****   //
1315:RTT/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1316:RTT/SEGGER_RTT.c ****   //
1317:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 2003              		.loc 1 1317 3 discriminator 3 view .LVU594
 2004              		.loc 1 1317 16 is_stmt 0 discriminator 3 view .LVU595
 2005              		.thumb
 2006              		.syntax unified
 2007 0018 04EB4403 		add	r3, r4, r4, lsl #1
 2008 001c 144A     		ldr	r2, .L120
 2009 001e 02EBC303 		add	r3, r2, r3, lsl #3
 2010 0022 5F6A     		ldr	r7, [r3, #36]
 2011              		.loc 1 1317 9 discriminator 3 view .LVU596
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 64


 2012 0024 7A1C     		adds	r2, r7, #1
 2013              	.LVL211:
1318:RTT/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2014              		.loc 1 1318 3 is_stmt 1 discriminator 3 view .LVU597
 2015              		.loc 1 1318 21 is_stmt 0 discriminator 3 view .LVU598
 2016 0026 1B6A     		ldr	r3, [r3, #32]
 2017              		.loc 1 1318 6 discriminator 3 view .LVU599
 2018 0028 9342     		cmp	r3, r2
 2019 002a 1CD0     		beq	.L119
 2020              	.LVL212:
 2021              	.L113:
1319:RTT/SEGGER_RTT.c ****     WrOff = 0;
1320:RTT/SEGGER_RTT.c ****   }
1321:RTT/SEGGER_RTT.c ****   //
1322:RTT/SEGGER_RTT.c ****   // Output byte if free space is available
1323:RTT/SEGGER_RTT.c ****   //
1324:RTT/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 2022              		.loc 1 1324 3 is_stmt 1 view .LVU600
 2023              		.loc 1 1324 21 is_stmt 0 view .LVU601
 2024 002c 04EB4403 		add	r3, r4, r4, lsl #1
 2025 0030 0F49     		ldr	r1, .L120
 2026 0032 01EBC303 		add	r3, r1, r3, lsl #3
 2027 0036 9B6A     		ldr	r3, [r3, #40]
 2028              		.loc 1 1324 6 view .LVU602
 2029 0038 9342     		cmp	r3, r2
 2030 003a 16D0     		beq	.L116
1325:RTT/SEGGER_RTT.c ****     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 2031              		.loc 1 1325 5 is_stmt 1 view .LVU603
 2032              		.loc 1 1325 19 is_stmt 0 view .LVU604
 2033 003c 631C     		adds	r3, r4, #1
 2034 003e 03EB4303 		add	r3, r3, r3, lsl #1
 2035 0042 01EBC303 		add	r3, r1, r3, lsl #3
 2036 0046 5B68     		ldr	r3, [r3, #4]
 2037              	.LVL213:
1326:RTT/SEGGER_RTT.c ****     *pDst = c;
 2038              		.loc 1 1326 5 is_stmt 1 view .LVU605
 2039              		.loc 1 1326 11 is_stmt 0 view .LVU606
 2040 0048 DD55     		strb	r5, [r3, r7]
1327:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2041              		.loc 1 1327 5 is_stmt 1 view .LVU607
 2042              		.syntax unified
 2043              	@ 1327 "RTT/SEGGER_RTT.c" 1
 2044 004a BFF35F8F 		dmb
 2045              	
 2046              	@ 0 "" 2
 2047              		.loc 1 1327 15 view .LVU608
1328:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2048              		.loc 1 1328 5 view .LVU609
 2049              		.loc 1 1328 18 is_stmt 0 view .LVU610
 2050              		.thumb
 2051              		.syntax unified
 2052 004e 04EB4404 		add	r4, r4, r4, lsl #1
 2053              	.LVL214:
 2054              		.loc 1 1328 18 view .LVU611
 2055 0052 01EBC404 		add	r4, r1, r4, lsl #3
 2056 0056 6262     		str	r2, [r4, #36]
1329:RTT/SEGGER_RTT.c ****     Status = 1;
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 65


 2057              		.loc 1 1329 5 is_stmt 1 view .LVU612
 2058              	.LVL215:
 2059              		.loc 1 1329 12 is_stmt 0 view .LVU613
 2060 0058 0120     		movs	r0, #1
 2061              	.LVL216:
 2062              	.L114:
1330:RTT/SEGGER_RTT.c ****   } else {
1331:RTT/SEGGER_RTT.c ****     Status = 0;
1332:RTT/SEGGER_RTT.c ****   }
1333:RTT/SEGGER_RTT.c ****   //
1334:RTT/SEGGER_RTT.c ****   // Finish up.
1335:RTT/SEGGER_RTT.c ****   //
1336:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2063              		.loc 1 1336 3 is_stmt 1 view .LVU614
 2064              		.syntax unified
 2065              	@ 1336 "RTT/SEGGER_RTT.c" 1
 2066 005a 86F31188 		msr   basepri, r6  
 2067              		
 2068              	@ 0 "" 2
 2069              		.thumb
 2070              		.syntax unified
 2071              	.LBE15:
 2072              		.loc 1 1336 22 view .LVU615
1337:RTT/SEGGER_RTT.c ****   //
1338:RTT/SEGGER_RTT.c ****   return Status;
 2073              		.loc 1 1338 3 view .LVU616
1339:RTT/SEGGER_RTT.c **** }
 2074              		.loc 1 1339 1 is_stmt 0 view .LVU617
 2075 005e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 2076              	.LVL217:
 2077              	.L118:
 2078              	.LBB16:
1308:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2079              		.loc 1 1308 3 is_stmt 1 discriminator 1 view .LVU618
 2080 0060 FFF7FEFF 		bl	_DoInit
 2081              	.LVL218:
1308:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2082              		.loc 1 1308 3 is_stmt 0 discriminator 1 view .LVU619
 2083 0064 D2E7     		b	.L112
 2084              	.LVL219:
 2085              	.L119:
1308:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2086              		.loc 1 1308 3 discriminator 1 view .LVU620
 2087              	.LBE16:
 2088              	.LBB17:
1319:RTT/SEGGER_RTT.c ****   }
 2089              		.loc 1 1319 11 view .LVU621
 2090 0066 0022     		movs	r2, #0
 2091              	.LVL220:
1319:RTT/SEGGER_RTT.c ****   }
 2092              		.loc 1 1319 11 view .LVU622
 2093 0068 E0E7     		b	.L113
 2094              	.LVL221:
 2095              	.L116:
1331:RTT/SEGGER_RTT.c ****   }
 2096              		.loc 1 1331 12 view .LVU623
 2097 006a 0020     		movs	r0, #0
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 66


 2098 006c F5E7     		b	.L114
 2099              	.L121:
 2100 006e 00BF     		.align	2
 2101              	.L120:
 2102 0070 00000000 		.word	_SEGGER_RTT
 2103              	.LBE17:
 2104              		.cfi_endproc
 2105              	.LFE16:
 2107              		.section	.text.SEGGER_RTT_PutChar,"ax",%progbits
 2108              		.align	1
 2109              		.global	SEGGER_RTT_PutChar
 2110              		.syntax unified
 2111              		.thumb
 2112              		.thumb_func
 2113              		.fpu fpv4-sp-d16
 2115              	SEGGER_RTT_PutChar:
 2116              	.LVL222:
 2117              	.LFB17:
1340:RTT/SEGGER_RTT.c **** 
1341:RTT/SEGGER_RTT.c ****  /*********************************************************************
1342:RTT/SEGGER_RTT.c **** *
1343:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_PutChar
1344:RTT/SEGGER_RTT.c **** *
1345:RTT/SEGGER_RTT.c **** *  Function description
1346:RTT/SEGGER_RTT.c **** *    Stores a single character/byte in SEGGER RTT buffer.
1347:RTT/SEGGER_RTT.c **** *
1348:RTT/SEGGER_RTT.c **** *  Parameters
1349:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of "Up"-buffer to be used (e.g. 0 for "Terminal").
1350:RTT/SEGGER_RTT.c **** *    c            Byte to be stored.
1351:RTT/SEGGER_RTT.c **** *
1352:RTT/SEGGER_RTT.c **** *  Return value
1353:RTT/SEGGER_RTT.c **** *    Number of bytes which have been stored in the "Up"-buffer.
1354:RTT/SEGGER_RTT.c **** *
1355:RTT/SEGGER_RTT.c **** *  Notes
1356:RTT/SEGGER_RTT.c **** *    (1) Data is stored according to buffer flags.
1357:RTT/SEGGER_RTT.c **** */
1358:RTT/SEGGER_RTT.c **** 
1359:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_PutChar(unsigned BufferIndex, char c) {
 2118              		.loc 1 1359 59 is_stmt 1 view -0
 2119              		.cfi_startproc
 2120              		@ args = 0, pretend = 0, frame = 0
 2121              		@ frame_needed = 0, uses_anonymous_args = 0
 2122              		.loc 1 1359 59 is_stmt 0 view .LVU625
 2123 0000 70B5     		push	{r4, r5, r6, lr}
 2124              	.LCFI19:
 2125              		.cfi_def_cfa_offset 16
 2126              		.cfi_offset 4, -16
 2127              		.cfi_offset 5, -12
 2128              		.cfi_offset 6, -8
 2129              		.cfi_offset 14, -4
 2130 0002 0446     		mov	r4, r0
 2131 0004 0D46     		mov	r5, r1
1360:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2132              		.loc 1 1360 3 is_stmt 1 view .LVU626
1361:RTT/SEGGER_RTT.c ****   unsigned              WrOff;
 2133              		.loc 1 1361 3 view .LVU627
1362:RTT/SEGGER_RTT.c ****   unsigned              Status;
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 67


 2134              		.loc 1 1362 3 view .LVU628
1363:RTT/SEGGER_RTT.c ****   volatile char*        pDst;
 2135              		.loc 1 1363 3 view .LVU629
 2136              	.LBB18:
1364:RTT/SEGGER_RTT.c ****   //
1365:RTT/SEGGER_RTT.c ****   // Prepare
1366:RTT/SEGGER_RTT.c ****   //
1367:RTT/SEGGER_RTT.c ****   INIT();
 2137              		.loc 1 1367 3 view .LVU630
 2138              		.loc 1 1367 3 view .LVU631
 2139              	.LVL223:
 2140              		.loc 1 1367 3 view .LVU632
 2141              		.loc 1 1367 3 view .LVU633
 2142 0006 234B     		ldr	r3, .L133
 2143 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2144 000a 002B     		cmp	r3, #0
 2145 000c 31D0     		beq	.L131
 2146              	.LVL224:
 2147              	.L123:
 2148              		.loc 1 1367 3 discriminator 3 view .LVU634
 2149              	.LBE18:
 2150              		.loc 1 1367 9 discriminator 3 view .LVU635
 2151              	.LBB19:
1368:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2152              		.loc 1 1368 3 discriminator 3 view .LVU636
 2153              		.loc 1 1368 3 discriminator 3 view .LVU637
 2154              		.syntax unified
 2155              	@ 1368 "RTT/SEGGER_RTT.c" 1
 2156 000e EFF31186 		mrs   r6, basepri  
 2157 0012 4FF02001 		mov   r1, #32       
 2158 0016 81F31188 		msr   basepri, r1  
 2159              		
 2160              	@ 0 "" 2
 2161              	.LVL225:
 2162              		.loc 1 1368 20 discriminator 3 view .LVU638
1369:RTT/SEGGER_RTT.c ****   //
1370:RTT/SEGGER_RTT.c ****   // Get "to-host" ring buffer.
1371:RTT/SEGGER_RTT.c ****   //
1372:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 2163              		.loc 1 1372 3 discriminator 3 view .LVU639
1373:RTT/SEGGER_RTT.c ****   //
1374:RTT/SEGGER_RTT.c ****   // Get write position and handle wrap-around if necessary
1375:RTT/SEGGER_RTT.c ****   //
1376:RTT/SEGGER_RTT.c ****   WrOff = pRing->WrOff + 1;
 2164              		.loc 1 1376 3 discriminator 3 view .LVU640
 2165              		.loc 1 1376 16 is_stmt 0 discriminator 3 view .LVU641
 2166              		.thumb
 2167              		.syntax unified
 2168 001a 04EB4403 		add	r3, r4, r4, lsl #1
 2169 001e 1D4A     		ldr	r2, .L133
 2170 0020 02EBC303 		add	r3, r2, r3, lsl #3
 2171 0024 596A     		ldr	r1, [r3, #36]
 2172              		.loc 1 1376 9 discriminator 3 view .LVU642
 2173 0026 481C     		adds	r0, r1, #1
 2174              	.LVL226:
1377:RTT/SEGGER_RTT.c ****   if (WrOff == pRing->SizeOfBuffer) {
 2175              		.loc 1 1377 3 is_stmt 1 discriminator 3 view .LVU643
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 68


 2176              		.loc 1 1377 21 is_stmt 0 discriminator 3 view .LVU644
 2177 0028 1B6A     		ldr	r3, [r3, #32]
 2178              		.loc 1 1377 6 discriminator 3 view .LVU645
 2179 002a 8342     		cmp	r3, r0
 2180 002c 24D0     		beq	.L132
 2181              	.LVL227:
 2182              	.L124:
1378:RTT/SEGGER_RTT.c ****     WrOff = 0;
1379:RTT/SEGGER_RTT.c ****   }
1380:RTT/SEGGER_RTT.c ****   //
1381:RTT/SEGGER_RTT.c ****   // Wait for free space if mode is set to blocking
1382:RTT/SEGGER_RTT.c ****   //
1383:RTT/SEGGER_RTT.c ****   if (pRing->Flags == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 2183              		.loc 1 1383 3 is_stmt 1 view .LVU646
 2184              		.loc 1 1383 12 is_stmt 0 view .LVU647
 2185 002e 04EB4403 		add	r3, r4, r4, lsl #1
 2186 0032 184A     		ldr	r2, .L133
 2187 0034 02EBC303 		add	r3, r2, r3, lsl #3
 2188 0038 DB6A     		ldr	r3, [r3, #44]
 2189              		.loc 1 1383 6 view .LVU648
 2190 003a 022B     		cmp	r3, #2
 2191 003c 1ED0     		beq	.L126
 2192              	.L125:
1384:RTT/SEGGER_RTT.c ****     while (WrOff == pRing->RdOff) {
1385:RTT/SEGGER_RTT.c ****       ;
1386:RTT/SEGGER_RTT.c ****     }
1387:RTT/SEGGER_RTT.c ****   }
1388:RTT/SEGGER_RTT.c ****   //
1389:RTT/SEGGER_RTT.c ****   // Output byte if free space is available
1390:RTT/SEGGER_RTT.c ****   //
1391:RTT/SEGGER_RTT.c ****   if (WrOff != pRing->RdOff) {
 2193              		.loc 1 1391 3 is_stmt 1 view .LVU649
 2194              		.loc 1 1391 21 is_stmt 0 view .LVU650
 2195 003e 04EB4403 		add	r3, r4, r4, lsl #1
 2196 0042 144A     		ldr	r2, .L133
 2197 0044 02EBC303 		add	r3, r2, r3, lsl #3
 2198 0048 9B6A     		ldr	r3, [r3, #40]
 2199              		.loc 1 1391 6 view .LVU651
 2200 004a 8342     		cmp	r3, r0
 2201 004c 1FD0     		beq	.L129
1392:RTT/SEGGER_RTT.c ****     pDst  = (pRing->pBuffer + pRing->WrOff) + SEGGER_RTT_UNCACHED_OFF;
 2202              		.loc 1 1392 5 is_stmt 1 view .LVU652
 2203              		.loc 1 1392 19 is_stmt 0 view .LVU653
 2204 004e 631C     		adds	r3, r4, #1
 2205 0050 03EB4303 		add	r3, r3, r3, lsl #1
 2206 0054 02EBC303 		add	r3, r2, r3, lsl #3
 2207 0058 5B68     		ldr	r3, [r3, #4]
 2208              	.LVL228:
1393:RTT/SEGGER_RTT.c ****     *pDst = c;
 2209              		.loc 1 1393 5 is_stmt 1 view .LVU654
 2210              		.loc 1 1393 11 is_stmt 0 view .LVU655
 2211 005a 5D54     		strb	r5, [r3, r1]
1394:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2212              		.loc 1 1394 5 is_stmt 1 view .LVU656
 2213              		.syntax unified
 2214              	@ 1394 "RTT/SEGGER_RTT.c" 1
 2215 005c BFF35F8F 		dmb
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 69


 2216              	
 2217              	@ 0 "" 2
 2218              		.loc 1 1394 15 view .LVU657
1395:RTT/SEGGER_RTT.c ****     pRing->WrOff = WrOff;
 2219              		.loc 1 1395 5 view .LVU658
 2220              		.loc 1 1395 18 is_stmt 0 view .LVU659
 2221              		.thumb
 2222              		.syntax unified
 2223 0060 04EB4404 		add	r4, r4, r4, lsl #1
 2224              	.LVL229:
 2225              		.loc 1 1395 18 view .LVU660
 2226 0064 02EBC404 		add	r4, r2, r4, lsl #3
 2227 0068 6062     		str	r0, [r4, #36]
1396:RTT/SEGGER_RTT.c ****     Status = 1;
 2228              		.loc 1 1396 5 is_stmt 1 view .LVU661
 2229              	.LVL230:
 2230              		.loc 1 1396 12 is_stmt 0 view .LVU662
 2231 006a 0120     		movs	r0, #1
 2232              	.LVL231:
 2233              	.L127:
1397:RTT/SEGGER_RTT.c ****   } else {
1398:RTT/SEGGER_RTT.c ****     Status = 0;
1399:RTT/SEGGER_RTT.c ****   }
1400:RTT/SEGGER_RTT.c ****   //
1401:RTT/SEGGER_RTT.c ****   // Finish up.
1402:RTT/SEGGER_RTT.c ****   //
1403:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2234              		.loc 1 1403 3 is_stmt 1 view .LVU663
 2235              		.syntax unified
 2236              	@ 1403 "RTT/SEGGER_RTT.c" 1
 2237 006c 86F31188 		msr   basepri, r6  
 2238              		
 2239              	@ 0 "" 2
 2240              		.thumb
 2241              		.syntax unified
 2242              	.LBE19:
 2243              		.loc 1 1403 22 view .LVU664
1404:RTT/SEGGER_RTT.c ****   return Status;
 2244              		.loc 1 1404 3 view .LVU665
1405:RTT/SEGGER_RTT.c **** }
 2245              		.loc 1 1405 1 is_stmt 0 view .LVU666
 2246 0070 70BD     		pop	{r4, r5, r6, pc}
 2247              	.LVL232:
 2248              	.L131:
 2249              	.LBB20:
1367:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2250              		.loc 1 1367 3 is_stmt 1 discriminator 1 view .LVU667
 2251 0072 FFF7FEFF 		bl	_DoInit
 2252              	.LVL233:
1367:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2253              		.loc 1 1367 3 is_stmt 0 discriminator 1 view .LVU668
 2254 0076 CAE7     		b	.L123
 2255              	.LVL234:
 2256              	.L132:
1367:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2257              		.loc 1 1367 3 discriminator 1 view .LVU669
 2258              	.LBE20:
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 70


 2259              	.LBB21:
1378:RTT/SEGGER_RTT.c ****   }
 2260              		.loc 1 1378 11 view .LVU670
 2261 0078 0020     		movs	r0, #0
 2262              	.LVL235:
1378:RTT/SEGGER_RTT.c ****   }
 2263              		.loc 1 1378 11 view .LVU671
 2264 007a D8E7     		b	.L124
 2265              	.LVL236:
 2266              	.L126:
1385:RTT/SEGGER_RTT.c ****     }
 2267              		.loc 1 1385 7 is_stmt 1 discriminator 1 view .LVU672
1384:RTT/SEGGER_RTT.c ****       ;
 2268              		.loc 1 1384 11 discriminator 1 view .LVU673
1384:RTT/SEGGER_RTT.c ****       ;
 2269              		.loc 1 1384 26 is_stmt 0 discriminator 1 view .LVU674
 2270 007c 04EB4403 		add	r3, r4, r4, lsl #1
 2271 0080 044A     		ldr	r2, .L133
 2272 0082 02EBC303 		add	r3, r2, r3, lsl #3
 2273 0086 9B6A     		ldr	r3, [r3, #40]
1384:RTT/SEGGER_RTT.c ****       ;
 2274              		.loc 1 1384 11 discriminator 1 view .LVU675
 2275 0088 8342     		cmp	r3, r0
 2276 008a F7D0     		beq	.L126
 2277 008c D7E7     		b	.L125
 2278              	.L129:
1398:RTT/SEGGER_RTT.c ****   }
 2279              		.loc 1 1398 12 view .LVU676
 2280 008e 0020     		movs	r0, #0
 2281              	.LVL237:
1398:RTT/SEGGER_RTT.c ****   }
 2282              		.loc 1 1398 12 view .LVU677
 2283 0090 ECE7     		b	.L127
 2284              	.L134:
 2285 0092 00BF     		.align	2
 2286              	.L133:
 2287 0094 00000000 		.word	_SEGGER_RTT
 2288              	.LBE21:
 2289              		.cfi_endproc
 2290              	.LFE17:
 2292              		.section	.text.SEGGER_RTT_GetKey,"ax",%progbits
 2293              		.align	1
 2294              		.global	SEGGER_RTT_GetKey
 2295              		.syntax unified
 2296              		.thumb
 2297              		.thumb_func
 2298              		.fpu fpv4-sp-d16
 2300              	SEGGER_RTT_GetKey:
 2301              	.LFB18:
1406:RTT/SEGGER_RTT.c **** 
1407:RTT/SEGGER_RTT.c **** /*********************************************************************
1408:RTT/SEGGER_RTT.c **** *
1409:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_GetKey
1410:RTT/SEGGER_RTT.c **** *
1411:RTT/SEGGER_RTT.c **** *  Function description
1412:RTT/SEGGER_RTT.c **** *    Reads one character from the SEGGER RTT buffer.
1413:RTT/SEGGER_RTT.c **** *    Host has previously stored data there.
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 71


1414:RTT/SEGGER_RTT.c **** *
1415:RTT/SEGGER_RTT.c **** *  Return value
1416:RTT/SEGGER_RTT.c **** *    <  0 -   No character available (buffer empty).
1417:RTT/SEGGER_RTT.c **** *    >= 0 -   Character which has been read. (Possible values: 0 - 255)
1418:RTT/SEGGER_RTT.c **** *
1419:RTT/SEGGER_RTT.c **** *  Notes
1420:RTT/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0.
1421:RTT/SEGGER_RTT.c **** */
1422:RTT/SEGGER_RTT.c **** int SEGGER_RTT_GetKey(void) {
 2302              		.loc 1 1422 29 is_stmt 1 view -0
 2303              		.cfi_startproc
 2304              		@ args = 0, pretend = 0, frame = 8
 2305              		@ frame_needed = 0, uses_anonymous_args = 0
 2306 0000 00B5     		push	{lr}
 2307              	.LCFI20:
 2308              		.cfi_def_cfa_offset 4
 2309              		.cfi_offset 14, -4
 2310 0002 83B0     		sub	sp, sp, #12
 2311              	.LCFI21:
 2312              		.cfi_def_cfa_offset 16
1423:RTT/SEGGER_RTT.c ****   char c;
 2313              		.loc 1 1423 3 view .LVU679
1424:RTT/SEGGER_RTT.c ****   int r;
 2314              		.loc 1 1424 3 view .LVU680
1425:RTT/SEGGER_RTT.c **** 
1426:RTT/SEGGER_RTT.c ****   r = (int)SEGGER_RTT_Read(0u, &c, 1u);
 2315              		.loc 1 1426 3 view .LVU681
 2316              		.loc 1 1426 12 is_stmt 0 view .LVU682
 2317 0004 0122     		movs	r2, #1
 2318 0006 0DF10701 		add	r1, sp, #7
 2319 000a 0020     		movs	r0, #0
 2320 000c FFF7FEFF 		bl	SEGGER_RTT_Read
 2321              	.LVL238:
1427:RTT/SEGGER_RTT.c ****   if (r == 1) {
 2322              		.loc 1 1427 3 is_stmt 1 view .LVU683
 2323              		.loc 1 1427 6 is_stmt 0 view .LVU684
 2324 0010 0128     		cmp	r0, #1
 2325 0012 04D1     		bne	.L137
1428:RTT/SEGGER_RTT.c ****     r = (int)(unsigned char)c;
 2326              		.loc 1 1428 5 is_stmt 1 view .LVU685
 2327              		.loc 1 1428 9 is_stmt 0 view .LVU686
 2328 0014 9DF80700 		ldrb	r0, [sp, #7]	@ zero_extendqisi2
 2329              	.LVL239:
 2330              	.L135:
1429:RTT/SEGGER_RTT.c ****   } else {
1430:RTT/SEGGER_RTT.c ****     r = -1;
1431:RTT/SEGGER_RTT.c ****   }
1432:RTT/SEGGER_RTT.c ****   return r;
1433:RTT/SEGGER_RTT.c **** }
 2331              		.loc 1 1433 1 view .LVU687
 2332 0018 03B0     		add	sp, sp, #12
 2333              	.LCFI22:
 2334              		.cfi_remember_state
 2335              		.cfi_def_cfa_offset 4
 2336              		@ sp needed
 2337 001a 5DF804FB 		ldr	pc, [sp], #4
 2338              	.LVL240:
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 72


 2339              	.L137:
 2340              	.LCFI23:
 2341              		.cfi_restore_state
1430:RTT/SEGGER_RTT.c ****   }
 2342              		.loc 1 1430 7 view .LVU688
 2343 001e 4FF0FF30 		mov	r0, #-1
 2344              	.LVL241:
1432:RTT/SEGGER_RTT.c **** }
 2345              		.loc 1 1432 3 is_stmt 1 view .LVU689
1432:RTT/SEGGER_RTT.c **** }
 2346              		.loc 1 1432 10 is_stmt 0 view .LVU690
 2347 0022 F9E7     		b	.L135
 2348              		.cfi_endproc
 2349              	.LFE18:
 2351              		.section	.text.SEGGER_RTT_WaitKey,"ax",%progbits
 2352              		.align	1
 2353              		.global	SEGGER_RTT_WaitKey
 2354              		.syntax unified
 2355              		.thumb
 2356              		.thumb_func
 2357              		.fpu fpv4-sp-d16
 2359              	SEGGER_RTT_WaitKey:
 2360              	.LFB19:
1434:RTT/SEGGER_RTT.c **** 
1435:RTT/SEGGER_RTT.c **** /*********************************************************************
1436:RTT/SEGGER_RTT.c **** *
1437:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_WaitKey
1438:RTT/SEGGER_RTT.c **** *
1439:RTT/SEGGER_RTT.c **** *  Function description
1440:RTT/SEGGER_RTT.c **** *    Waits until at least one character is avaible in the SEGGER RTT buffer.
1441:RTT/SEGGER_RTT.c **** *    Once a character is available, it is read and this function returns.
1442:RTT/SEGGER_RTT.c **** *
1443:RTT/SEGGER_RTT.c **** *  Return value
1444:RTT/SEGGER_RTT.c **** *    >=0 -   Character which has been read.
1445:RTT/SEGGER_RTT.c **** *
1446:RTT/SEGGER_RTT.c **** *  Notes
1447:RTT/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1448:RTT/SEGGER_RTT.c **** *    (2) This function is blocking if no character is present in RTT buffer
1449:RTT/SEGGER_RTT.c **** */
1450:RTT/SEGGER_RTT.c **** int SEGGER_RTT_WaitKey(void) {
 2361              		.loc 1 1450 30 is_stmt 1 view -0
 2362              		.cfi_startproc
 2363              		@ args = 0, pretend = 0, frame = 0
 2364              		@ frame_needed = 0, uses_anonymous_args = 0
 2365 0000 08B5     		push	{r3, lr}
 2366              	.LCFI24:
 2367              		.cfi_def_cfa_offset 8
 2368              		.cfi_offset 3, -8
 2369              		.cfi_offset 14, -4
 2370              	.L140:
1451:RTT/SEGGER_RTT.c ****   int r;
 2371              		.loc 1 1451 3 discriminator 1 view .LVU692
1452:RTT/SEGGER_RTT.c **** 
1453:RTT/SEGGER_RTT.c ****   do {
 2372              		.loc 1 1453 3 discriminator 1 view .LVU693
1454:RTT/SEGGER_RTT.c ****     r = SEGGER_RTT_GetKey();
 2373              		.loc 1 1454 5 discriminator 1 view .LVU694
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 73


 2374              		.loc 1 1454 9 is_stmt 0 discriminator 1 view .LVU695
 2375 0002 FFF7FEFF 		bl	SEGGER_RTT_GetKey
 2376              	.LVL242:
1455:RTT/SEGGER_RTT.c ****   } while (r < 0);
 2377              		.loc 1 1455 11 is_stmt 1 discriminator 1 view .LVU696
 2378              		.loc 1 1455 3 is_stmt 0 discriminator 1 view .LVU697
 2379 0006 0028     		cmp	r0, #0
 2380              		.loc 1 1455 3 discriminator 1 view .LVU698
 2381 0008 FBDB     		blt	.L140
1456:RTT/SEGGER_RTT.c ****   return r;
1457:RTT/SEGGER_RTT.c **** }
 2382              		.loc 1 1457 1 view .LVU699
 2383 000a 08BD     		pop	{r3, pc}
 2384              		.cfi_endproc
 2385              	.LFE19:
 2387              		.section	.text.SEGGER_RTT_HasKey,"ax",%progbits
 2388              		.align	1
 2389              		.global	SEGGER_RTT_HasKey
 2390              		.syntax unified
 2391              		.thumb
 2392              		.thumb_func
 2393              		.fpu fpv4-sp-d16
 2395              	SEGGER_RTT_HasKey:
 2396              	.LFB20:
1458:RTT/SEGGER_RTT.c **** 
1459:RTT/SEGGER_RTT.c **** /*********************************************************************
1460:RTT/SEGGER_RTT.c **** *
1461:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_HasKey
1462:RTT/SEGGER_RTT.c **** *
1463:RTT/SEGGER_RTT.c **** *  Function description
1464:RTT/SEGGER_RTT.c **** *    Checks if at least one character for reading is available in the SEGGER RTT buffer.
1465:RTT/SEGGER_RTT.c **** *
1466:RTT/SEGGER_RTT.c **** *  Return value
1467:RTT/SEGGER_RTT.c **** *    == 0 -     No characters are available to read.
1468:RTT/SEGGER_RTT.c **** *    == 1 -     At least one character is available.
1469:RTT/SEGGER_RTT.c **** *
1470:RTT/SEGGER_RTT.c **** *  Notes
1471:RTT/SEGGER_RTT.c **** *    (1) This function is only specified for accesses to RTT buffer 0
1472:RTT/SEGGER_RTT.c **** */
1473:RTT/SEGGER_RTT.c **** int SEGGER_RTT_HasKey(void) {
 2397              		.loc 1 1473 29 is_stmt 1 view -0
 2398              		.cfi_startproc
 2399              		@ args = 0, pretend = 0, frame = 0
 2400              		@ frame_needed = 0, uses_anonymous_args = 0
 2401 0000 08B5     		push	{r3, lr}
 2402              	.LCFI25:
 2403              		.cfi_def_cfa_offset 8
 2404              		.cfi_offset 3, -8
 2405              		.cfi_offset 14, -4
1474:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 2406              		.loc 1 1474 3 view .LVU701
1475:RTT/SEGGER_RTT.c ****   unsigned RdOff;
 2407              		.loc 1 1475 3 view .LVU702
1476:RTT/SEGGER_RTT.c ****   int r;
 2408              		.loc 1 1476 3 view .LVU703
 2409              	.LBB22:
1477:RTT/SEGGER_RTT.c **** 
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 74


1478:RTT/SEGGER_RTT.c ****   INIT();
 2410              		.loc 1 1478 3 view .LVU704
 2411              		.loc 1 1478 3 view .LVU705
 2412              	.LVL243:
 2413              		.loc 1 1478 3 view .LVU706
 2414              		.loc 1 1478 3 view .LVU707
 2415 0002 074B     		ldr	r3, .L148
 2416 0004 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2417 0006 33B1     		cbz	r3, .L147
 2418              	.L143:
 2419              		.loc 1 1478 3 discriminator 3 view .LVU708
 2420              	.LBE22:
 2421              		.loc 1 1478 9 discriminator 3 view .LVU709
1479:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  // Ac
 2422              		.loc 1 1479 3 discriminator 3 view .LVU710
 2423              	.LVL244:
1480:RTT/SEGGER_RTT.c ****   RdOff = pRing->RdOff;
 2424              		.loc 1 1480 3 discriminator 3 view .LVU711
 2425              		.loc 1 1480 9 is_stmt 0 discriminator 3 view .LVU712
 2426 0008 054B     		ldr	r3, .L148
 2427 000a 1A6F     		ldr	r2, [r3, #112]
 2428              	.LVL245:
1481:RTT/SEGGER_RTT.c ****   if (RdOff != pRing->WrOff) {
 2429              		.loc 1 1481 3 is_stmt 1 discriminator 3 view .LVU713
 2430              		.loc 1 1481 21 is_stmt 0 discriminator 3 view .LVU714
 2431 000c DB6E     		ldr	r3, [r3, #108]
 2432              		.loc 1 1481 6 discriminator 3 view .LVU715
 2433 000e 9342     		cmp	r3, r2
 2434 0010 04D0     		beq	.L145
1482:RTT/SEGGER_RTT.c ****     r = 1;
 2435              		.loc 1 1482 7 view .LVU716
 2436 0012 0120     		movs	r0, #1
 2437              	.L142:
1483:RTT/SEGGER_RTT.c ****   } else {
1484:RTT/SEGGER_RTT.c ****     r = 0;
1485:RTT/SEGGER_RTT.c ****   }
1486:RTT/SEGGER_RTT.c ****   return r;
1487:RTT/SEGGER_RTT.c **** }
 2438              		.loc 1 1487 1 view .LVU717
 2439 0014 08BD     		pop	{r3, pc}
 2440              	.LVL246:
 2441              	.L147:
 2442              	.LBB23:
1478:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  // Ac
 2443              		.loc 1 1478 3 is_stmt 1 discriminator 1 view .LVU718
 2444 0016 FFF7FEFF 		bl	_DoInit
 2445              	.LVL247:
 2446 001a F5E7     		b	.L143
 2447              	.LVL248:
 2448              	.L145:
1478:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[0] + SEGGER_RTT_UNCACHED_OFF);  // Ac
 2449              		.loc 1 1478 3 is_stmt 0 discriminator 1 view .LVU719
 2450              	.LBE23:
1484:RTT/SEGGER_RTT.c ****   }
 2451              		.loc 1 1484 7 view .LVU720
 2452 001c 0020     		movs	r0, #0
 2453              	.LVL249:
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 75


1486:RTT/SEGGER_RTT.c **** }
 2454              		.loc 1 1486 3 is_stmt 1 view .LVU721
1486:RTT/SEGGER_RTT.c **** }
 2455              		.loc 1 1486 10 is_stmt 0 view .LVU722
 2456 001e F9E7     		b	.L142
 2457              	.L149:
 2458              		.align	2
 2459              	.L148:
 2460 0020 00000000 		.word	_SEGGER_RTT
 2461              		.cfi_endproc
 2462              	.LFE20:
 2464              		.section	.text.SEGGER_RTT_HasData,"ax",%progbits
 2465              		.align	1
 2466              		.global	SEGGER_RTT_HasData
 2467              		.syntax unified
 2468              		.thumb
 2469              		.thumb_func
 2470              		.fpu fpv4-sp-d16
 2472              	SEGGER_RTT_HasData:
 2473              	.LVL250:
 2474              	.LFB21:
1488:RTT/SEGGER_RTT.c **** 
1489:RTT/SEGGER_RTT.c **** /*********************************************************************
1490:RTT/SEGGER_RTT.c **** *
1491:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_HasData
1492:RTT/SEGGER_RTT.c **** *
1493:RTT/SEGGER_RTT.c **** *  Function description
1494:RTT/SEGGER_RTT.c **** *    Check if there is data from the host in the given buffer.
1495:RTT/SEGGER_RTT.c **** *
1496:RTT/SEGGER_RTT.c **** *  Return value:
1497:RTT/SEGGER_RTT.c **** *  ==0:  No data
1498:RTT/SEGGER_RTT.c **** *  !=0:  Data in buffer
1499:RTT/SEGGER_RTT.c **** *
1500:RTT/SEGGER_RTT.c **** */
1501:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasData(unsigned BufferIndex) {
 2475              		.loc 1 1501 51 is_stmt 1 view -0
 2476              		.cfi_startproc
 2477              		@ args = 0, pretend = 0, frame = 0
 2478              		@ frame_needed = 0, uses_anonymous_args = 0
 2479              		@ link register save eliminated.
1502:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_DOWN* pRing;
 2480              		.loc 1 1502 3 view .LVU724
1503:RTT/SEGGER_RTT.c ****   unsigned                v;
 2481              		.loc 1 1503 3 view .LVU725
1504:RTT/SEGGER_RTT.c **** 
1505:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OF
 2482              		.loc 1 1505 3 view .LVU726
1506:RTT/SEGGER_RTT.c ****   v = pRing->WrOff;
 2483              		.loc 1 1506 3 view .LVU727
 2484              		.loc 1 1506 5 is_stmt 0 view .LVU728
 2485 0000 064B     		ldr	r3, .L151
 2486 0002 00EB4002 		add	r2, r0, r0, lsl #1
 2487 0006 03EBC202 		add	r2, r3, r2, lsl #3
 2488 000a D26E     		ldr	r2, [r2, #108]
 2489              	.LVL251:
1507:RTT/SEGGER_RTT.c ****   return v - pRing->RdOff;
 2490              		.loc 1 1507 3 is_stmt 1 view .LVU729
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 76


 2491              		.loc 1 1507 19 is_stmt 0 view .LVU730
 2492 000c 00EB4000 		add	r0, r0, r0, lsl #1
 2493              	.LVL252:
 2494              		.loc 1 1507 19 view .LVU731
 2495 0010 03EBC000 		add	r0, r3, r0, lsl #3
 2496 0014 006F     		ldr	r0, [r0, #112]
1508:RTT/SEGGER_RTT.c **** }
 2497              		.loc 1 1508 1 view .LVU732
 2498 0016 101A     		subs	r0, r2, r0
 2499 0018 7047     		bx	lr
 2500              	.L152:
 2501 001a 00BF     		.align	2
 2502              	.L151:
 2503 001c 00000000 		.word	_SEGGER_RTT
 2504              		.cfi_endproc
 2505              	.LFE21:
 2507              		.section	.text.SEGGER_RTT_HasDataUp,"ax",%progbits
 2508              		.align	1
 2509              		.global	SEGGER_RTT_HasDataUp
 2510              		.syntax unified
 2511              		.thumb
 2512              		.thumb_func
 2513              		.fpu fpv4-sp-d16
 2515              	SEGGER_RTT_HasDataUp:
 2516              	.LVL253:
 2517              	.LFB22:
1509:RTT/SEGGER_RTT.c **** 
1510:RTT/SEGGER_RTT.c **** /*********************************************************************
1511:RTT/SEGGER_RTT.c **** *
1512:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_HasDataUp
1513:RTT/SEGGER_RTT.c **** *
1514:RTT/SEGGER_RTT.c **** *  Function description
1515:RTT/SEGGER_RTT.c **** *    Check if there is data remaining to be sent in the given buffer.
1516:RTT/SEGGER_RTT.c **** *
1517:RTT/SEGGER_RTT.c **** *  Return value:
1518:RTT/SEGGER_RTT.c **** *  ==0:  No data
1519:RTT/SEGGER_RTT.c **** *  !=0:  Data in buffer
1520:RTT/SEGGER_RTT.c **** *
1521:RTT/SEGGER_RTT.c **** */
1522:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
 2518              		.loc 1 1522 53 is_stmt 1 view -0
 2519              		.cfi_startproc
 2520              		@ args = 0, pretend = 0, frame = 0
 2521              		@ frame_needed = 0, uses_anonymous_args = 0
 2522              		@ link register save eliminated.
1523:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 2523              		.loc 1 1523 3 view .LVU734
1524:RTT/SEGGER_RTT.c ****   unsigned                v;
 2524              		.loc 1 1524 3 view .LVU735
1525:RTT/SEGGER_RTT.c **** 
1526:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 2525              		.loc 1 1526 3 view .LVU736
1527:RTT/SEGGER_RTT.c ****   v = pRing->RdOff;
 2526              		.loc 1 1527 3 view .LVU737
 2527              		.loc 1 1527 5 is_stmt 0 view .LVU738
 2528 0000 064B     		ldr	r3, .L154
 2529 0002 00EB4002 		add	r2, r0, r0, lsl #1
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 77


 2530 0006 03EBC202 		add	r2, r3, r2, lsl #3
 2531 000a 926A     		ldr	r2, [r2, #40]
 2532              	.LVL254:
1528:RTT/SEGGER_RTT.c ****   return pRing->WrOff - v;
 2533              		.loc 1 1528 3 is_stmt 1 view .LVU739
 2534              		.loc 1 1528 15 is_stmt 0 view .LVU740
 2535 000c 00EB4000 		add	r0, r0, r0, lsl #1
 2536              	.LVL255:
 2537              		.loc 1 1528 15 view .LVU741
 2538 0010 03EBC000 		add	r0, r3, r0, lsl #3
 2539 0014 406A     		ldr	r0, [r0, #36]
1529:RTT/SEGGER_RTT.c **** }
 2540              		.loc 1 1529 1 view .LVU742
 2541 0016 801A     		subs	r0, r0, r2
 2542 0018 7047     		bx	lr
 2543              	.L155:
 2544 001a 00BF     		.align	2
 2545              	.L154:
 2546 001c 00000000 		.word	_SEGGER_RTT
 2547              		.cfi_endproc
 2548              	.LFE22:
 2550              		.section	.text.SEGGER_RTT_AllocDownBuffer,"ax",%progbits
 2551              		.align	1
 2552              		.global	SEGGER_RTT_AllocDownBuffer
 2553              		.syntax unified
 2554              		.thumb
 2555              		.thumb_func
 2556              		.fpu fpv4-sp-d16
 2558              	SEGGER_RTT_AllocDownBuffer:
 2559              	.LVL256:
 2560              	.LFB23:
1530:RTT/SEGGER_RTT.c **** 
1531:RTT/SEGGER_RTT.c **** /*********************************************************************
1532:RTT/SEGGER_RTT.c **** *
1533:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_AllocDownBuffer
1534:RTT/SEGGER_RTT.c **** *
1535:RTT/SEGGER_RTT.c **** *  Function description
1536:RTT/SEGGER_RTT.c **** *    Run-time configuration of the next down-buffer (H->T).
1537:RTT/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1538:RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1539:RTT/SEGGER_RTT.c **** *
1540:RTT/SEGGER_RTT.c **** *  Parameters
1541:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1542:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1543:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1544:RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1545:RTT/SEGGER_RTT.c **** *
1546:RTT/SEGGER_RTT.c **** *  Return value
1547:RTT/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1548:RTT/SEGGER_RTT.c **** *     < 0 - Error
1549:RTT/SEGGER_RTT.c **** */
1550:RTT/SEGGER_RTT.c **** int SEGGER_RTT_AllocDownBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flag
 2561              		.loc 1 1550 103 is_stmt 1 view -0
 2562              		.cfi_startproc
 2563              		@ args = 0, pretend = 0, frame = 0
 2564              		@ frame_needed = 0, uses_anonymous_args = 0
 2565              		.loc 1 1550 103 is_stmt 0 view .LVU744
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 78


 2566 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 2567              	.LCFI26:
 2568              		.cfi_def_cfa_offset 32
 2569              		.cfi_offset 3, -32
 2570              		.cfi_offset 4, -28
 2571              		.cfi_offset 5, -24
 2572              		.cfi_offset 6, -20
 2573              		.cfi_offset 7, -16
 2574              		.cfi_offset 8, -12
 2575              		.cfi_offset 9, -8
 2576              		.cfi_offset 14, -4
 2577 0004 8146     		mov	r9, r0
 2578 0006 8846     		mov	r8, r1
 2579 0008 1746     		mov	r7, r2
 2580 000a 1E46     		mov	r6, r3
1551:RTT/SEGGER_RTT.c ****   int BufferIndex;
 2581              		.loc 1 1551 3 is_stmt 1 view .LVU745
1552:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2582              		.loc 1 1552 3 view .LVU746
 2583              	.LBB24:
1553:RTT/SEGGER_RTT.c **** 
1554:RTT/SEGGER_RTT.c ****   INIT();
 2584              		.loc 1 1554 3 view .LVU747
 2585              		.loc 1 1554 3 view .LVU748
 2586              	.LVL257:
 2587              		.loc 1 1554 3 view .LVU749
 2588              		.loc 1 1554 3 view .LVU750
 2589 000c 194B     		ldr	r3, .L164
 2590              	.LVL258:
 2591              		.loc 1 1554 3 is_stmt 0 view .LVU751
 2592 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2593 0010 4BB3     		cbz	r3, .L163
 2594              	.LVL259:
 2595              	.L157:
 2596              		.loc 1 1554 3 is_stmt 1 discriminator 3 view .LVU752
 2597              	.LBE24:
 2598              		.loc 1 1554 9 discriminator 3 view .LVU753
 2599              	.LBB25:
1555:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2600              		.loc 1 1555 3 discriminator 3 view .LVU754
 2601              		.loc 1 1555 3 discriminator 3 view .LVU755
 2602              		.syntax unified
 2603              	@ 1555 "RTT/SEGGER_RTT.c" 1
 2604 0012 EFF31182 		mrs   r2, basepri  
 2605 0016 4FF02001 		mov   r1, #32       
 2606 001a 81F31188 		msr   basepri, r1  
 2607              		
 2608              	@ 0 "" 2
 2609              	.LVL260:
 2610              		.loc 1 1555 20 discriminator 3 view .LVU756
1556:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2611              		.loc 1 1556 3 discriminator 3 view .LVU757
1557:RTT/SEGGER_RTT.c ****   BufferIndex = 0;
 2612              		.loc 1 1557 3 discriminator 3 view .LVU758
 2613              		.loc 1 1557 15 is_stmt 0 discriminator 3 view .LVU759
 2614              		.thumb
 2615              		.syntax unified
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 79


 2616 001e 0020     		movs	r0, #0
 2617              	.LVL261:
 2618              	.L159:
1558:RTT/SEGGER_RTT.c ****   do {
 2619              		.loc 1 1558 3 is_stmt 1 view .LVU760
1559:RTT/SEGGER_RTT.c ****     if (pRTTCB->aDown[BufferIndex].pBuffer == NULL) {
 2620              		.loc 1 1559 5 view .LVU761
 2621              		.loc 1 1559 35 is_stmt 0 view .LVU762
 2622 0020 00EB4004 		add	r4, r0, r0, lsl #1
 2623 0024 134D     		ldr	r5, .L164
 2624 0026 05EBC404 		add	r4, r5, r4, lsl #3
 2625 002a 636E     		ldr	r3, [r4, #100]
 2626              		.loc 1 1559 8 view .LVU763
 2627 002c 1BB1     		cbz	r3, .L158
1560:RTT/SEGGER_RTT.c ****       break;
1561:RTT/SEGGER_RTT.c ****     }
1562:RTT/SEGGER_RTT.c ****     BufferIndex++;
 2628              		.loc 1 1562 5 is_stmt 1 view .LVU764
 2629              		.loc 1 1562 16 is_stmt 0 view .LVU765
 2630 002e 0130     		adds	r0, r0, #1
 2631              	.LVL262:
1563:RTT/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumDownBuffers);
 2632              		.loc 1 1563 11 is_stmt 1 view .LVU766
 2633              		.loc 1 1563 32 is_stmt 0 view .LVU767
 2634 0030 6B69     		ldr	r3, [r5, #20]
 2635              		.loc 1 1563 3 view .LVU768
 2636 0032 8342     		cmp	r3, r0
 2637 0034 F4DC     		bgt	.L159
 2638              	.L158:
1564:RTT/SEGGER_RTT.c ****   if (BufferIndex < pRTTCB->MaxNumDownBuffers) {
 2639              		.loc 1 1564 3 is_stmt 1 view .LVU769
 2640              		.loc 1 1564 27 is_stmt 0 view .LVU770
 2641 0036 0F4B     		ldr	r3, .L164
 2642 0038 5B69     		ldr	r3, [r3, #20]
 2643              		.loc 1 1564 6 view .LVU771
 2644 003a 8342     		cmp	r3, r0
 2645 003c 16DD     		ble	.L161
1565:RTT/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].sName        = sName;
 2646              		.loc 1 1565 5 is_stmt 1 view .LVU772
 2647              		.loc 1 1565 45 is_stmt 0 view .LVU773
 2648 003e 00EB4003 		add	r3, r0, r0, lsl #1
 2649 0042 0C49     		ldr	r1, .L164
 2650 0044 01EBC303 		add	r3, r1, r3, lsl #3
 2651 0048 C3F86090 		str	r9, [r3, #96]
1566:RTT/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 2652              		.loc 1 1566 5 is_stmt 1 view .LVU774
 2653              		.loc 1 1566 45 is_stmt 0 view .LVU775
 2654 004c C3F86480 		str	r8, [r3, #100]
1567:RTT/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 2655              		.loc 1 1567 5 is_stmt 1 view .LVU776
 2656              		.loc 1 1567 45 is_stmt 0 view .LVU777
 2657 0050 9F66     		str	r7, [r3, #104]
1568:RTT/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 2658              		.loc 1 1568 5 is_stmt 1 view .LVU778
 2659              		.loc 1 1568 45 is_stmt 0 view .LVU779
 2660 0052 0021     		movs	r1, #0
 2661 0054 1967     		str	r1, [r3, #112]
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 80


1569:RTT/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 2662              		.loc 1 1569 5 is_stmt 1 view .LVU780
 2663              		.loc 1 1569 45 is_stmt 0 view .LVU781
 2664 0056 D966     		str	r1, [r3, #108]
1570:RTT/SEGGER_RTT.c ****     pRTTCB->aDown[BufferIndex].Flags        = Flags;
 2665              		.loc 1 1570 5 is_stmt 1 view .LVU782
 2666              		.loc 1 1570 45 is_stmt 0 view .LVU783
 2667 0058 5E67     		str	r6, [r3, #116]
1571:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2668              		.loc 1 1571 5 is_stmt 1 view .LVU784
 2669              		.syntax unified
 2670              	@ 1571 "RTT/SEGGER_RTT.c" 1
 2671 005a BFF35F8F 		dmb
 2672              	
 2673              	@ 0 "" 2
 2674              		.loc 1 1571 15 view .LVU785
 2675              	.LVL263:
 2676              		.thumb
 2677              		.syntax unified
 2678              	.L160:
1572:RTT/SEGGER_RTT.c ****   } else {
1573:RTT/SEGGER_RTT.c ****     BufferIndex = -1;
1574:RTT/SEGGER_RTT.c ****   }
1575:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2679              		.loc 1 1575 3 view .LVU786
 2680              		.syntax unified
 2681              	@ 1575 "RTT/SEGGER_RTT.c" 1
 2682 005e 82F31188 		msr   basepri, r2  
 2683              		
 2684              	@ 0 "" 2
 2685              		.thumb
 2686              		.syntax unified
 2687              	.LBE25:
 2688              		.loc 1 1575 22 view .LVU787
1576:RTT/SEGGER_RTT.c ****   return BufferIndex;
 2689              		.loc 1 1576 3 view .LVU788
1577:RTT/SEGGER_RTT.c **** }
 2690              		.loc 1 1577 1 is_stmt 0 view .LVU789
 2691 0062 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 2692              	.LVL264:
 2693              	.L163:
 2694              	.LBB26:
1554:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2695              		.loc 1 1554 3 is_stmt 1 discriminator 1 view .LVU790
 2696 0066 FFF7FEFF 		bl	_DoInit
 2697              	.LVL265:
1554:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2698              		.loc 1 1554 3 is_stmt 0 discriminator 1 view .LVU791
 2699 006a D2E7     		b	.L157
 2700              	.LVL266:
 2701              	.L161:
1554:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2702              		.loc 1 1554 3 discriminator 1 view .LVU792
 2703              	.LBE26:
 2704              	.LBB27:
1573:RTT/SEGGER_RTT.c ****   }
 2705              		.loc 1 1573 17 view .LVU793
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 81


 2706 006c 4FF0FF30 		mov	r0, #-1
 2707              	.LVL267:
1573:RTT/SEGGER_RTT.c ****   }
 2708              		.loc 1 1573 17 view .LVU794
 2709 0070 F5E7     		b	.L160
 2710              	.L165:
 2711 0072 00BF     		.align	2
 2712              	.L164:
 2713 0074 00000000 		.word	_SEGGER_RTT
 2714              	.LBE27:
 2715              		.cfi_endproc
 2716              	.LFE23:
 2718              		.section	.text.SEGGER_RTT_AllocUpBuffer,"ax",%progbits
 2719              		.align	1
 2720              		.global	SEGGER_RTT_AllocUpBuffer
 2721              		.syntax unified
 2722              		.thumb
 2723              		.thumb_func
 2724              		.fpu fpv4-sp-d16
 2726              	SEGGER_RTT_AllocUpBuffer:
 2727              	.LVL268:
 2728              	.LFB24:
1578:RTT/SEGGER_RTT.c **** 
1579:RTT/SEGGER_RTT.c **** /*********************************************************************
1580:RTT/SEGGER_RTT.c **** *
1581:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_AllocUpBuffer
1582:RTT/SEGGER_RTT.c **** *
1583:RTT/SEGGER_RTT.c **** *  Function description
1584:RTT/SEGGER_RTT.c **** *    Run-time configuration of the next up-buffer (T->H).
1585:RTT/SEGGER_RTT.c **** *    The next buffer, which is not used yet is configured.
1586:RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1587:RTT/SEGGER_RTT.c **** *
1588:RTT/SEGGER_RTT.c **** *  Parameters
1589:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1590:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1591:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1592:RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1593:RTT/SEGGER_RTT.c **** *
1594:RTT/SEGGER_RTT.c **** *  Return value
1595:RTT/SEGGER_RTT.c **** *    >= 0 - O.K. Buffer Index
1596:RTT/SEGGER_RTT.c **** *     < 0 - Error
1597:RTT/SEGGER_RTT.c **** */
1598:RTT/SEGGER_RTT.c **** int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags)
 2729              		.loc 1 1598 101 is_stmt 1 view -0
 2730              		.cfi_startproc
 2731              		@ args = 0, pretend = 0, frame = 0
 2732              		@ frame_needed = 0, uses_anonymous_args = 0
 2733              		.loc 1 1598 101 is_stmt 0 view .LVU796
 2734 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2735              	.LCFI27:
 2736              		.cfi_def_cfa_offset 24
 2737              		.cfi_offset 4, -24
 2738              		.cfi_offset 5, -20
 2739              		.cfi_offset 6, -16
 2740              		.cfi_offset 7, -12
 2741              		.cfi_offset 8, -8
 2742              		.cfi_offset 14, -4
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 82


 2743 0004 8046     		mov	r8, r0
 2744 0006 0F46     		mov	r7, r1
 2745 0008 1646     		mov	r6, r2
 2746 000a 1D46     		mov	r5, r3
1599:RTT/SEGGER_RTT.c ****   int BufferIndex;
 2747              		.loc 1 1599 3 is_stmt 1 view .LVU797
1600:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2748              		.loc 1 1600 3 view .LVU798
 2749              	.LBB28:
1601:RTT/SEGGER_RTT.c **** 
1602:RTT/SEGGER_RTT.c ****   INIT();
 2750              		.loc 1 1602 3 view .LVU799
 2751              		.loc 1 1602 3 view .LVU800
 2752              	.LVL269:
 2753              		.loc 1 1602 3 view .LVU801
 2754              		.loc 1 1602 3 view .LVU802
 2755 000c 1E4B     		ldr	r3, .L174
 2756              	.LVL270:
 2757              		.loc 1 1602 3 is_stmt 0 view .LVU803
 2758 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2759 0010 002B     		cmp	r3, #0
 2760 0012 32D0     		beq	.L173
 2761              	.LVL271:
 2762              	.L167:
 2763              		.loc 1 1602 3 is_stmt 1 discriminator 3 view .LVU804
 2764              	.LBE28:
 2765              		.loc 1 1602 9 discriminator 3 view .LVU805
 2766              	.LBB29:
1603:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2767              		.loc 1 1603 3 discriminator 3 view .LVU806
 2768              		.loc 1 1603 3 discriminator 3 view .LVU807
 2769              		.syntax unified
 2770              	@ 1603 "RTT/SEGGER_RTT.c" 1
 2771 0014 EFF31182 		mrs   r2, basepri  
 2772 0018 4FF02001 		mov   r1, #32       
 2773 001c 81F31188 		msr   basepri, r1  
 2774              		
 2775              	@ 0 "" 2
 2776              	.LVL272:
 2777              		.loc 1 1603 20 discriminator 3 view .LVU808
1604:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2778              		.loc 1 1604 3 discriminator 3 view .LVU809
1605:RTT/SEGGER_RTT.c ****   BufferIndex = 0;
 2779              		.loc 1 1605 3 discriminator 3 view .LVU810
 2780              		.loc 1 1605 15 is_stmt 0 discriminator 3 view .LVU811
 2781              		.thumb
 2782              		.syntax unified
 2783 0020 0020     		movs	r0, #0
 2784              	.LVL273:
 2785              	.L169:
1606:RTT/SEGGER_RTT.c ****   do {
 2786              		.loc 1 1606 3 is_stmt 1 view .LVU812
1607:RTT/SEGGER_RTT.c ****     if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 2787              		.loc 1 1607 5 view .LVU813
 2788              		.loc 1 1607 33 is_stmt 0 view .LVU814
 2789 0022 441C     		adds	r4, r0, #1
 2790 0024 04EB4404 		add	r4, r4, r4, lsl #1
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 83


 2791 0028 174B     		ldr	r3, .L174
 2792 002a 03EBC404 		add	r4, r3, r4, lsl #3
 2793 002e 6368     		ldr	r3, [r4, #4]
 2794              		.loc 1 1607 8 view .LVU815
 2795 0030 23B1     		cbz	r3, .L168
1608:RTT/SEGGER_RTT.c ****       break;
1609:RTT/SEGGER_RTT.c ****     }
1610:RTT/SEGGER_RTT.c ****     BufferIndex++;
 2796              		.loc 1 1610 5 is_stmt 1 view .LVU816
 2797              		.loc 1 1610 16 is_stmt 0 view .LVU817
 2798 0032 0130     		adds	r0, r0, #1
 2799              	.LVL274:
1611:RTT/SEGGER_RTT.c ****   } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 2800              		.loc 1 1611 11 is_stmt 1 view .LVU818
 2801              		.loc 1 1611 32 is_stmt 0 view .LVU819
 2802 0034 144B     		ldr	r3, .L174
 2803 0036 1B69     		ldr	r3, [r3, #16]
 2804              		.loc 1 1611 3 view .LVU820
 2805 0038 8342     		cmp	r3, r0
 2806 003a F2DC     		bgt	.L169
 2807              	.L168:
1612:RTT/SEGGER_RTT.c ****   if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 2808              		.loc 1 1612 3 is_stmt 1 view .LVU821
 2809              		.loc 1 1612 27 is_stmt 0 view .LVU822
 2810 003c 124B     		ldr	r3, .L174
 2811 003e 1B69     		ldr	r3, [r3, #16]
 2812              		.loc 1 1612 6 view .LVU823
 2813 0040 8342     		cmp	r3, r0
 2814 0042 1DDD     		ble	.L171
1613:RTT/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].sName        = sName;
 2815              		.loc 1 1613 5 is_stmt 1 view .LVU824
 2816              		.loc 1 1613 43 is_stmt 0 view .LVU825
 2817 0044 104B     		ldr	r3, .L174
 2818 0046 411C     		adds	r1, r0, #1
 2819 0048 01EB4104 		add	r4, r1, r1, lsl #1
 2820 004c E400     		lsls	r4, r4, #3
 2821 004e 43F80480 		str	r8, [r3, r4]
1614:RTT/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 2822              		.loc 1 1614 5 is_stmt 1 view .LVU826
 2823              		.loc 1 1614 43 is_stmt 0 view .LVU827
 2824 0052 01EB4101 		add	r1, r1, r1, lsl #1
 2825 0056 03EBC101 		add	r1, r3, r1, lsl #3
 2826 005a 4F60     		str	r7, [r1, #4]
1615:RTT/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 2827              		.loc 1 1615 5 is_stmt 1 view .LVU828
 2828              		.loc 1 1615 43 is_stmt 0 view .LVU829
 2829 005c 00EB4001 		add	r1, r0, r0, lsl #1
 2830 0060 03EBC103 		add	r3, r3, r1, lsl #3
 2831 0064 1E62     		str	r6, [r3, #32]
1616:RTT/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 2832              		.loc 1 1616 5 is_stmt 1 view .LVU830
 2833              		.loc 1 1616 43 is_stmt 0 view .LVU831
 2834 0066 0021     		movs	r1, #0
 2835 0068 9962     		str	r1, [r3, #40]
1617:RTT/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 2836              		.loc 1 1617 5 is_stmt 1 view .LVU832
 2837              		.loc 1 1617 43 is_stmt 0 view .LVU833
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 84


 2838 006a 5962     		str	r1, [r3, #36]
1618:RTT/SEGGER_RTT.c ****     pRTTCB->aUp[BufferIndex].Flags        = Flags;
 2839              		.loc 1 1618 5 is_stmt 1 view .LVU834
 2840              		.loc 1 1618 43 is_stmt 0 view .LVU835
 2841 006c DD62     		str	r5, [r3, #44]
1619:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 2842              		.loc 1 1619 5 is_stmt 1 view .LVU836
 2843              		.syntax unified
 2844              	@ 1619 "RTT/SEGGER_RTT.c" 1
 2845 006e BFF35F8F 		dmb
 2846              	
 2847              	@ 0 "" 2
 2848              		.loc 1 1619 15 view .LVU837
 2849              	.LVL275:
 2850              		.thumb
 2851              		.syntax unified
 2852              	.L170:
1620:RTT/SEGGER_RTT.c ****   } else {
1621:RTT/SEGGER_RTT.c ****     BufferIndex = -1;
1622:RTT/SEGGER_RTT.c ****   }
1623:RTT/SEGGER_RTT.c ****   SEGGER_RTT_UNLOCK();
 2853              		.loc 1 1623 3 view .LVU838
 2854              		.syntax unified
 2855              	@ 1623 "RTT/SEGGER_RTT.c" 1
 2856 0072 82F31188 		msr   basepri, r2  
 2857              		
 2858              	@ 0 "" 2
 2859              		.thumb
 2860              		.syntax unified
 2861              	.LBE29:
 2862              		.loc 1 1623 22 view .LVU839
1624:RTT/SEGGER_RTT.c ****   return BufferIndex;
 2863              		.loc 1 1624 3 view .LVU840
1625:RTT/SEGGER_RTT.c **** }
 2864              		.loc 1 1625 1 is_stmt 0 view .LVU841
 2865 0076 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 2866              	.LVL276:
 2867              	.L173:
 2868              	.LBB30:
1602:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2869              		.loc 1 1602 3 is_stmt 1 discriminator 1 view .LVU842
 2870 007a FFF7FEFF 		bl	_DoInit
 2871              	.LVL277:
1602:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2872              		.loc 1 1602 3 is_stmt 0 discriminator 1 view .LVU843
 2873 007e C9E7     		b	.L167
 2874              	.LVL278:
 2875              	.L171:
1602:RTT/SEGGER_RTT.c ****   SEGGER_RTT_LOCK();
 2876              		.loc 1 1602 3 discriminator 1 view .LVU844
 2877              	.LBE30:
 2878              	.LBB31:
1621:RTT/SEGGER_RTT.c ****   }
 2879              		.loc 1 1621 17 view .LVU845
 2880 0080 4FF0FF30 		mov	r0, #-1
 2881              	.LVL279:
1621:RTT/SEGGER_RTT.c ****   }
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 85


 2882              		.loc 1 1621 17 view .LVU846
 2883 0084 F5E7     		b	.L170
 2884              	.L175:
 2885 0086 00BF     		.align	2
 2886              	.L174:
 2887 0088 00000000 		.word	_SEGGER_RTT
 2888              	.LBE31:
 2889              		.cfi_endproc
 2890              	.LFE24:
 2892              		.section	.text.SEGGER_RTT_ConfigUpBuffer,"ax",%progbits
 2893              		.align	1
 2894              		.global	SEGGER_RTT_ConfigUpBuffer
 2895              		.syntax unified
 2896              		.thumb
 2897              		.thumb_func
 2898              		.fpu fpv4-sp-d16
 2900              	SEGGER_RTT_ConfigUpBuffer:
 2901              	.LVL280:
 2902              	.LFB25:
1626:RTT/SEGGER_RTT.c **** 
1627:RTT/SEGGER_RTT.c **** /*********************************************************************
1628:RTT/SEGGER_RTT.c **** *
1629:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigUpBuffer
1630:RTT/SEGGER_RTT.c **** *
1631:RTT/SEGGER_RTT.c **** *  Function description
1632:RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer (T->H).
1633:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1634:RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1635:RTT/SEGGER_RTT.c **** *
1636:RTT/SEGGER_RTT.c **** *  Parameters
1637:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1638:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1639:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1640:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1641:RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1642:RTT/SEGGER_RTT.c **** *
1643:RTT/SEGGER_RTT.c **** *  Return value
1644:RTT/SEGGER_RTT.c **** *    >= 0 - O.K.
1645:RTT/SEGGER_RTT.c **** *     < 0 - Error
1646:RTT/SEGGER_RTT.c **** *
1647:RTT/SEGGER_RTT.c **** *  Additional information
1648:RTT/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1649:RTT/SEGGER_RTT.c **** *    May only be called once per buffer.
1650:RTT/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1651:RTT/SEGGER_RTT.c **** */
1652:RTT/SEGGER_RTT.c **** int SEGGER_RTT_ConfigUpBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Buff
 2903              		.loc 1 1652 124 is_stmt 1 view -0
 2904              		.cfi_startproc
 2905              		@ args = 4, pretend = 0, frame = 0
 2906              		@ frame_needed = 0, uses_anonymous_args = 0
 2907              		.loc 1 1652 124 is_stmt 0 view .LVU848
 2908 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 2909              	.LCFI28:
 2910              		.cfi_def_cfa_offset 24
 2911              		.cfi_offset 4, -24
 2912              		.cfi_offset 5, -20
 2913              		.cfi_offset 6, -16
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 86


 2914              		.cfi_offset 7, -12
 2915              		.cfi_offset 8, -8
 2916              		.cfi_offset 14, -4
 2917 0004 0446     		mov	r4, r0
 2918 0006 8846     		mov	r8, r1
 2919 0008 1746     		mov	r7, r2
 2920 000a 1E46     		mov	r6, r3
1653:RTT/SEGGER_RTT.c ****   int r;
 2921              		.loc 1 1653 3 is_stmt 1 view .LVU849
1654:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 2922              		.loc 1 1654 3 view .LVU850
1655:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
 2923              		.loc 1 1655 3 view .LVU851
 2924              	.LBB32:
1656:RTT/SEGGER_RTT.c **** 
1657:RTT/SEGGER_RTT.c ****   INIT();
 2925              		.loc 1 1657 3 view .LVU852
 2926              		.loc 1 1657 3 view .LVU853
 2927              	.LVL281:
 2928              		.loc 1 1657 3 view .LVU854
 2929              		.loc 1 1657 3 view .LVU855
 2930 000c 184B     		ldr	r3, .L183
 2931              	.LVL282:
 2932              		.loc 1 1657 3 is_stmt 0 view .LVU856
 2933 000e 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 2934 0010 43B3     		cbz	r3, .L182
 2935              	.LVL283:
 2936              	.L177:
 2937              		.loc 1 1657 3 is_stmt 1 discriminator 3 view .LVU857
 2938              	.LBE32:
 2939              		.loc 1 1657 9 discriminator 3 view .LVU858
1658:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 2940              		.loc 1 1658 3 discriminator 3 view .LVU859
1659:RTT/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 2941              		.loc 1 1659 3 discriminator 3 view .LVU860
 2942              		.loc 1 1659 6 is_stmt 0 discriminator 3 view .LVU861
 2943 0012 022C     		cmp	r4, #2
 2944 0014 29D8     		bhi	.L180
 2945              	.LBB33:
1660:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 2946              		.loc 1 1660 5 is_stmt 1 view .LVU862
 2947              		.loc 1 1660 5 view .LVU863
 2948              		.syntax unified
 2949              	@ 1660 "RTT/SEGGER_RTT.c" 1
 2950 0016 EFF31183 		mrs   r3, basepri  
 2951 001a 4FF02001 		mov   r1, #32       
 2952 001e 81F31188 		msr   basepri, r1  
 2953              		
 2954              	@ 0 "" 2
 2955              	.LVL284:
 2956              		.loc 1 1660 22 view .LVU864
1661:RTT/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 2957              		.loc 1 1661 5 view .LVU865
1662:RTT/SEGGER_RTT.c ****     if (BufferIndex) {
 2958              		.loc 1 1662 5 view .LVU866
 2959              		.loc 1 1662 8 is_stmt 0 view .LVU867
 2960              		.thumb
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 87


 2961              		.syntax unified
 2962 0022 9CB1     		cbz	r4, .L179
1663:RTT/SEGGER_RTT.c ****       pUp->sName        = sName;
 2963              		.loc 1 1663 7 is_stmt 1 view .LVU868
 2964              		.loc 1 1663 25 is_stmt 0 view .LVU869
 2965 0024 124D     		ldr	r5, .L183
 2966 0026 601C     		adds	r0, r4, #1
 2967 0028 00EB4002 		add	r2, r0, r0, lsl #1
 2968 002c D200     		lsls	r2, r2, #3
 2969 002e 45F80280 		str	r8, [r5, r2]
1664:RTT/SEGGER_RTT.c ****       pUp->pBuffer      = (char*)pBuffer;
 2970              		.loc 1 1664 7 is_stmt 1 view .LVU870
 2971              		.loc 1 1664 25 is_stmt 0 view .LVU871
 2972 0032 00EB4000 		add	r0, r0, r0, lsl #1
 2973 0036 05EBC000 		add	r0, r5, r0, lsl #3
 2974 003a 4760     		str	r7, [r0, #4]
1665:RTT/SEGGER_RTT.c ****       pUp->SizeOfBuffer = BufferSize;
 2975              		.loc 1 1665 7 is_stmt 1 view .LVU872
 2976              		.loc 1 1665 25 is_stmt 0 view .LVU873
 2977 003c 04EB4402 		add	r2, r4, r4, lsl #1
 2978 0040 05EBC202 		add	r2, r5, r2, lsl #3
 2979 0044 1662     		str	r6, [r2, #32]
1666:RTT/SEGGER_RTT.c ****       pUp->RdOff        = 0u;
 2980              		.loc 1 1666 7 is_stmt 1 view .LVU874
 2981              		.loc 1 1666 25 is_stmt 0 view .LVU875
 2982 0046 0021     		movs	r1, #0
 2983 0048 9162     		str	r1, [r2, #40]
1667:RTT/SEGGER_RTT.c ****       pUp->WrOff        = 0u;
 2984              		.loc 1 1667 7 is_stmt 1 view .LVU876
 2985              		.loc 1 1667 25 is_stmt 0 view .LVU877
 2986 004a 5162     		str	r1, [r2, #36]
 2987              	.L179:
1668:RTT/SEGGER_RTT.c ****     }
1669:RTT/SEGGER_RTT.c ****     pUp->Flags          = Flags;
 2988              		.loc 1 1669 5 is_stmt 1 view .LVU878
 2989              		.loc 1 1669 25 is_stmt 0 view .LVU879
 2990 004c 04EB4404 		add	r4, r4, r4, lsl #1
 2991              	.LVL285:
 2992              		.loc 1 1669 25 view .LVU880
 2993 0050 0748     		ldr	r0, .L183
 2994 0052 00EBC404 		add	r4, r0, r4, lsl #3
 2995 0056 069A     		ldr	r2, [sp, #24]
 2996 0058 E262     		str	r2, [r4, #44]
1670:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 2997              		.loc 1 1670 5 is_stmt 1 view .LVU881
 2998              		.syntax unified
 2999              	@ 1670 "RTT/SEGGER_RTT.c" 1
 3000 005a 83F31188 		msr   basepri, r3  
 3001              		
 3002              	@ 0 "" 2
 3003              		.thumb
 3004              		.syntax unified
 3005              	.LBE33:
 3006              		.loc 1 1670 24 view .LVU882
1671:RTT/SEGGER_RTT.c ****     r =  0;
 3007              		.loc 1 1671 5 view .LVU883
 3008              	.LVL286:
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 88


 3009              		.loc 1 1671 7 is_stmt 0 view .LVU884
 3010 005e 0020     		movs	r0, #0
 3011              	.LVL287:
 3012              	.L176:
1672:RTT/SEGGER_RTT.c ****   } else {
1673:RTT/SEGGER_RTT.c ****     r = -1;
1674:RTT/SEGGER_RTT.c ****   }
1675:RTT/SEGGER_RTT.c ****   return r;
1676:RTT/SEGGER_RTT.c **** }
 3013              		.loc 1 1676 1 view .LVU885
 3014 0060 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3015              	.LVL288:
 3016              	.L182:
 3017              	.LBB34:
1657:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3018              		.loc 1 1657 3 is_stmt 1 discriminator 1 view .LVU886
 3019 0064 FFF7FEFF 		bl	_DoInit
 3020              	.LVL289:
1657:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3021              		.loc 1 1657 3 is_stmt 0 discriminator 1 view .LVU887
 3022 0068 D3E7     		b	.L177
 3023              	.LVL290:
 3024              	.L180:
1657:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3025              		.loc 1 1657 3 discriminator 1 view .LVU888
 3026              	.LBE34:
1673:RTT/SEGGER_RTT.c ****   }
 3027              		.loc 1 1673 7 view .LVU889
 3028 006a 4FF0FF30 		mov	r0, #-1
 3029              	.LVL291:
1675:RTT/SEGGER_RTT.c **** }
 3030              		.loc 1 1675 3 is_stmt 1 view .LVU890
1675:RTT/SEGGER_RTT.c **** }
 3031              		.loc 1 1675 10 is_stmt 0 view .LVU891
 3032 006e F7E7     		b	.L176
 3033              	.L184:
 3034              		.align	2
 3035              	.L183:
 3036 0070 00000000 		.word	_SEGGER_RTT
 3037              		.cfi_endproc
 3038              	.LFE25:
 3040              		.section	.text.SEGGER_RTT_ConfigDownBuffer,"ax",%progbits
 3041              		.align	1
 3042              		.global	SEGGER_RTT_ConfigDownBuffer
 3043              		.syntax unified
 3044              		.thumb
 3045              		.thumb_func
 3046              		.fpu fpv4-sp-d16
 3048              	SEGGER_RTT_ConfigDownBuffer:
 3049              	.LVL292:
 3050              	.LFB26:
1677:RTT/SEGGER_RTT.c **** 
1678:RTT/SEGGER_RTT.c **** /*********************************************************************
1679:RTT/SEGGER_RTT.c **** *
1680:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_ConfigDownBuffer
1681:RTT/SEGGER_RTT.c **** *
1682:RTT/SEGGER_RTT.c **** *  Function description
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 89


1683:RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific down-buffer (H->T).
1684:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1685:RTT/SEGGER_RTT.c **** *    This includes: Buffer address, size, name, flags, ...
1686:RTT/SEGGER_RTT.c **** *
1687:RTT/SEGGER_RTT.c **** *  Parameters
1688:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to configure.
1689:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1690:RTT/SEGGER_RTT.c **** *    pBuffer      Pointer to a buffer to be used.
1691:RTT/SEGGER_RTT.c **** *    BufferSize   Size of the buffer.
1692:RTT/SEGGER_RTT.c **** *    Flags        Operating modes. Define behavior if buffer is full (not enough space for entire m
1693:RTT/SEGGER_RTT.c **** *
1694:RTT/SEGGER_RTT.c **** *  Return value
1695:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1696:RTT/SEGGER_RTT.c **** *     < 0  Error
1697:RTT/SEGGER_RTT.c **** *
1698:RTT/SEGGER_RTT.c **** *  Additional information
1699:RTT/SEGGER_RTT.c **** *    Buffer 0 is configured on compile-time.
1700:RTT/SEGGER_RTT.c **** *    May only be called once per buffer.
1701:RTT/SEGGER_RTT.c **** *    Buffer name and flags can be reconfigured using the appropriate functions.
1702:RTT/SEGGER_RTT.c **** */
1703:RTT/SEGGER_RTT.c **** int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned Bu
 3051              		.loc 1 1703 126 is_stmt 1 view -0
 3052              		.cfi_startproc
 3053              		@ args = 4, pretend = 0, frame = 0
 3054              		@ frame_needed = 0, uses_anonymous_args = 0
 3055              		.loc 1 1703 126 is_stmt 0 view .LVU893
 3056 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 3057              	.LCFI29:
 3058              		.cfi_def_cfa_offset 24
 3059              		.cfi_offset 4, -24
 3060              		.cfi_offset 5, -20
 3061              		.cfi_offset 6, -16
 3062              		.cfi_offset 7, -12
 3063              		.cfi_offset 8, -8
 3064              		.cfi_offset 14, -4
 3065 0004 0446     		mov	r4, r0
 3066 0006 0F46     		mov	r7, r1
 3067 0008 1646     		mov	r6, r2
 3068 000a 9846     		mov	r8, r3
1704:RTT/SEGGER_RTT.c ****   int r;
 3069              		.loc 1 1704 3 is_stmt 1 view .LVU894
1705:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3070              		.loc 1 1705 3 view .LVU895
1706:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
 3071              		.loc 1 1706 3 view .LVU896
 3072              	.LBB35:
1707:RTT/SEGGER_RTT.c **** 
1708:RTT/SEGGER_RTT.c ****   INIT();
 3073              		.loc 1 1708 3 view .LVU897
 3074              		.loc 1 1708 3 view .LVU898
 3075              	.LVL293:
 3076              		.loc 1 1708 3 view .LVU899
 3077              		.loc 1 1708 3 view .LVU900
 3078 000c 1548     		ldr	r0, .L192
 3079              	.LVL294:
 3080              		.loc 1 1708 3 is_stmt 0 view .LVU901
 3081 000e 0078     		ldrb	r0, [r0]	@ zero_extendqisi2
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 90


 3082 0010 10B3     		cbz	r0, .L191
 3083              	.LVL295:
 3084              	.L186:
 3085              		.loc 1 1708 3 is_stmt 1 discriminator 3 view .LVU902
 3086              	.LBE35:
 3087              		.loc 1 1708 9 discriminator 3 view .LVU903
1709:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3088              		.loc 1 1709 3 discriminator 3 view .LVU904
1710:RTT/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3089              		.loc 1 1710 3 discriminator 3 view .LVU905
 3090              		.loc 1 1710 6 is_stmt 0 discriminator 3 view .LVU906
 3091 0012 022C     		cmp	r4, #2
 3092 0014 23D8     		bhi	.L189
 3093              	.LBB36:
1711:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3094              		.loc 1 1711 5 is_stmt 1 view .LVU907
 3095              		.loc 1 1711 5 view .LVU908
 3096              		.syntax unified
 3097              	@ 1711 "RTT/SEGGER_RTT.c" 1
 3098 0016 EFF31183 		mrs   r3, basepri  
 3099 001a 4FF02001 		mov   r1, #32       
 3100 001e 81F31188 		msr   basepri, r1  
 3101              		
 3102              	@ 0 "" 2
 3103              	.LVL296:
 3104              		.loc 1 1711 22 view .LVU909
1712:RTT/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3105              		.loc 1 1712 5 view .LVU910
1713:RTT/SEGGER_RTT.c ****     if (BufferIndex) {
 3106              		.loc 1 1713 5 view .LVU911
 3107              		.loc 1 1713 8 is_stmt 0 view .LVU912
 3108              		.thumb
 3109              		.syntax unified
 3110 0022 5CB1     		cbz	r4, .L188
1714:RTT/SEGGER_RTT.c ****       pDown->sName        = sName;
 3111              		.loc 1 1714 7 is_stmt 1 view .LVU913
 3112              		.loc 1 1714 27 is_stmt 0 view .LVU914
 3113 0024 04EB4400 		add	r0, r4, r4, lsl #1
 3114 0028 0E4D     		ldr	r5, .L192
 3115 002a 05EBC000 		add	r0, r5, r0, lsl #3
 3116 002e 0766     		str	r7, [r0, #96]
1715:RTT/SEGGER_RTT.c ****       pDown->pBuffer      = (char*)pBuffer;
 3117              		.loc 1 1715 7 is_stmt 1 view .LVU915
 3118              		.loc 1 1715 27 is_stmt 0 view .LVU916
 3119 0030 4666     		str	r6, [r0, #100]
1716:RTT/SEGGER_RTT.c ****       pDown->SizeOfBuffer = BufferSize;
 3120              		.loc 1 1716 7 is_stmt 1 view .LVU917
 3121              		.loc 1 1716 27 is_stmt 0 view .LVU918
 3122 0032 C0F86880 		str	r8, [r0, #104]
1717:RTT/SEGGER_RTT.c ****       pDown->RdOff        = 0u;
 3123              		.loc 1 1717 7 is_stmt 1 view .LVU919
 3124              		.loc 1 1717 27 is_stmt 0 view .LVU920
 3125 0036 0022     		movs	r2, #0
 3126 0038 0267     		str	r2, [r0, #112]
1718:RTT/SEGGER_RTT.c ****       pDown->WrOff        = 0u;
 3127              		.loc 1 1718 7 is_stmt 1 view .LVU921
 3128              		.loc 1 1718 27 is_stmt 0 view .LVU922
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 91


 3129 003a C266     		str	r2, [r0, #108]
 3130              	.L188:
1719:RTT/SEGGER_RTT.c ****     }
1720:RTT/SEGGER_RTT.c ****     pDown->Flags          = Flags;
 3131              		.loc 1 1720 5 is_stmt 1 view .LVU923
 3132              		.loc 1 1720 27 is_stmt 0 view .LVU924
 3133 003c 04EB4404 		add	r4, r4, r4, lsl #1
 3134              	.LVL297:
 3135              		.loc 1 1720 27 view .LVU925
 3136 0040 0848     		ldr	r0, .L192
 3137 0042 00EBC404 		add	r4, r0, r4, lsl #3
 3138 0046 069A     		ldr	r2, [sp, #24]
 3139 0048 6267     		str	r2, [r4, #116]
1721:RTT/SEGGER_RTT.c ****     RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, 
 3140              		.loc 1 1721 5 is_stmt 1 view .LVU926
 3141              		.syntax unified
 3142              	@ 1721 "RTT/SEGGER_RTT.c" 1
 3143 004a BFF35F8F 		dmb
 3144              	
 3145              	@ 0 "" 2
 3146              		.loc 1 1721 15 view .LVU927
1722:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3147              		.loc 1 1722 5 view .LVU928
 3148              	@ 1722 "RTT/SEGGER_RTT.c" 1
 3149 004e 83F31188 		msr   basepri, r3  
 3150              		
 3151              	@ 0 "" 2
 3152              		.thumb
 3153              		.syntax unified
 3154              	.LBE36:
 3155              		.loc 1 1722 24 view .LVU929
1723:RTT/SEGGER_RTT.c ****     r =  0;
 3156              		.loc 1 1723 5 view .LVU930
 3157              	.LVL298:
 3158              		.loc 1 1723 7 is_stmt 0 view .LVU931
 3159 0052 0020     		movs	r0, #0
 3160              	.LVL299:
 3161              	.L185:
1724:RTT/SEGGER_RTT.c ****   } else {
1725:RTT/SEGGER_RTT.c ****     r = -1;
1726:RTT/SEGGER_RTT.c ****   }
1727:RTT/SEGGER_RTT.c ****   return r;
1728:RTT/SEGGER_RTT.c **** }
 3162              		.loc 1 1728 1 view .LVU932
 3163 0054 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 3164              	.LVL300:
 3165              	.L191:
 3166              	.LBB37:
1708:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3167              		.loc 1 1708 3 is_stmt 1 discriminator 1 view .LVU933
 3168 0058 FFF7FEFF 		bl	_DoInit
 3169              	.LVL301:
1708:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3170              		.loc 1 1708 3 is_stmt 0 discriminator 1 view .LVU934
 3171 005c D9E7     		b	.L186
 3172              	.LVL302:
 3173              	.L189:
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 92


1708:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3174              		.loc 1 1708 3 discriminator 1 view .LVU935
 3175              	.LBE37:
1725:RTT/SEGGER_RTT.c ****   }
 3176              		.loc 1 1725 7 view .LVU936
 3177 005e 4FF0FF30 		mov	r0, #-1
 3178              	.LVL303:
1727:RTT/SEGGER_RTT.c **** }
 3179              		.loc 1 1727 3 is_stmt 1 view .LVU937
1727:RTT/SEGGER_RTT.c **** }
 3180              		.loc 1 1727 10 is_stmt 0 view .LVU938
 3181 0062 F7E7     		b	.L185
 3182              	.L193:
 3183              		.align	2
 3184              	.L192:
 3185 0064 00000000 		.word	_SEGGER_RTT
 3186              		.cfi_endproc
 3187              	.LFE26:
 3189              		.section	.text.SEGGER_RTT_SetNameUpBuffer,"ax",%progbits
 3190              		.align	1
 3191              		.global	SEGGER_RTT_SetNameUpBuffer
 3192              		.syntax unified
 3193              		.thumb
 3194              		.thumb_func
 3195              		.fpu fpv4-sp-d16
 3197              	SEGGER_RTT_SetNameUpBuffer:
 3198              	.LVL304:
 3199              	.LFB27:
1729:RTT/SEGGER_RTT.c **** 
1730:RTT/SEGGER_RTT.c **** /*********************************************************************
1731:RTT/SEGGER_RTT.c **** *
1732:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameUpBuffer
1733:RTT/SEGGER_RTT.c **** *
1734:RTT/SEGGER_RTT.c **** *  Function description
1735:RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific up-buffer name (T->H).
1736:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1737:RTT/SEGGER_RTT.c **** *
1738:RTT/SEGGER_RTT.c **** *  Parameters
1739:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1740:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1741:RTT/SEGGER_RTT.c **** *
1742:RTT/SEGGER_RTT.c **** *  Return value
1743:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1744:RTT/SEGGER_RTT.c **** *     < 0  Error
1745:RTT/SEGGER_RTT.c **** */
1746:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetNameUpBuffer(unsigned BufferIndex, const char* sName) {
 3200              		.loc 1 1746 73 is_stmt 1 view -0
 3201              		.cfi_startproc
 3202              		@ args = 0, pretend = 0, frame = 0
 3203              		@ frame_needed = 0, uses_anonymous_args = 0
 3204              		.loc 1 1746 73 is_stmt 0 view .LVU940
 3205 0000 38B5     		push	{r3, r4, r5, lr}
 3206              	.LCFI30:
 3207              		.cfi_def_cfa_offset 16
 3208              		.cfi_offset 3, -16
 3209              		.cfi_offset 4, -12
 3210              		.cfi_offset 5, -8
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 93


 3211              		.cfi_offset 14, -4
 3212 0002 0446     		mov	r4, r0
 3213 0004 0D46     		mov	r5, r1
1747:RTT/SEGGER_RTT.c ****   int r;
 3214              		.loc 1 1747 3 is_stmt 1 view .LVU941
1748:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3215              		.loc 1 1748 3 view .LVU942
1749:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
 3216              		.loc 1 1749 3 view .LVU943
 3217              	.LBB38:
1750:RTT/SEGGER_RTT.c **** 
1751:RTT/SEGGER_RTT.c ****   INIT();
 3218              		.loc 1 1751 3 view .LVU944
 3219              		.loc 1 1751 3 view .LVU945
 3220              	.LVL305:
 3221              		.loc 1 1751 3 view .LVU946
 3222              		.loc 1 1751 3 view .LVU947
 3223 0006 0D4B     		ldr	r3, .L200
 3224 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3225 000a 8BB1     		cbz	r3, .L199
 3226              	.LVL306:
 3227              	.L195:
 3228              		.loc 1 1751 3 discriminator 3 view .LVU948
 3229              	.LBE38:
 3230              		.loc 1 1751 9 discriminator 3 view .LVU949
1752:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3231              		.loc 1 1752 3 discriminator 3 view .LVU950
1753:RTT/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3232              		.loc 1 1753 3 discriminator 3 view .LVU951
 3233              		.loc 1 1753 6 is_stmt 0 discriminator 3 view .LVU952
 3234 000c 022C     		cmp	r4, #2
 3235 000e 12D8     		bhi	.L197
 3236              	.LBB39:
1754:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3237              		.loc 1 1754 5 is_stmt 1 view .LVU953
 3238              		.loc 1 1754 5 view .LVU954
 3239              		.syntax unified
 3240              	@ 1754 "RTT/SEGGER_RTT.c" 1
 3241 0010 EFF31183 		mrs   r3, basepri  
 3242 0014 4FF02001 		mov   r1, #32       
 3243 0018 81F31188 		msr   basepri, r1  
 3244              		
 3245              	@ 0 "" 2
 3246              	.LVL307:
 3247              		.loc 1 1754 22 view .LVU955
1755:RTT/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3248              		.loc 1 1755 5 view .LVU956
1756:RTT/SEGGER_RTT.c ****     pUp->sName = sName;
 3249              		.loc 1 1756 5 view .LVU957
 3250              		.loc 1 1756 16 is_stmt 0 view .LVU958
 3251              		.thumb
 3252              		.syntax unified
 3253 001c 0134     		adds	r4, r4, #1
 3254              	.LVL308:
 3255              		.loc 1 1756 16 view .LVU959
 3256 001e 04EB4404 		add	r4, r4, r4, lsl #1
 3257              	.LVL309:
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 94


 3258              		.loc 1 1756 16 view .LVU960
 3259 0022 E400     		lsls	r4, r4, #3
 3260 0024 054A     		ldr	r2, .L200
 3261 0026 1551     		str	r5, [r2, r4]
1757:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3262              		.loc 1 1757 5 is_stmt 1 view .LVU961
 3263              		.syntax unified
 3264              	@ 1757 "RTT/SEGGER_RTT.c" 1
 3265 0028 83F31188 		msr   basepri, r3  
 3266              		
 3267              	@ 0 "" 2
 3268              		.thumb
 3269              		.syntax unified
 3270              	.LBE39:
 3271              		.loc 1 1757 24 view .LVU962
1758:RTT/SEGGER_RTT.c ****     r =  0;
 3272              		.loc 1 1758 5 view .LVU963
 3273              	.LVL310:
 3274              		.loc 1 1758 7 is_stmt 0 view .LVU964
 3275 002c 0020     		movs	r0, #0
 3276              	.LVL311:
 3277              	.L194:
1759:RTT/SEGGER_RTT.c ****   } else {
1760:RTT/SEGGER_RTT.c ****     r = -1;
1761:RTT/SEGGER_RTT.c ****   }
1762:RTT/SEGGER_RTT.c ****   return r;
1763:RTT/SEGGER_RTT.c **** }
 3278              		.loc 1 1763 1 view .LVU965
 3279 002e 38BD     		pop	{r3, r4, r5, pc}
 3280              	.LVL312:
 3281              	.L199:
 3282              	.LBB40:
1751:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3283              		.loc 1 1751 3 is_stmt 1 discriminator 1 view .LVU966
 3284 0030 FFF7FEFF 		bl	_DoInit
 3285              	.LVL313:
1751:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3286              		.loc 1 1751 3 is_stmt 0 discriminator 1 view .LVU967
 3287 0034 EAE7     		b	.L195
 3288              	.LVL314:
 3289              	.L197:
1751:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3290              		.loc 1 1751 3 discriminator 1 view .LVU968
 3291              	.LBE40:
1760:RTT/SEGGER_RTT.c ****   }
 3292              		.loc 1 1760 7 view .LVU969
 3293 0036 4FF0FF30 		mov	r0, #-1
 3294              	.LVL315:
1762:RTT/SEGGER_RTT.c **** }
 3295              		.loc 1 1762 3 is_stmt 1 view .LVU970
1762:RTT/SEGGER_RTT.c **** }
 3296              		.loc 1 1762 10 is_stmt 0 view .LVU971
 3297 003a F8E7     		b	.L194
 3298              	.L201:
 3299              		.align	2
 3300              	.L200:
 3301 003c 00000000 		.word	_SEGGER_RTT
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 95


 3302              		.cfi_endproc
 3303              	.LFE27:
 3305              		.section	.text.SEGGER_RTT_SetNameDownBuffer,"ax",%progbits
 3306              		.align	1
 3307              		.global	SEGGER_RTT_SetNameDownBuffer
 3308              		.syntax unified
 3309              		.thumb
 3310              		.thumb_func
 3311              		.fpu fpv4-sp-d16
 3313              	SEGGER_RTT_SetNameDownBuffer:
 3314              	.LVL316:
 3315              	.LFB28:
1764:RTT/SEGGER_RTT.c **** 
1765:RTT/SEGGER_RTT.c **** /*********************************************************************
1766:RTT/SEGGER_RTT.c **** *
1767:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetNameDownBuffer
1768:RTT/SEGGER_RTT.c **** *
1769:RTT/SEGGER_RTT.c **** *  Function description
1770:RTT/SEGGER_RTT.c **** *    Run-time configuration of a specific Down-buffer name (T->H).
1771:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1772:RTT/SEGGER_RTT.c **** *
1773:RTT/SEGGER_RTT.c **** *  Parameters
1774:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1775:RTT/SEGGER_RTT.c **** *    sName        Pointer to a constant name string.
1776:RTT/SEGGER_RTT.c **** *
1777:RTT/SEGGER_RTT.c **** *  Return value
1778:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1779:RTT/SEGGER_RTT.c **** *     < 0  Error
1780:RTT/SEGGER_RTT.c **** */
1781:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetNameDownBuffer(unsigned BufferIndex, const char* sName) {
 3316              		.loc 1 1781 75 is_stmt 1 view -0
 3317              		.cfi_startproc
 3318              		@ args = 0, pretend = 0, frame = 0
 3319              		@ frame_needed = 0, uses_anonymous_args = 0
 3320              		.loc 1 1781 75 is_stmt 0 view .LVU973
 3321 0000 38B5     		push	{r3, r4, r5, lr}
 3322              	.LCFI31:
 3323              		.cfi_def_cfa_offset 16
 3324              		.cfi_offset 3, -16
 3325              		.cfi_offset 4, -12
 3326              		.cfi_offset 5, -8
 3327              		.cfi_offset 14, -4
 3328 0002 0446     		mov	r4, r0
 3329 0004 0D46     		mov	r5, r1
1782:RTT/SEGGER_RTT.c ****   int r;
 3330              		.loc 1 1782 3 is_stmt 1 view .LVU974
1783:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3331              		.loc 1 1783 3 view .LVU975
1784:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
 3332              		.loc 1 1784 3 view .LVU976
 3333              	.LBB41:
1785:RTT/SEGGER_RTT.c **** 
1786:RTT/SEGGER_RTT.c ****   INIT();
 3334              		.loc 1 1786 3 view .LVU977
 3335              		.loc 1 1786 3 view .LVU978
 3336              	.LVL317:
 3337              		.loc 1 1786 3 view .LVU979
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 96


 3338              		.loc 1 1786 3 view .LVU980
 3339 0006 0D4B     		ldr	r3, .L208
 3340 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3341 000a 8BB1     		cbz	r3, .L207
 3342              	.LVL318:
 3343              	.L203:
 3344              		.loc 1 1786 3 discriminator 3 view .LVU981
 3345              	.LBE41:
 3346              		.loc 1 1786 9 discriminator 3 view .LVU982
1787:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3347              		.loc 1 1787 3 discriminator 3 view .LVU983
1788:RTT/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3348              		.loc 1 1788 3 discriminator 3 view .LVU984
 3349              		.loc 1 1788 6 is_stmt 0 discriminator 3 view .LVU985
 3350 000c 022C     		cmp	r4, #2
 3351 000e 12D8     		bhi	.L205
 3352              	.LBB42:
1789:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3353              		.loc 1 1789 5 is_stmt 1 view .LVU986
 3354              		.loc 1 1789 5 view .LVU987
 3355              		.syntax unified
 3356              	@ 1789 "RTT/SEGGER_RTT.c" 1
 3357 0010 EFF31183 		mrs   r3, basepri  
 3358 0014 4FF02001 		mov   r1, #32       
 3359 0018 81F31188 		msr   basepri, r1  
 3360              		
 3361              	@ 0 "" 2
 3362              	.LVL319:
 3363              		.loc 1 1789 22 view .LVU988
1790:RTT/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3364              		.loc 1 1790 5 view .LVU989
1791:RTT/SEGGER_RTT.c ****     pDown->sName = sName;
 3365              		.loc 1 1791 5 view .LVU990
 3366              		.loc 1 1791 18 is_stmt 0 view .LVU991
 3367              		.thumb
 3368              		.syntax unified
 3369 001c 04EB4404 		add	r4, r4, r4, lsl #1
 3370              	.LVL320:
 3371              		.loc 1 1791 18 view .LVU992
 3372 0020 0648     		ldr	r0, .L208
 3373 0022 00EBC404 		add	r4, r0, r4, lsl #3
 3374 0026 2566     		str	r5, [r4, #96]
1792:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3375              		.loc 1 1792 5 is_stmt 1 view .LVU993
 3376              		.syntax unified
 3377              	@ 1792 "RTT/SEGGER_RTT.c" 1
 3378 0028 83F31188 		msr   basepri, r3  
 3379              		
 3380              	@ 0 "" 2
 3381              		.thumb
 3382              		.syntax unified
 3383              	.LBE42:
 3384              		.loc 1 1792 24 view .LVU994
1793:RTT/SEGGER_RTT.c ****     r =  0;
 3385              		.loc 1 1793 5 view .LVU995
 3386              	.LVL321:
 3387              		.loc 1 1793 7 is_stmt 0 view .LVU996
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 97


 3388 002c 0020     		movs	r0, #0
 3389              	.LVL322:
 3390              	.L202:
1794:RTT/SEGGER_RTT.c ****   } else {
1795:RTT/SEGGER_RTT.c ****     r = -1;
1796:RTT/SEGGER_RTT.c ****   }
1797:RTT/SEGGER_RTT.c ****   return r;
1798:RTT/SEGGER_RTT.c **** }
 3391              		.loc 1 1798 1 view .LVU997
 3392 002e 38BD     		pop	{r3, r4, r5, pc}
 3393              	.LVL323:
 3394              	.L207:
 3395              	.LBB43:
1786:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3396              		.loc 1 1786 3 is_stmt 1 discriminator 1 view .LVU998
 3397 0030 FFF7FEFF 		bl	_DoInit
 3398              	.LVL324:
1786:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3399              		.loc 1 1786 3 is_stmt 0 discriminator 1 view .LVU999
 3400 0034 EAE7     		b	.L203
 3401              	.LVL325:
 3402              	.L205:
1786:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3403              		.loc 1 1786 3 discriminator 1 view .LVU1000
 3404              	.LBE43:
1795:RTT/SEGGER_RTT.c ****   }
 3405              		.loc 1 1795 7 view .LVU1001
 3406 0036 4FF0FF30 		mov	r0, #-1
 3407              	.LVL326:
1797:RTT/SEGGER_RTT.c **** }
 3408              		.loc 1 1797 3 is_stmt 1 view .LVU1002
1797:RTT/SEGGER_RTT.c **** }
 3409              		.loc 1 1797 10 is_stmt 0 view .LVU1003
 3410 003a F8E7     		b	.L202
 3411              	.L209:
 3412              		.align	2
 3413              	.L208:
 3414 003c 00000000 		.word	_SEGGER_RTT
 3415              		.cfi_endproc
 3416              	.LFE28:
 3418              		.section	.text.SEGGER_RTT_SetFlagsUpBuffer,"ax",%progbits
 3419              		.align	1
 3420              		.global	SEGGER_RTT_SetFlagsUpBuffer
 3421              		.syntax unified
 3422              		.thumb
 3423              		.thumb_func
 3424              		.fpu fpv4-sp-d16
 3426              	SEGGER_RTT_SetFlagsUpBuffer:
 3427              	.LVL327:
 3428              	.LFB29:
1799:RTT/SEGGER_RTT.c **** 
1800:RTT/SEGGER_RTT.c **** /*********************************************************************
1801:RTT/SEGGER_RTT.c **** *
1802:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsUpBuffer
1803:RTT/SEGGER_RTT.c **** *
1804:RTT/SEGGER_RTT.c **** *  Function description
1805:RTT/SEGGER_RTT.c **** *    Run-time configuration of specific up-buffer flags (T->H).
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 98


1806:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1807:RTT/SEGGER_RTT.c **** *
1808:RTT/SEGGER_RTT.c **** *  Parameters
1809:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer.
1810:RTT/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1811:RTT/SEGGER_RTT.c **** *
1812:RTT/SEGGER_RTT.c **** *  Return value
1813:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1814:RTT/SEGGER_RTT.c **** *     < 0  Error
1815:RTT/SEGGER_RTT.c **** */
1816:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsUpBuffer(unsigned BufferIndex, unsigned Flags) {
 3429              		.loc 1 1816 71 is_stmt 1 view -0
 3430              		.cfi_startproc
 3431              		@ args = 0, pretend = 0, frame = 0
 3432              		@ frame_needed = 0, uses_anonymous_args = 0
 3433              		.loc 1 1816 71 is_stmt 0 view .LVU1005
 3434 0000 38B5     		push	{r3, r4, r5, lr}
 3435              	.LCFI32:
 3436              		.cfi_def_cfa_offset 16
 3437              		.cfi_offset 3, -16
 3438              		.cfi_offset 4, -12
 3439              		.cfi_offset 5, -8
 3440              		.cfi_offset 14, -4
 3441 0002 0446     		mov	r4, r0
 3442 0004 0D46     		mov	r5, r1
1817:RTT/SEGGER_RTT.c ****   int r;
 3443              		.loc 1 1817 3 is_stmt 1 view .LVU1006
1818:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3444              		.loc 1 1818 3 view .LVU1007
1819:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_UP* pUp;
 3445              		.loc 1 1819 3 view .LVU1008
 3446              	.LBB44:
1820:RTT/SEGGER_RTT.c **** 
1821:RTT/SEGGER_RTT.c ****   INIT();
 3447              		.loc 1 1821 3 view .LVU1009
 3448              		.loc 1 1821 3 view .LVU1010
 3449              	.LVL328:
 3450              		.loc 1 1821 3 view .LVU1011
 3451              		.loc 1 1821 3 view .LVU1012
 3452 0006 0D4B     		ldr	r3, .L216
 3453 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3454 000a 8BB1     		cbz	r3, .L215
 3455              	.LVL329:
 3456              	.L211:
 3457              		.loc 1 1821 3 discriminator 3 view .LVU1013
 3458              	.LBE44:
 3459              		.loc 1 1821 9 discriminator 3 view .LVU1014
1822:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3460              		.loc 1 1822 3 discriminator 3 view .LVU1015
1823:RTT/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_UP_BUFFERS) {
 3461              		.loc 1 1823 3 discriminator 3 view .LVU1016
 3462              		.loc 1 1823 6 is_stmt 0 discriminator 3 view .LVU1017
 3463 000c 022C     		cmp	r4, #2
 3464 000e 12D8     		bhi	.L213
 3465              	.LBB45:
1824:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3466              		.loc 1 1824 5 is_stmt 1 view .LVU1018
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 99


 3467              		.loc 1 1824 5 view .LVU1019
 3468              		.syntax unified
 3469              	@ 1824 "RTT/SEGGER_RTT.c" 1
 3470 0010 EFF31183 		mrs   r3, basepri  
 3471 0014 4FF02001 		mov   r1, #32       
 3472 0018 81F31188 		msr   basepri, r1  
 3473              		
 3474              	@ 0 "" 2
 3475              	.LVL330:
 3476              		.loc 1 1824 22 view .LVU1020
1825:RTT/SEGGER_RTT.c ****     pUp = &pRTTCB->aUp[BufferIndex];
 3477              		.loc 1 1825 5 view .LVU1021
1826:RTT/SEGGER_RTT.c ****     pUp->Flags = Flags;
 3478              		.loc 1 1826 5 view .LVU1022
 3479              		.loc 1 1826 16 is_stmt 0 view .LVU1023
 3480              		.thumb
 3481              		.syntax unified
 3482 001c 04EB4404 		add	r4, r4, r4, lsl #1
 3483              	.LVL331:
 3484              		.loc 1 1826 16 view .LVU1024
 3485 0020 0648     		ldr	r0, .L216
 3486 0022 00EBC404 		add	r4, r0, r4, lsl #3
 3487 0026 E562     		str	r5, [r4, #44]
1827:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3488              		.loc 1 1827 5 is_stmt 1 view .LVU1025
 3489              		.syntax unified
 3490              	@ 1827 "RTT/SEGGER_RTT.c" 1
 3491 0028 83F31188 		msr   basepri, r3  
 3492              		
 3493              	@ 0 "" 2
 3494              		.thumb
 3495              		.syntax unified
 3496              	.LBE45:
 3497              		.loc 1 1827 24 view .LVU1026
1828:RTT/SEGGER_RTT.c ****     r =  0;
 3498              		.loc 1 1828 5 view .LVU1027
 3499              	.LVL332:
 3500              		.loc 1 1828 7 is_stmt 0 view .LVU1028
 3501 002c 0020     		movs	r0, #0
 3502              	.LVL333:
 3503              	.L210:
1829:RTT/SEGGER_RTT.c ****   } else {
1830:RTT/SEGGER_RTT.c ****     r = -1;
1831:RTT/SEGGER_RTT.c ****   }
1832:RTT/SEGGER_RTT.c ****   return r;
1833:RTT/SEGGER_RTT.c **** }
 3504              		.loc 1 1833 1 view .LVU1029
 3505 002e 38BD     		pop	{r3, r4, r5, pc}
 3506              	.LVL334:
 3507              	.L215:
 3508              	.LBB46:
1821:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3509              		.loc 1 1821 3 is_stmt 1 discriminator 1 view .LVU1030
 3510 0030 FFF7FEFF 		bl	_DoInit
 3511              	.LVL335:
1821:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3512              		.loc 1 1821 3 is_stmt 0 discriminator 1 view .LVU1031
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 100


 3513 0034 EAE7     		b	.L211
 3514              	.LVL336:
 3515              	.L213:
1821:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3516              		.loc 1 1821 3 discriminator 1 view .LVU1032
 3517              	.LBE46:
1830:RTT/SEGGER_RTT.c ****   }
 3518              		.loc 1 1830 7 view .LVU1033
 3519 0036 4FF0FF30 		mov	r0, #-1
 3520              	.LVL337:
1832:RTT/SEGGER_RTT.c **** }
 3521              		.loc 1 1832 3 is_stmt 1 view .LVU1034
1832:RTT/SEGGER_RTT.c **** }
 3522              		.loc 1 1832 10 is_stmt 0 view .LVU1035
 3523 003a F8E7     		b	.L210
 3524              	.L217:
 3525              		.align	2
 3526              	.L216:
 3527 003c 00000000 		.word	_SEGGER_RTT
 3528              		.cfi_endproc
 3529              	.LFE29:
 3531              		.section	.text.SEGGER_RTT_SetFlagsDownBuffer,"ax",%progbits
 3532              		.align	1
 3533              		.global	SEGGER_RTT_SetFlagsDownBuffer
 3534              		.syntax unified
 3535              		.thumb
 3536              		.thumb_func
 3537              		.fpu fpv4-sp-d16
 3539              	SEGGER_RTT_SetFlagsDownBuffer:
 3540              	.LVL338:
 3541              	.LFB30:
1834:RTT/SEGGER_RTT.c **** 
1835:RTT/SEGGER_RTT.c **** /*********************************************************************
1836:RTT/SEGGER_RTT.c **** *
1837:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetFlagsDownBuffer
1838:RTT/SEGGER_RTT.c **** *
1839:RTT/SEGGER_RTT.c **** *  Function description
1840:RTT/SEGGER_RTT.c **** *    Run-time configuration of specific Down-buffer flags (T->H).
1841:RTT/SEGGER_RTT.c **** *    Buffer to be configured is specified by index.
1842:RTT/SEGGER_RTT.c **** *
1843:RTT/SEGGER_RTT.c **** *  Parameters
1844:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the buffer to renamed.
1845:RTT/SEGGER_RTT.c **** *    Flags        Flags to set for the buffer.
1846:RTT/SEGGER_RTT.c **** *
1847:RTT/SEGGER_RTT.c **** *  Return value
1848:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1849:RTT/SEGGER_RTT.c **** *     < 0  Error
1850:RTT/SEGGER_RTT.c **** */
1851:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetFlagsDownBuffer(unsigned BufferIndex, unsigned Flags) {
 3542              		.loc 1 1851 73 is_stmt 1 view -0
 3543              		.cfi_startproc
 3544              		@ args = 0, pretend = 0, frame = 0
 3545              		@ frame_needed = 0, uses_anonymous_args = 0
 3546              		.loc 1 1851 73 is_stmt 0 view .LVU1037
 3547 0000 38B5     		push	{r3, r4, r5, lr}
 3548              	.LCFI33:
 3549              		.cfi_def_cfa_offset 16
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 101


 3550              		.cfi_offset 3, -16
 3551              		.cfi_offset 4, -12
 3552              		.cfi_offset 5, -8
 3553              		.cfi_offset 14, -4
 3554 0002 0446     		mov	r4, r0
 3555 0004 0D46     		mov	r5, r1
1852:RTT/SEGGER_RTT.c ****   int r;
 3556              		.loc 1 1852 3 is_stmt 1 view .LVU1038
1853:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 3557              		.loc 1 1853 3 view .LVU1039
1854:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_BUFFER_DOWN* pDown;
 3558              		.loc 1 1854 3 view .LVU1040
 3559              	.LBB47:
1855:RTT/SEGGER_RTT.c **** 
1856:RTT/SEGGER_RTT.c ****   INIT();
 3560              		.loc 1 1856 3 view .LVU1041
 3561              		.loc 1 1856 3 view .LVU1042
 3562              	.LVL339:
 3563              		.loc 1 1856 3 view .LVU1043
 3564              		.loc 1 1856 3 view .LVU1044
 3565 0006 0D4B     		ldr	r3, .L224
 3566 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3567 000a 8BB1     		cbz	r3, .L223
 3568              	.LVL340:
 3569              	.L219:
 3570              		.loc 1 1856 3 discriminator 3 view .LVU1045
 3571              	.LBE47:
 3572              		.loc 1 1856 9 discriminator 3 view .LVU1046
1857:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3573              		.loc 1 1857 3 discriminator 3 view .LVU1047
1858:RTT/SEGGER_RTT.c ****   if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 3574              		.loc 1 1858 3 discriminator 3 view .LVU1048
 3575              		.loc 1 1858 6 is_stmt 0 discriminator 3 view .LVU1049
 3576 000c 022C     		cmp	r4, #2
 3577 000e 12D8     		bhi	.L221
 3578              	.LBB48:
1859:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
 3579              		.loc 1 1859 5 is_stmt 1 view .LVU1050
 3580              		.loc 1 1859 5 view .LVU1051
 3581              		.syntax unified
 3582              	@ 1859 "RTT/SEGGER_RTT.c" 1
 3583 0010 EFF31183 		mrs   r3, basepri  
 3584 0014 4FF02001 		mov   r1, #32       
 3585 0018 81F31188 		msr   basepri, r1  
 3586              		
 3587              	@ 0 "" 2
 3588              	.LVL341:
 3589              		.loc 1 1859 22 view .LVU1052
1860:RTT/SEGGER_RTT.c ****     pDown = &pRTTCB->aDown[BufferIndex];
 3590              		.loc 1 1860 5 view .LVU1053
1861:RTT/SEGGER_RTT.c ****     pDown->Flags = Flags;
 3591              		.loc 1 1861 5 view .LVU1054
 3592              		.loc 1 1861 18 is_stmt 0 view .LVU1055
 3593              		.thumb
 3594              		.syntax unified
 3595 001c 04EB4404 		add	r4, r4, r4, lsl #1
 3596              	.LVL342:
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 102


 3597              		.loc 1 1861 18 view .LVU1056
 3598 0020 0648     		ldr	r0, .L224
 3599 0022 00EBC404 		add	r4, r0, r4, lsl #3
 3600 0026 6567     		str	r5, [r4, #116]
1862:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3601              		.loc 1 1862 5 is_stmt 1 view .LVU1057
 3602              		.syntax unified
 3603              	@ 1862 "RTT/SEGGER_RTT.c" 1
 3604 0028 83F31188 		msr   basepri, r3  
 3605              		
 3606              	@ 0 "" 2
 3607              		.thumb
 3608              		.syntax unified
 3609              	.LBE48:
 3610              		.loc 1 1862 24 view .LVU1058
1863:RTT/SEGGER_RTT.c ****     r =  0;
 3611              		.loc 1 1863 5 view .LVU1059
 3612              	.LVL343:
 3613              		.loc 1 1863 7 is_stmt 0 view .LVU1060
 3614 002c 0020     		movs	r0, #0
 3615              	.LVL344:
 3616              	.L218:
1864:RTT/SEGGER_RTT.c ****   } else {
1865:RTT/SEGGER_RTT.c ****     r = -1;
1866:RTT/SEGGER_RTT.c ****   }
1867:RTT/SEGGER_RTT.c ****   return r;
1868:RTT/SEGGER_RTT.c **** }
 3617              		.loc 1 1868 1 view .LVU1061
 3618 002e 38BD     		pop	{r3, r4, r5, pc}
 3619              	.LVL345:
 3620              	.L223:
 3621              	.LBB49:
1856:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3622              		.loc 1 1856 3 is_stmt 1 discriminator 1 view .LVU1062
 3623 0030 FFF7FEFF 		bl	_DoInit
 3624              	.LVL346:
1856:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3625              		.loc 1 1856 3 is_stmt 0 discriminator 1 view .LVU1063
 3626 0034 EAE7     		b	.L219
 3627              	.LVL347:
 3628              	.L221:
1856:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 3629              		.loc 1 1856 3 discriminator 1 view .LVU1064
 3630              	.LBE49:
1865:RTT/SEGGER_RTT.c ****   }
 3631              		.loc 1 1865 7 view .LVU1065
 3632 0036 4FF0FF30 		mov	r0, #-1
 3633              	.LVL348:
1867:RTT/SEGGER_RTT.c **** }
 3634              		.loc 1 1867 3 is_stmt 1 view .LVU1066
1867:RTT/SEGGER_RTT.c **** }
 3635              		.loc 1 1867 10 is_stmt 0 view .LVU1067
 3636 003a F8E7     		b	.L218
 3637              	.L225:
 3638              		.align	2
 3639              	.L224:
 3640 003c 00000000 		.word	_SEGGER_RTT
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 103


 3641              		.cfi_endproc
 3642              	.LFE30:
 3644              		.section	.text.SEGGER_RTT_Init,"ax",%progbits
 3645              		.align	1
 3646              		.global	SEGGER_RTT_Init
 3647              		.syntax unified
 3648              		.thumb
 3649              		.thumb_func
 3650              		.fpu fpv4-sp-d16
 3652              	SEGGER_RTT_Init:
 3653              	.LFB31:
1869:RTT/SEGGER_RTT.c **** 
1870:RTT/SEGGER_RTT.c **** /*********************************************************************
1871:RTT/SEGGER_RTT.c **** *
1872:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_Init
1873:RTT/SEGGER_RTT.c **** *
1874:RTT/SEGGER_RTT.c **** *  Function description
1875:RTT/SEGGER_RTT.c **** *    Initializes the RTT Control Block.
1876:RTT/SEGGER_RTT.c **** *    Should be used in RAM targets, at start of the application.
1877:RTT/SEGGER_RTT.c **** *
1878:RTT/SEGGER_RTT.c **** */
1879:RTT/SEGGER_RTT.c **** void SEGGER_RTT_Init (void) {
 3654              		.loc 1 1879 29 is_stmt 1 view -0
 3655              		.cfi_startproc
 3656              		@ args = 0, pretend = 0, frame = 0
 3657              		@ frame_needed = 0, uses_anonymous_args = 0
 3658 0000 08B5     		push	{r3, lr}
 3659              	.LCFI34:
 3660              		.cfi_def_cfa_offset 8
 3661              		.cfi_offset 3, -8
 3662              		.cfi_offset 14, -4
1880:RTT/SEGGER_RTT.c ****   _DoInit();
 3663              		.loc 1 1880 3 view .LVU1069
 3664 0002 FFF7FEFF 		bl	_DoInit
 3665              	.LVL349:
1881:RTT/SEGGER_RTT.c **** }
 3666              		.loc 1 1881 1 is_stmt 0 view .LVU1070
 3667 0006 08BD     		pop	{r3, pc}
 3668              		.cfi_endproc
 3669              	.LFE31:
 3671              		.section	.text.SEGGER_RTT_SetTerminal,"ax",%progbits
 3672              		.align	1
 3673              		.global	SEGGER_RTT_SetTerminal
 3674              		.syntax unified
 3675              		.thumb
 3676              		.thumb_func
 3677              		.fpu fpv4-sp-d16
 3679              	SEGGER_RTT_SetTerminal:
 3680              	.LVL350:
 3681              	.LFB32:
1882:RTT/SEGGER_RTT.c **** 
1883:RTT/SEGGER_RTT.c **** /*********************************************************************
1884:RTT/SEGGER_RTT.c **** *
1885:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_SetTerminal
1886:RTT/SEGGER_RTT.c **** *
1887:RTT/SEGGER_RTT.c **** *  Function description
1888:RTT/SEGGER_RTT.c **** *    Sets the terminal to be used for output on channel 0.
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 104


1889:RTT/SEGGER_RTT.c **** *
1890:RTT/SEGGER_RTT.c **** *  Parameters
1891:RTT/SEGGER_RTT.c **** *    TerminalId  Index of the terminal.
1892:RTT/SEGGER_RTT.c **** *
1893:RTT/SEGGER_RTT.c **** *  Return value
1894:RTT/SEGGER_RTT.c **** *    >= 0  O.K.
1895:RTT/SEGGER_RTT.c **** *     < 0  Error (e.g. if RTT is configured for non-blocking mode and there was no space in the buf
1896:RTT/SEGGER_RTT.c **** *
1897:RTT/SEGGER_RTT.c **** *  Notes
1898:RTT/SEGGER_RTT.c **** *    (1) Buffer 0 is always reserved for terminal I/O, so we can use index 0 here, fixed
1899:RTT/SEGGER_RTT.c **** */
1900:RTT/SEGGER_RTT.c **** int SEGGER_RTT_SetTerminal (unsigned char TerminalId) {
 3682              		.loc 1 1900 55 is_stmt 1 view -0
 3683              		.cfi_startproc
 3684              		@ args = 0, pretend = 0, frame = 8
 3685              		@ frame_needed = 0, uses_anonymous_args = 0
 3686              		.loc 1 1900 55 is_stmt 0 view .LVU1072
 3687 0000 30B5     		push	{r4, r5, lr}
 3688              	.LCFI35:
 3689              		.cfi_def_cfa_offset 12
 3690              		.cfi_offset 4, -12
 3691              		.cfi_offset 5, -8
 3692              		.cfi_offset 14, -4
 3693 0002 83B0     		sub	sp, sp, #12
 3694              	.LCFI36:
 3695              		.cfi_def_cfa_offset 24
 3696 0004 0446     		mov	r4, r0
1901:RTT/SEGGER_RTT.c ****   unsigned char         ac[2];
 3697              		.loc 1 1901 3 is_stmt 1 view .LVU1073
1902:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 3698              		.loc 1 1902 3 view .LVU1074
1903:RTT/SEGGER_RTT.c ****   unsigned Avail;
 3699              		.loc 1 1903 3 view .LVU1075
1904:RTT/SEGGER_RTT.c ****   int r;
 3700              		.loc 1 1904 3 view .LVU1076
 3701              	.LBB50:
1905:RTT/SEGGER_RTT.c **** 
1906:RTT/SEGGER_RTT.c ****   INIT();
 3702              		.loc 1 1906 3 view .LVU1077
 3703              		.loc 1 1906 3 view .LVU1078
 3704              	.LVL351:
 3705              		.loc 1 1906 3 view .LVU1079
 3706              		.loc 1 1906 3 view .LVU1080
 3707 0006 1D4B     		ldr	r3, .L239
 3708 0008 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3709 000a FBB1     		cbz	r3, .L236
 3710              	.LVL352:
 3711              	.L229:
 3712              		.loc 1 1906 3 discriminator 3 view .LVU1081
 3713              	.LBE50:
 3714              		.loc 1 1906 9 discriminator 3 view .LVU1082
1907:RTT/SEGGER_RTT.c ****   r = 0;
 3715              		.loc 1 1907 3 discriminator 3 view .LVU1083
1908:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3716              		.loc 1 1908 3 discriminator 3 view .LVU1084
 3717              		.loc 1 1908 9 is_stmt 0 discriminator 3 view .LVU1085
 3718 000c FF23     		movs	r3, #255
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 105


 3719 000e 8DF80430 		strb	r3, [sp, #4]
1909:RTT/SEGGER_RTT.c ****   if (TerminalId < sizeof(_aTerminalId)) { // We only support a certain number of channels
 3720              		.loc 1 1909 3 is_stmt 1 discriminator 3 view .LVU1086
 3721              		.loc 1 1909 6 is_stmt 0 discriminator 3 view .LVU1087
 3722 0012 0F2C     		cmp	r4, #15
 3723 0014 2FD8     		bhi	.L233
1910:RTT/SEGGER_RTT.c ****     ac[1] = _aTerminalId[TerminalId];
 3724              		.loc 1 1910 5 is_stmt 1 view .LVU1088
 3725              		.loc 1 1910 25 is_stmt 0 view .LVU1089
 3726 0016 1A4B     		ldr	r3, .L239+4
 3727 0018 1B5D     		ldrb	r3, [r3, r4]	@ zero_extendqisi2
 3728              		.loc 1 1910 11 view .LVU1090
 3729 001a 8DF80530 		strb	r3, [sp, #5]
1911:RTT/SEGGER_RTT.c ****     pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Acce
 3730              		.loc 1 1911 5 is_stmt 1 view .LVU1091
 3731              	.LVL353:
 3732              	.LBB51:
1912:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();                     // Lock to make sure that no other task is writing into 
 3733              		.loc 1 1912 5 view .LVU1092
 3734              		.loc 1 1912 5 view .LVU1093
 3735              		.syntax unified
 3736              	@ 1912 "RTT/SEGGER_RTT.c" 1
 3737 001e EFF31185 		mrs   r5, basepri  
 3738 0022 4FF02001 		mov   r1, #32       
 3739 0026 81F31188 		msr   basepri, r1  
 3740              		
 3741              	@ 0 "" 2
 3742              	.LVL354:
 3743              		.loc 1 1912 22 view .LVU1094
1913:RTT/SEGGER_RTT.c ****     if ((pRing->Flags & SEGGER_RTT_MODE_MASK) == SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL) {
 3744              		.loc 1 1913 5 view .LVU1095
 3745              		.loc 1 1913 15 is_stmt 0 view .LVU1096
 3746              		.thumb
 3747              		.syntax unified
 3748 002a 144B     		ldr	r3, .L239
 3749 002c DB6A     		ldr	r3, [r3, #44]
 3750              		.loc 1 1913 23 view .LVU1097
 3751 002e 03F00303 		and	r3, r3, #3
 3752              		.loc 1 1913 8 view .LVU1098
 3753 0032 022B     		cmp	r3, #2
 3754 0034 0DD0     		beq	.L237
1914:RTT/SEGGER_RTT.c ****       _ActiveTerminal = TerminalId;
1915:RTT/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
1916:RTT/SEGGER_RTT.c ****     } else {                                                                            // Skipping
1917:RTT/SEGGER_RTT.c ****       Avail = _GetAvailWriteSpace(pRing);
 3755              		.loc 1 1917 7 is_stmt 1 view .LVU1099
 3756              		.loc 1 1917 15 is_stmt 0 view .LVU1100
 3757 0036 1348     		ldr	r0, .L239+8
 3758              	.LVL355:
 3759              		.loc 1 1917 15 view .LVU1101
 3760 0038 FFF7FEFF 		bl	_GetAvailWriteSpace
 3761              	.LVL356:
1918:RTT/SEGGER_RTT.c ****       if (Avail >= 2) {
 3762              		.loc 1 1918 7 is_stmt 1 view .LVU1102
 3763              		.loc 1 1918 10 is_stmt 0 view .LVU1103
 3764 003c 0128     		cmp	r0, #1
 3765 003e 11D8     		bhi	.L238
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 106


1919:RTT/SEGGER_RTT.c ****         _ActiveTerminal = TerminalId;    // Only change active terminal in case of success
1920:RTT/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
1921:RTT/SEGGER_RTT.c ****       } else {
1922:RTT/SEGGER_RTT.c ****         r = -1;
 3766              		.loc 1 1922 11 view .LVU1104
 3767 0040 4FF0FF30 		mov	r0, #-1
 3768              	.LVL357:
 3769              	.L232:
1923:RTT/SEGGER_RTT.c ****       }
1924:RTT/SEGGER_RTT.c ****     }
1925:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3770              		.loc 1 1925 5 is_stmt 1 view .LVU1105
 3771              		.syntax unified
 3772              	@ 1925 "RTT/SEGGER_RTT.c" 1
 3773 0044 85F31188 		msr   basepri, r5  
 3774              		
 3775              	@ 0 "" 2
 3776              		.thumb
 3777              		.syntax unified
 3778              	.LBE51:
 3779              		.loc 1 1925 24 view .LVU1106
 3780              	.LVL358:
 3781              	.L228:
1926:RTT/SEGGER_RTT.c ****   } else {
1927:RTT/SEGGER_RTT.c ****     r = -1;
1928:RTT/SEGGER_RTT.c ****   }
1929:RTT/SEGGER_RTT.c ****   return r;
1930:RTT/SEGGER_RTT.c **** }
 3782              		.loc 1 1930 1 is_stmt 0 view .LVU1107
 3783 0048 03B0     		add	sp, sp, #12
 3784              	.LCFI37:
 3785              		.cfi_remember_state
 3786              		.cfi_def_cfa_offset 12
 3787              		@ sp needed
 3788 004a 30BD     		pop	{r4, r5, pc}
 3789              	.LVL359:
 3790              	.L236:
 3791              	.LCFI38:
 3792              		.cfi_restore_state
 3793              	.LBB52:
1906:RTT/SEGGER_RTT.c ****   r = 0;
 3794              		.loc 1 1906 3 is_stmt 1 discriminator 1 view .LVU1108
 3795 004c FFF7FEFF 		bl	_DoInit
 3796              	.LVL360:
1906:RTT/SEGGER_RTT.c ****   r = 0;
 3797              		.loc 1 1906 3 is_stmt 0 discriminator 1 view .LVU1109
 3798 0050 DCE7     		b	.L229
 3799              	.LVL361:
 3800              	.L237:
1906:RTT/SEGGER_RTT.c ****   r = 0;
 3801              		.loc 1 1906 3 discriminator 1 view .LVU1110
 3802              	.LBE52:
 3803              	.LBB53:
1914:RTT/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 3804              		.loc 1 1914 7 is_stmt 1 view .LVU1111
1914:RTT/SEGGER_RTT.c ****       _WriteBlocking(pRing, (const char*)ac, 2u);
 3805              		.loc 1 1914 23 is_stmt 0 view .LVU1112
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 107


 3806 0052 0D4B     		ldr	r3, .L239+12
 3807 0054 1C70     		strb	r4, [r3]
1915:RTT/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 3808              		.loc 1 1915 7 is_stmt 1 view .LVU1113
 3809 0056 0222     		movs	r2, #2
 3810 0058 01A9     		add	r1, sp, #4
 3811 005a 0A48     		ldr	r0, .L239+8
 3812              	.LVL362:
1915:RTT/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 3813              		.loc 1 1915 7 is_stmt 0 view .LVU1114
 3814 005c FFF7FEFF 		bl	_WriteBlocking
 3815              	.LVL363:
1915:RTT/SEGGER_RTT.c ****     } else {                                                                            // Skipping
 3816              		.loc 1 1915 7 view .LVU1115
 3817              	.LBE53:
1907:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3818              		.loc 1 1907 5 view .LVU1116
 3819 0060 0020     		movs	r0, #0
 3820              	.LBB54:
 3821 0062 EFE7     		b	.L232
 3822              	.LVL364:
 3823              	.L238:
1919:RTT/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3824              		.loc 1 1919 9 is_stmt 1 view .LVU1117
1919:RTT/SEGGER_RTT.c ****         _WriteNoCheck(pRing, (const char*)ac, 2u);
 3825              		.loc 1 1919 25 is_stmt 0 view .LVU1118
 3826 0064 084B     		ldr	r3, .L239+12
 3827 0066 1C70     		strb	r4, [r3]
1920:RTT/SEGGER_RTT.c ****       } else {
 3828              		.loc 1 1920 9 is_stmt 1 view .LVU1119
 3829 0068 0222     		movs	r2, #2
 3830 006a 01A9     		add	r1, sp, #4
 3831 006c 0548     		ldr	r0, .L239+8
 3832              	.LVL365:
1920:RTT/SEGGER_RTT.c ****       } else {
 3833              		.loc 1 1920 9 is_stmt 0 view .LVU1120
 3834 006e FFF7FEFF 		bl	_WriteNoCheck
 3835              	.LVL366:
1920:RTT/SEGGER_RTT.c ****       } else {
 3836              		.loc 1 1920 9 view .LVU1121
 3837              	.LBE54:
1907:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3838              		.loc 1 1907 5 view .LVU1122
 3839 0072 0020     		movs	r0, #0
 3840              	.LBB55:
 3841 0074 E6E7     		b	.L232
 3842              	.LVL367:
 3843              	.L233:
1907:RTT/SEGGER_RTT.c ****   ac[0] = 0xFFu;
 3844              		.loc 1 1907 5 view .LVU1123
 3845              	.LBE55:
1927:RTT/SEGGER_RTT.c ****   }
 3846              		.loc 1 1927 7 view .LVU1124
 3847 0076 4FF0FF30 		mov	r0, #-1
 3848              	.LVL368:
1929:RTT/SEGGER_RTT.c **** }
 3849              		.loc 1 1929 3 is_stmt 1 view .LVU1125
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 108


1929:RTT/SEGGER_RTT.c **** }
 3850              		.loc 1 1929 10 is_stmt 0 view .LVU1126
 3851 007a E5E7     		b	.L228
 3852              	.L240:
 3853              		.align	2
 3854              	.L239:
 3855 007c 00000000 		.word	_SEGGER_RTT
 3856 0080 00000000 		.word	.LANCHOR0
 3857 0084 18000000 		.word	_SEGGER_RTT+24
 3858 0088 00000000 		.word	.LANCHOR3
 3859              		.cfi_endproc
 3860              	.LFE32:
 3862              		.section	.text.SEGGER_RTT_TerminalOut,"ax",%progbits
 3863              		.align	1
 3864              		.global	SEGGER_RTT_TerminalOut
 3865              		.syntax unified
 3866              		.thumb
 3867              		.thumb_func
 3868              		.fpu fpv4-sp-d16
 3870              	SEGGER_RTT_TerminalOut:
 3871              	.LVL369:
 3872              	.LFB33:
1931:RTT/SEGGER_RTT.c **** 
1932:RTT/SEGGER_RTT.c **** /*********************************************************************
1933:RTT/SEGGER_RTT.c **** *
1934:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_TerminalOut
1935:RTT/SEGGER_RTT.c **** *
1936:RTT/SEGGER_RTT.c **** *  Function description
1937:RTT/SEGGER_RTT.c **** *    Writes a string to the given terminal
1938:RTT/SEGGER_RTT.c **** *     without changing the terminal for channel 0.
1939:RTT/SEGGER_RTT.c **** *
1940:RTT/SEGGER_RTT.c **** *  Parameters
1941:RTT/SEGGER_RTT.c **** *    TerminalId   Index of the terminal.
1942:RTT/SEGGER_RTT.c **** *    s            String to be printed on the terminal.
1943:RTT/SEGGER_RTT.c **** *
1944:RTT/SEGGER_RTT.c **** *  Return value
1945:RTT/SEGGER_RTT.c **** *    >= 0 - Number of bytes written.
1946:RTT/SEGGER_RTT.c **** *     < 0 - Error.
1947:RTT/SEGGER_RTT.c **** *
1948:RTT/SEGGER_RTT.c **** */
1949:RTT/SEGGER_RTT.c **** int SEGGER_RTT_TerminalOut (unsigned char TerminalId, const char* s) {
 3873              		.loc 1 1949 70 is_stmt 1 view -0
 3874              		.cfi_startproc
 3875              		@ args = 0, pretend = 0, frame = 0
 3876              		@ frame_needed = 0, uses_anonymous_args = 0
 3877              		.loc 1 1949 70 is_stmt 0 view .LVU1128
 3878 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 3879              	.LCFI39:
 3880              		.cfi_def_cfa_offset 32
 3881              		.cfi_offset 3, -32
 3882              		.cfi_offset 4, -28
 3883              		.cfi_offset 5, -24
 3884              		.cfi_offset 6, -20
 3885              		.cfi_offset 7, -16
 3886              		.cfi_offset 8, -12
 3887              		.cfi_offset 9, -8
 3888              		.cfi_offset 14, -4
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 109


 3889 0004 0446     		mov	r4, r0
 3890 0006 0D46     		mov	r5, r1
1950:RTT/SEGGER_RTT.c ****   int                   Status;
 3891              		.loc 1 1950 3 is_stmt 1 view .LVU1129
1951:RTT/SEGGER_RTT.c ****   unsigned              FragLen;
 3892              		.loc 1 1951 3 view .LVU1130
1952:RTT/SEGGER_RTT.c ****   unsigned              Avail;
 3893              		.loc 1 1952 3 view .LVU1131
1953:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 3894              		.loc 1 1953 3 view .LVU1132
 3895              	.LBB56:
1954:RTT/SEGGER_RTT.c ****   //
1955:RTT/SEGGER_RTT.c ****   INIT();
 3896              		.loc 1 1955 3 view .LVU1133
 3897              		.loc 1 1955 3 view .LVU1134
 3898              	.LVL370:
 3899              		.loc 1 1955 3 view .LVU1135
 3900              		.loc 1 1955 3 view .LVU1136
 3901 0008 344B     		ldr	r3, .L256
 3902 000a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 3903 000c FBB1     		cbz	r3, .L252
 3904              	.LVL371:
 3905              	.L242:
 3906              		.loc 1 1955 3 discriminator 3 view .LVU1137
 3907              	.LBE56:
 3908              		.loc 1 1955 9 discriminator 3 view .LVU1138
1956:RTT/SEGGER_RTT.c ****   //
1957:RTT/SEGGER_RTT.c ****   // Validate terminal ID.
1958:RTT/SEGGER_RTT.c ****   //
1959:RTT/SEGGER_RTT.c ****   if (TerminalId < (char)sizeof(_aTerminalId)) { // We only support a certain number of channels
 3909              		.loc 1 1959 3 discriminator 3 view .LVU1139
 3910              		.loc 1 1959 6 is_stmt 0 discriminator 3 view .LVU1140
 3911 000e 0F2C     		cmp	r4, #15
 3912 0010 61D8     		bhi	.L247
1960:RTT/SEGGER_RTT.c ****     //
1961:RTT/SEGGER_RTT.c ****     // Get "to-host" ring buffer.
1962:RTT/SEGGER_RTT.c ****     //
1963:RTT/SEGGER_RTT.c ****     pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[0] + SEGGER_RTT_UNCACHED_OFF);  // Acce
 3913              		.loc 1 1963 5 is_stmt 1 view .LVU1141
 3914              	.LVL372:
1964:RTT/SEGGER_RTT.c ****     //
1965:RTT/SEGGER_RTT.c ****     // Need to be able to change terminal, write data, change back.
1966:RTT/SEGGER_RTT.c ****     // Compute the fixed and variable sizes.
1967:RTT/SEGGER_RTT.c ****     //
1968:RTT/SEGGER_RTT.c ****     FragLen = STRLEN(s);
 3915              		.loc 1 1968 5 view .LVU1142
 3916              		.loc 1 1968 15 is_stmt 0 view .LVU1143
 3917 0012 2846     		mov	r0, r5
 3918 0014 FFF7FEFF 		bl	strlen
 3919              	.LVL373:
 3920 0018 8046     		mov	r8, r0
 3921              	.LVL374:
 3922              	.LBB57:
1969:RTT/SEGGER_RTT.c ****     //
1970:RTT/SEGGER_RTT.c ****     // How we output depends upon the mode...
1971:RTT/SEGGER_RTT.c ****     //
1972:RTT/SEGGER_RTT.c ****     SEGGER_RTT_LOCK();
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 110


 3923              		.loc 1 1972 5 is_stmt 1 view .LVU1144
 3924              		.loc 1 1972 5 view .LVU1145
 3925              		.syntax unified
 3926              	@ 1972 "RTT/SEGGER_RTT.c" 1
 3927 001a EFF31186 		mrs   r6, basepri  
 3928 001e 4FF02001 		mov   r1, #32       
 3929 0022 81F31188 		msr   basepri, r1  
 3930              		
 3931              	@ 0 "" 2
 3932              	.LVL375:
 3933              		.loc 1 1972 22 view .LVU1146
1973:RTT/SEGGER_RTT.c ****     Avail = _GetAvailWriteSpace(pRing);
 3934              		.loc 1 1973 5 view .LVU1147
 3935              		.loc 1 1973 13 is_stmt 0 view .LVU1148
 3936              		.thumb
 3937              		.syntax unified
 3938 0026 2E4F     		ldr	r7, .L256+4
 3939              	.LVL376:
 3940              		.loc 1 1973 13 view .LVU1149
 3941 0028 3846     		mov	r0, r7
 3942              	.LVL377:
 3943              		.loc 1 1973 13 view .LVU1150
 3944 002a FFF7FEFF 		bl	_GetAvailWriteSpace
 3945              	.LVL378:
 3946 002e 8146     		mov	r9, r0
 3947              	.LVL379:
1974:RTT/SEGGER_RTT.c ****     switch (pRing->Flags & SEGGER_RTT_MODE_MASK) {
 3948              		.loc 1 1974 5 is_stmt 1 view .LVU1151
 3949              		.loc 1 1974 18 is_stmt 0 view .LVU1152
 3950 0030 7B69     		ldr	r3, [r7, #20]
 3951              		.loc 1 1974 26 view .LVU1153
 3952 0032 03F00303 		and	r3, r3, #3
 3953              		.loc 1 1974 5 view .LVU1154
 3954 0036 012B     		cmp	r3, #1
 3955 0038 22D0     		beq	.L244
 3956 003a 022B     		cmp	r3, #2
 3957 003c 3AD0     		beq	.L245
 3958 003e 4BB1     		cbz	r3, .L253
 3959 0040 4FF0FF34 		mov	r4, #-1
 3960              	.LVL380:
 3961              	.L246:
1975:RTT/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
1976:RTT/SEGGER_RTT.c ****       //
1977:RTT/SEGGER_RTT.c ****       // If we are in skip mode and there is no space for the whole
1978:RTT/SEGGER_RTT.c ****       // of this output, don't bother switching terminals at all.
1979:RTT/SEGGER_RTT.c ****       //
1980:RTT/SEGGER_RTT.c ****       if (Avail < (FragLen + 4u)) {
1981:RTT/SEGGER_RTT.c ****         Status = 0;
1982:RTT/SEGGER_RTT.c ****       } else {
1983:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
1984:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
1985:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
1986:RTT/SEGGER_RTT.c ****       }
1987:RTT/SEGGER_RTT.c ****       break;
1988:RTT/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
1989:RTT/SEGGER_RTT.c ****       //
1990:RTT/SEGGER_RTT.c ****       // If we are in trim mode and there is not enough space for everything,
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 111


1991:RTT/SEGGER_RTT.c ****       // trim the output but always include the terminal switch.  If no room
1992:RTT/SEGGER_RTT.c ****       // for terminal switch, skip that totally.
1993:RTT/SEGGER_RTT.c ****       //
1994:RTT/SEGGER_RTT.c ****       if (Avail < 4u) {
1995:RTT/SEGGER_RTT.c ****         Status = -1;
1996:RTT/SEGGER_RTT.c ****       } else {
1997:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, TerminalId);
1998:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
1999:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
2000:RTT/SEGGER_RTT.c ****       }
2001:RTT/SEGGER_RTT.c ****       break;
2002:RTT/SEGGER_RTT.c ****     case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
2003:RTT/SEGGER_RTT.c ****       //
2004:RTT/SEGGER_RTT.c ****       // If we are in blocking mode, output everything.
2005:RTT/SEGGER_RTT.c ****       //
2006:RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, TerminalId);
2007:RTT/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
2008:RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
2009:RTT/SEGGER_RTT.c ****       break;
2010:RTT/SEGGER_RTT.c ****     default:
2011:RTT/SEGGER_RTT.c ****       Status = -1;
2012:RTT/SEGGER_RTT.c ****       break;
2013:RTT/SEGGER_RTT.c ****     }
2014:RTT/SEGGER_RTT.c ****     //
2015:RTT/SEGGER_RTT.c ****     // Finish up.
2016:RTT/SEGGER_RTT.c ****     //
2017:RTT/SEGGER_RTT.c ****     SEGGER_RTT_UNLOCK();
 3962              		.loc 1 2017 5 is_stmt 1 view .LVU1155
 3963              		.syntax unified
 3964              	@ 2017 "RTT/SEGGER_RTT.c" 1
 3965 0044 86F31188 		msr   basepri, r6  
 3966              		
 3967              	@ 0 "" 2
 3968              		.thumb
 3969              		.syntax unified
 3970              	.LBE57:
 3971              		.loc 1 2017 24 view .LVU1156
 3972              	.LVL381:
 3973              	.L241:
2018:RTT/SEGGER_RTT.c ****   } else {
2019:RTT/SEGGER_RTT.c ****     Status = -1;
2020:RTT/SEGGER_RTT.c ****   }
2021:RTT/SEGGER_RTT.c ****   return Status;
2022:RTT/SEGGER_RTT.c **** }
 3974              		.loc 1 2022 1 is_stmt 0 view .LVU1157
 3975 0048 2046     		mov	r0, r4
 3976 004a BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 3977              	.LVL382:
 3978              	.L252:
 3979              	.LBB58:
1955:RTT/SEGGER_RTT.c ****   //
 3980              		.loc 1 1955 3 is_stmt 1 discriminator 1 view .LVU1158
 3981 004e FFF7FEFF 		bl	_DoInit
 3982              	.LVL383:
1955:RTT/SEGGER_RTT.c ****   //
 3983              		.loc 1 1955 3 is_stmt 0 discriminator 1 view .LVU1159
 3984 0052 DCE7     		b	.L242
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 112


 3985              	.LVL384:
 3986              	.L253:
1955:RTT/SEGGER_RTT.c ****   //
 3987              		.loc 1 1955 3 discriminator 1 view .LVU1160
 3988              	.LBE58:
 3989              	.LBB59:
1980:RTT/SEGGER_RTT.c ****         Status = 0;
 3990              		.loc 1 1980 7 is_stmt 1 view .LVU1161
1980:RTT/SEGGER_RTT.c ****         Status = 0;
 3991              		.loc 1 1980 28 is_stmt 0 view .LVU1162
 3992 0054 08F10403 		add	r3, r8, #4
1980:RTT/SEGGER_RTT.c ****         Status = 0;
 3993              		.loc 1 1980 10 view .LVU1163
 3994 0058 8342     		cmp	r3, r0
 3995 005a 01D9     		bls	.L254
1981:RTT/SEGGER_RTT.c ****       } else {
 3996              		.loc 1 1981 16 view .LVU1164
 3997 005c 0024     		movs	r4, #0
 3998 005e F1E7     		b	.L246
 3999              	.L254:
1983:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 4000              		.loc 1 1983 9 is_stmt 1 view .LVU1165
 4001 0060 2146     		mov	r1, r4
 4002 0062 3846     		mov	r0, r7
 4003              	.LVL385:
1983:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, FragLen);
 4004              		.loc 1 1983 9 is_stmt 0 view .LVU1166
 4005 0064 FFF7FEFF 		bl	_PostTerminalSwitch
 4006              	.LVL386:
1984:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4007              		.loc 1 1984 9 is_stmt 1 view .LVU1167
1984:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4008              		.loc 1 1984 23 is_stmt 0 view .LVU1168
 4009 0068 4246     		mov	r2, r8
 4010 006a 2946     		mov	r1, r5
 4011 006c 3846     		mov	r0, r7
 4012 006e FFF7FEFF 		bl	_WriteBlocking
 4013              	.LVL387:
 4014 0072 0446     		mov	r4, r0
 4015              	.LVL388:
1985:RTT/SEGGER_RTT.c ****       }
 4016              		.loc 1 1985 9 is_stmt 1 view .LVU1169
 4017 0074 1B4B     		ldr	r3, .L256+8
 4018 0076 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4019 0078 3846     		mov	r0, r7
 4020              	.LVL389:
1985:RTT/SEGGER_RTT.c ****       }
 4021              		.loc 1 1985 9 is_stmt 0 view .LVU1170
 4022 007a FFF7FEFF 		bl	_PostTerminalSwitch
 4023              	.LVL390:
 4024 007e E1E7     		b	.L246
 4025              	.LVL391:
 4026              	.L244:
1994:RTT/SEGGER_RTT.c ****         Status = -1;
 4027              		.loc 1 1994 7 is_stmt 1 view .LVU1171
1994:RTT/SEGGER_RTT.c ****         Status = -1;
 4028              		.loc 1 1994 10 is_stmt 0 view .LVU1172
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 113


 4029 0080 0328     		cmp	r0, #3
 4030 0082 02D8     		bhi	.L255
1995:RTT/SEGGER_RTT.c ****       } else {
 4031              		.loc 1 1995 16 view .LVU1173
 4032 0084 4FF0FF34 		mov	r4, #-1
 4033 0088 DCE7     		b	.L246
 4034              	.L255:
1997:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 4035              		.loc 1 1997 9 is_stmt 1 view .LVU1174
 4036 008a 154F     		ldr	r7, .L256+4
1997:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 4037              		.loc 1 1997 9 is_stmt 0 view .LVU1175
 4038 008c 2146     		mov	r1, r4
 4039 008e 3846     		mov	r0, r7
 4040              	.LVL392:
1997:RTT/SEGGER_RTT.c ****         Status = (int)_WriteBlocking(pRing, s, (FragLen < (Avail - 4u)) ? FragLen : (Avail - 4u));
 4041              		.loc 1 1997 9 view .LVU1176
 4042 0090 FFF7FEFF 		bl	_PostTerminalSwitch
 4043              	.LVL393:
1998:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4044              		.loc 1 1998 9 is_stmt 1 view .LVU1177
1998:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4045              		.loc 1 1998 66 is_stmt 0 view .LVU1178
 4046 0094 A9F10402 		sub	r2, r9, #4
1998:RTT/SEGGER_RTT.c ****         _PostTerminalSwitch(pRing, _ActiveTerminal);
 4047              		.loc 1 1998 23 view .LVU1179
 4048 0098 4245     		cmp	r2, r8
 4049 009a 28BF     		it	cs
 4050 009c 4246     		movcs	r2, r8
 4051 009e 2946     		mov	r1, r5
 4052 00a0 3846     		mov	r0, r7
 4053 00a2 FFF7FEFF 		bl	_WriteBlocking
 4054              	.LVL394:
 4055 00a6 0446     		mov	r4, r0
 4056              	.LVL395:
1999:RTT/SEGGER_RTT.c ****       }
 4057              		.loc 1 1999 9 is_stmt 1 view .LVU1180
 4058 00a8 0E4B     		ldr	r3, .L256+8
 4059 00aa 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4060 00ac 3846     		mov	r0, r7
 4061              	.LVL396:
1999:RTT/SEGGER_RTT.c ****       }
 4062              		.loc 1 1999 9 is_stmt 0 view .LVU1181
 4063 00ae FFF7FEFF 		bl	_PostTerminalSwitch
 4064              	.LVL397:
 4065 00b2 C7E7     		b	.L246
 4066              	.LVL398:
 4067              	.L245:
2006:RTT/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 4068              		.loc 1 2006 7 is_stmt 1 view .LVU1182
 4069 00b4 0A4F     		ldr	r7, .L256+4
2006:RTT/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
 4070              		.loc 1 2006 7 is_stmt 0 view .LVU1183
 4071 00b6 2146     		mov	r1, r4
 4072 00b8 3846     		mov	r0, r7
 4073              	.LVL399:
2006:RTT/SEGGER_RTT.c ****       Status = (int)_WriteBlocking(pRing, s, FragLen);
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 114


 4074              		.loc 1 2006 7 view .LVU1184
 4075 00ba FFF7FEFF 		bl	_PostTerminalSwitch
 4076              	.LVL400:
2007:RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 4077              		.loc 1 2007 7 is_stmt 1 view .LVU1185
2007:RTT/SEGGER_RTT.c ****       _PostTerminalSwitch(pRing, _ActiveTerminal);
 4078              		.loc 1 2007 21 is_stmt 0 view .LVU1186
 4079 00be 4246     		mov	r2, r8
 4080 00c0 2946     		mov	r1, r5
 4081 00c2 3846     		mov	r0, r7
 4082 00c4 FFF7FEFF 		bl	_WriteBlocking
 4083              	.LVL401:
 4084 00c8 0446     		mov	r4, r0
 4085              	.LVL402:
2008:RTT/SEGGER_RTT.c ****       break;
 4086              		.loc 1 2008 7 is_stmt 1 view .LVU1187
 4087 00ca 064B     		ldr	r3, .L256+8
 4088 00cc 1978     		ldrb	r1, [r3]	@ zero_extendqisi2
 4089 00ce 3846     		mov	r0, r7
 4090              	.LVL403:
2008:RTT/SEGGER_RTT.c ****       break;
 4091              		.loc 1 2008 7 is_stmt 0 view .LVU1188
 4092 00d0 FFF7FEFF 		bl	_PostTerminalSwitch
 4093              	.LVL404:
2009:RTT/SEGGER_RTT.c ****     default:
 4094              		.loc 1 2009 7 is_stmt 1 view .LVU1189
 4095 00d4 B6E7     		b	.L246
 4096              	.LVL405:
 4097              	.L247:
2009:RTT/SEGGER_RTT.c ****     default:
 4098              		.loc 1 2009 7 is_stmt 0 view .LVU1190
 4099              	.LBE59:
2019:RTT/SEGGER_RTT.c ****   }
 4100              		.loc 1 2019 12 view .LVU1191
 4101 00d6 4FF0FF34 		mov	r4, #-1
 4102              	.LVL406:
2021:RTT/SEGGER_RTT.c **** }
 4103              		.loc 1 2021 3 is_stmt 1 view .LVU1192
2021:RTT/SEGGER_RTT.c **** }
 4104              		.loc 1 2021 10 is_stmt 0 view .LVU1193
 4105 00da B5E7     		b	.L241
 4106              	.L257:
 4107              		.align	2
 4108              	.L256:
 4109 00dc 00000000 		.word	_SEGGER_RTT
 4110 00e0 18000000 		.word	_SEGGER_RTT+24
 4111 00e4 00000000 		.word	.LANCHOR3
 4112              		.cfi_endproc
 4113              	.LFE33:
 4115              		.section	.text.SEGGER_RTT_GetAvailWriteSpace,"ax",%progbits
 4116              		.align	1
 4117              		.global	SEGGER_RTT_GetAvailWriteSpace
 4118              		.syntax unified
 4119              		.thumb
 4120              		.thumb_func
 4121              		.fpu fpv4-sp-d16
 4123              	SEGGER_RTT_GetAvailWriteSpace:
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 115


 4124              	.LVL407:
 4125              	.LFB34:
2023:RTT/SEGGER_RTT.c **** 
2024:RTT/SEGGER_RTT.c **** /*********************************************************************
2025:RTT/SEGGER_RTT.c **** *
2026:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_GetAvailWriteSpace
2027:RTT/SEGGER_RTT.c **** *
2028:RTT/SEGGER_RTT.c **** *  Function description
2029:RTT/SEGGER_RTT.c **** *    Returns the number of bytes available in the ring buffer.
2030:RTT/SEGGER_RTT.c **** *
2031:RTT/SEGGER_RTT.c **** *  Parameters
2032:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
2033:RTT/SEGGER_RTT.c **** *
2034:RTT/SEGGER_RTT.c **** *  Return value
2035:RTT/SEGGER_RTT.c **** *    Number of bytes that are free in the selected up buffer.
2036:RTT/SEGGER_RTT.c **** */
2037:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetAvailWriteSpace (unsigned BufferIndex) {
 4126              		.loc 1 2037 63 is_stmt 1 view -0
 4127              		.cfi_startproc
 4128              		@ args = 0, pretend = 0, frame = 0
 4129              		@ frame_needed = 0, uses_anonymous_args = 0
 4130              		.loc 1 2037 63 is_stmt 0 view .LVU1195
 4131 0000 08B5     		push	{r3, lr}
 4132              	.LCFI40:
 4133              		.cfi_def_cfa_offset 8
 4134              		.cfi_offset 3, -8
 4135              		.cfi_offset 14, -4
2038:RTT/SEGGER_RTT.c ****   SEGGER_RTT_BUFFER_UP* pRing;
 4136              		.loc 1 2038 3 is_stmt 1 view .LVU1196
2039:RTT/SEGGER_RTT.c **** 
2040:RTT/SEGGER_RTT.c ****   pRing = (SEGGER_RTT_BUFFER_UP*)((char*)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF); 
 4137              		.loc 1 2040 3 view .LVU1197
 4138              		.loc 1 2040 9 is_stmt 0 view .LVU1198
 4139 0002 0130     		adds	r0, r0, #1
 4140              	.LVL408:
 4141              		.loc 1 2040 9 view .LVU1199
 4142 0004 00EB4000 		add	r0, r0, r0, lsl #1
 4143              	.LVL409:
2041:RTT/SEGGER_RTT.c ****   return _GetAvailWriteSpace(pRing);
 4144              		.loc 1 2041 3 is_stmt 1 view .LVU1200
 4145              		.loc 1 2041 10 is_stmt 0 view .LVU1201
 4146 0008 024B     		ldr	r3, .L260
 4147 000a 03EBC000 		add	r0, r3, r0, lsl #3
 4148              	.LVL410:
 4149              		.loc 1 2041 10 view .LVU1202
 4150 000e FFF7FEFF 		bl	_GetAvailWriteSpace
 4151              	.LVL411:
2042:RTT/SEGGER_RTT.c **** }
 4152              		.loc 1 2042 1 view .LVU1203
 4153 0012 08BD     		pop	{r3, pc}
 4154              	.L261:
 4155              		.align	2
 4156              	.L260:
 4157 0014 00000000 		.word	_SEGGER_RTT
 4158              		.cfi_endproc
 4159              	.LFE34:
 4161              		.section	.text.SEGGER_RTT_GetBytesInBuffer,"ax",%progbits
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 116


 4162              		.align	1
 4163              		.global	SEGGER_RTT_GetBytesInBuffer
 4164              		.syntax unified
 4165              		.thumb
 4166              		.thumb_func
 4167              		.fpu fpv4-sp-d16
 4169              	SEGGER_RTT_GetBytesInBuffer:
 4170              	.LVL412:
 4171              	.LFB35:
2043:RTT/SEGGER_RTT.c **** 
2044:RTT/SEGGER_RTT.c **** 
2045:RTT/SEGGER_RTT.c **** /*********************************************************************
2046:RTT/SEGGER_RTT.c **** *
2047:RTT/SEGGER_RTT.c **** *       SEGGER_RTT_GetBytesInBuffer()
2048:RTT/SEGGER_RTT.c **** *
2049:RTT/SEGGER_RTT.c **** *  Function description
2050:RTT/SEGGER_RTT.c **** *    Returns the number of bytes currently used in the up buffer.
2051:RTT/SEGGER_RTT.c **** *
2052:RTT/SEGGER_RTT.c **** *  Parameters
2053:RTT/SEGGER_RTT.c **** *    BufferIndex  Index of the up buffer.
2054:RTT/SEGGER_RTT.c **** *
2055:RTT/SEGGER_RTT.c **** *  Return value
2056:RTT/SEGGER_RTT.c **** *    Number of bytes that are used in the buffer.
2057:RTT/SEGGER_RTT.c **** */
2058:RTT/SEGGER_RTT.c **** unsigned SEGGER_RTT_GetBytesInBuffer(unsigned BufferIndex) {
 4172              		.loc 1 2058 60 is_stmt 1 view -0
 4173              		.cfi_startproc
 4174              		@ args = 0, pretend = 0, frame = 0
 4175              		@ frame_needed = 0, uses_anonymous_args = 0
 4176              		@ link register save eliminated.
2059:RTT/SEGGER_RTT.c ****   unsigned RdOff;
 4177              		.loc 1 2059 3 view .LVU1205
2060:RTT/SEGGER_RTT.c ****   unsigned WrOff;
 4178              		.loc 1 2060 3 view .LVU1206
2061:RTT/SEGGER_RTT.c ****   unsigned r;
 4179              		.loc 1 2061 3 view .LVU1207
2062:RTT/SEGGER_RTT.c ****   volatile SEGGER_RTT_CB* pRTTCB;
 4180              		.loc 1 2062 3 view .LVU1208
2063:RTT/SEGGER_RTT.c ****   //
2064:RTT/SEGGER_RTT.c ****   // Avoid warnings regarding volatile access order.  It's not a problem
2065:RTT/SEGGER_RTT.c ****   // in this case, but dampen compiler enthusiasm.
2066:RTT/SEGGER_RTT.c ****   //
2067:RTT/SEGGER_RTT.c ****   pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // A
 4181              		.loc 1 2067 3 view .LVU1209
2068:RTT/SEGGER_RTT.c ****   RdOff = pRTTCB->aUp[BufferIndex].RdOff;
 4182              		.loc 1 2068 3 view .LVU1210
 4183              		.loc 1 2068 9 is_stmt 0 view .LVU1211
 4184 0000 00EB4002 		add	r2, r0, r0, lsl #1
 4185 0004 084B     		ldr	r3, .L265
 4186 0006 03EBC203 		add	r3, r3, r2, lsl #3
 4187 000a 9A6A     		ldr	r2, [r3, #40]
 4188              	.LVL413:
2069:RTT/SEGGER_RTT.c ****   WrOff = pRTTCB->aUp[BufferIndex].WrOff;
 4189              		.loc 1 2069 3 is_stmt 1 view .LVU1212
 4190              		.loc 1 2069 9 is_stmt 0 view .LVU1213
 4191 000c 5B6A     		ldr	r3, [r3, #36]
 4192              	.LVL414:
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 117


2070:RTT/SEGGER_RTT.c ****   if (RdOff <= WrOff) {
 4193              		.loc 1 2070 3 is_stmt 1 view .LVU1214
 4194              		.loc 1 2070 6 is_stmt 0 view .LVU1215
 4195 000e 9A42     		cmp	r2, r3
 4196 0010 01D8     		bhi	.L263
2071:RTT/SEGGER_RTT.c ****     r = WrOff - RdOff;
 4197              		.loc 1 2071 5 is_stmt 1 view .LVU1216
 4198              		.loc 1 2071 7 is_stmt 0 view .LVU1217
 4199 0012 981A     		subs	r0, r3, r2
 4200              	.LVL415:
 4201              		.loc 1 2071 7 view .LVU1218
 4202 0014 7047     		bx	lr
 4203              	.LVL416:
 4204              	.L263:
2072:RTT/SEGGER_RTT.c ****   } else {
2073:RTT/SEGGER_RTT.c ****     r = pRTTCB->aUp[BufferIndex].SizeOfBuffer - (WrOff - RdOff);
 4205              		.loc 1 2073 5 is_stmt 1 view .LVU1219
 4206              		.loc 1 2073 33 is_stmt 0 view .LVU1220
 4207 0016 00EB4000 		add	r0, r0, r0, lsl #1
 4208              	.LVL417:
 4209              		.loc 1 2073 33 view .LVU1221
 4210 001a 0349     		ldr	r1, .L265
 4211 001c 01EBC000 		add	r0, r1, r0, lsl #3
 4212 0020 006A     		ldr	r0, [r0, #32]
 4213              		.loc 1 2073 47 view .LVU1222
 4214 0022 D21A     		subs	r2, r2, r3
 4215              	.LVL418:
 4216              		.loc 1 2073 7 view .LVU1223
 4217 0024 1044     		add	r0, r0, r2
 4218              	.LVL419:
2074:RTT/SEGGER_RTT.c ****   }
2075:RTT/SEGGER_RTT.c ****   return r;
 4219              		.loc 1 2075 3 is_stmt 1 view .LVU1224
2076:RTT/SEGGER_RTT.c **** }
 4220              		.loc 1 2076 1 is_stmt 0 view .LVU1225
 4221 0026 7047     		bx	lr
 4222              	.L266:
 4223              		.align	2
 4224              	.L265:
 4225 0028 00000000 		.word	_SEGGER_RTT
 4226              		.cfi_endproc
 4227              	.LFE35:
 4229              		.comm	_SEGGER_RTT,168,4
 4230              		.section	.bss._ActiveTerminal,"aw",%nobits
 4231              		.set	.LANCHOR3,. + 0
 4234              	_ActiveTerminal:
 4235 0000 00       		.space	1
 4236              		.section	.bss._acDownBuffer,"aw",%nobits
 4237              		.align	2
 4238              		.set	.LANCHOR2,. + 0
 4241              	_acDownBuffer:
 4242 0000 00000000 		.space	16
 4242      00000000 
 4242      00000000 
 4242      00000000 
 4243              		.section	.bss._acUpBuffer,"aw",%nobits
 4244              		.align	2
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 118


 4245              		.set	.LANCHOR1,. + 0
 4248              	_acUpBuffer:
 4249 0000 00000000 		.space	1024
 4249      00000000 
 4249      00000000 
 4249      00000000 
 4249      00000000 
 4250              		.section	.rodata._aTerminalId,"a"
 4251              		.align	2
 4252              		.set	.LANCHOR0,. + 0
 4255              	_aTerminalId:
 4256 0000 30313233 		.ascii	"0123456789ABCDEF"
 4256      34353637 
 4256      38394142 
 4256      43444546 
 4257              		.text
 4258              	.Letext0:
 4259              		.file 2 "d:\\vs_code_stm32\\9 2019-q4-major\\arm-none-eabi\\include\\sys\\lock.h"
 4260              		.file 3 "d:\\vs_code_stm32\\9 2019-q4-major\\arm-none-eabi\\include\\sys\\_types.h"
 4261              		.file 4 "d:\\vs_code_stm32\\9 2019-q4-major\\lib\\gcc\\arm-none-eabi\\9.2.1\\include\\stddef.h"
 4262              		.file 5 "d:\\vs_code_stm32\\9 2019-q4-major\\arm-none-eabi\\include\\sys\\reent.h"
 4263              		.file 6 "d:\\vs_code_stm32\\9 2019-q4-major\\arm-none-eabi\\include\\stdlib.h"
 4264              		.file 7 "RTT/SEGGER_RTT.h"
 4265              		.file 8 "d:\\vs_code_stm32\\9 2019-q4-major\\arm-none-eabi\\include\\string.h"
 4266              		.file 9 "<built-in>"
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 119


DEFINED SYMBOLS
                            *ABS*:00000000 SEGGER_RTT.c
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:18     .text._GetAvailWriteSpace:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:25     .text._GetAvailWriteSpace:00000000 _GetAvailWriteSpace
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:79     .text._WriteNoCheck:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:85     .text._WriteNoCheck:00000000 _WriteNoCheck
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:201    .text._WriteBlocking:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:207    .text._WriteBlocking:00000000 _WriteBlocking
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:361    .text._PostTerminalSwitch:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:367    .text._PostTerminalSwitch:00000000 _PostTerminalSwitch
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:409    .text._PostTerminalSwitch:00000020 $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:414    .rodata._DoInit.str1.4:00000000 $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:424    .text._DoInit:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:430    .text._DoInit:00000000 _DoInit
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:535    .text._DoInit:00000054 $d
                            *COM*:000000a8 _SEGGER_RTT
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:545    .text.SEGGER_RTT_ReadUpBufferNoLock:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:552    .text.SEGGER_RTT_ReadUpBufferNoLock:00000000 SEGGER_RTT_ReadUpBufferNoLock
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:747    .text.SEGGER_RTT_ReadUpBufferNoLock:000000a8 $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:752    .text.SEGGER_RTT_ReadNoLock:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:759    .text.SEGGER_RTT_ReadNoLock:00000000 SEGGER_RTT_ReadNoLock
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:949    .text.SEGGER_RTT_ReadNoLock:0000009c $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:954    .text.SEGGER_RTT_ReadUpBuffer:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:961    .text.SEGGER_RTT_ReadUpBuffer:00000000 SEGGER_RTT_ReadUpBuffer
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:1013   .text.SEGGER_RTT_Read:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:1020   .text.SEGGER_RTT_Read:00000000 SEGGER_RTT_Read
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:1072   .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:1079   .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000000 SEGGER_RTT_WriteWithOverwriteNoLock
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:1334   .text.SEGGER_RTT_WriteWithOverwriteNoLock:00000114 $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:1339   .text.SEGGER_RTT_WriteDownBufferNoLock:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:1346   .text.SEGGER_RTT_WriteDownBufferNoLock:00000000 SEGGER_RTT_WriteDownBufferNoLock
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:1460   .text.SEGGER_RTT_WriteDownBufferNoLock:00000060 $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:1465   .text.SEGGER_RTT_WriteNoLock:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:1472   .text.SEGGER_RTT_WriteNoLock:00000000 SEGGER_RTT_WriteNoLock
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:1587   .text.SEGGER_RTT_WriteNoLock:00000068 $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:1592   .text.SEGGER_RTT_WriteDownBuffer:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:1599   .text.SEGGER_RTT_WriteDownBuffer:00000000 SEGGER_RTT_WriteDownBuffer
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:1679   .text.SEGGER_RTT_WriteDownBuffer:00000030 $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:1685   .text.SEGGER_RTT_Write:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:1692   .text.SEGGER_RTT_Write:00000000 SEGGER_RTT_Write
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:1772   .text.SEGGER_RTT_Write:00000030 $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:1778   .text.SEGGER_RTT_WriteString:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:1785   .text.SEGGER_RTT_WriteString:00000000 SEGGER_RTT_WriteString
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:1828   .text.SEGGER_RTT_PutCharSkipNoLock:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:1835   .text.SEGGER_RTT_PutCharSkipNoLock:00000000 SEGGER_RTT_PutCharSkipNoLock
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:1941   .text.SEGGER_RTT_PutCharSkipNoLock:00000050 $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:1946   .text.SEGGER_RTT_PutCharSkip:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:1953   .text.SEGGER_RTT_PutCharSkip:00000000 SEGGER_RTT_PutCharSkip
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2102   .text.SEGGER_RTT_PutCharSkip:00000070 $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2108   .text.SEGGER_RTT_PutChar:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2115   .text.SEGGER_RTT_PutChar:00000000 SEGGER_RTT_PutChar
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2287   .text.SEGGER_RTT_PutChar:00000094 $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2293   .text.SEGGER_RTT_GetKey:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2300   .text.SEGGER_RTT_GetKey:00000000 SEGGER_RTT_GetKey
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2352   .text.SEGGER_RTT_WaitKey:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2359   .text.SEGGER_RTT_WaitKey:00000000 SEGGER_RTT_WaitKey
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2388   .text.SEGGER_RTT_HasKey:00000000 $t
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 120


C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2395   .text.SEGGER_RTT_HasKey:00000000 SEGGER_RTT_HasKey
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2460   .text.SEGGER_RTT_HasKey:00000020 $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2465   .text.SEGGER_RTT_HasData:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2472   .text.SEGGER_RTT_HasData:00000000 SEGGER_RTT_HasData
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2503   .text.SEGGER_RTT_HasData:0000001c $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2508   .text.SEGGER_RTT_HasDataUp:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2515   .text.SEGGER_RTT_HasDataUp:00000000 SEGGER_RTT_HasDataUp
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2546   .text.SEGGER_RTT_HasDataUp:0000001c $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2551   .text.SEGGER_RTT_AllocDownBuffer:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2558   .text.SEGGER_RTT_AllocDownBuffer:00000000 SEGGER_RTT_AllocDownBuffer
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2713   .text.SEGGER_RTT_AllocDownBuffer:00000074 $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2719   .text.SEGGER_RTT_AllocUpBuffer:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2726   .text.SEGGER_RTT_AllocUpBuffer:00000000 SEGGER_RTT_AllocUpBuffer
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2887   .text.SEGGER_RTT_AllocUpBuffer:00000088 $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2893   .text.SEGGER_RTT_ConfigUpBuffer:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:2900   .text.SEGGER_RTT_ConfigUpBuffer:00000000 SEGGER_RTT_ConfigUpBuffer
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:3036   .text.SEGGER_RTT_ConfigUpBuffer:00000070 $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:3041   .text.SEGGER_RTT_ConfigDownBuffer:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:3048   .text.SEGGER_RTT_ConfigDownBuffer:00000000 SEGGER_RTT_ConfigDownBuffer
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:3185   .text.SEGGER_RTT_ConfigDownBuffer:00000064 $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:3190   .text.SEGGER_RTT_SetNameUpBuffer:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:3197   .text.SEGGER_RTT_SetNameUpBuffer:00000000 SEGGER_RTT_SetNameUpBuffer
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:3301   .text.SEGGER_RTT_SetNameUpBuffer:0000003c $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:3306   .text.SEGGER_RTT_SetNameDownBuffer:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:3313   .text.SEGGER_RTT_SetNameDownBuffer:00000000 SEGGER_RTT_SetNameDownBuffer
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:3414   .text.SEGGER_RTT_SetNameDownBuffer:0000003c $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:3419   .text.SEGGER_RTT_SetFlagsUpBuffer:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:3426   .text.SEGGER_RTT_SetFlagsUpBuffer:00000000 SEGGER_RTT_SetFlagsUpBuffer
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:3527   .text.SEGGER_RTT_SetFlagsUpBuffer:0000003c $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:3532   .text.SEGGER_RTT_SetFlagsDownBuffer:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:3539   .text.SEGGER_RTT_SetFlagsDownBuffer:00000000 SEGGER_RTT_SetFlagsDownBuffer
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:3640   .text.SEGGER_RTT_SetFlagsDownBuffer:0000003c $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:3645   .text.SEGGER_RTT_Init:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:3652   .text.SEGGER_RTT_Init:00000000 SEGGER_RTT_Init
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:3672   .text.SEGGER_RTT_SetTerminal:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:3679   .text.SEGGER_RTT_SetTerminal:00000000 SEGGER_RTT_SetTerminal
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:3855   .text.SEGGER_RTT_SetTerminal:0000007c $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:3863   .text.SEGGER_RTT_TerminalOut:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:3870   .text.SEGGER_RTT_TerminalOut:00000000 SEGGER_RTT_TerminalOut
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:4109   .text.SEGGER_RTT_TerminalOut:000000dc $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:4116   .text.SEGGER_RTT_GetAvailWriteSpace:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:4123   .text.SEGGER_RTT_GetAvailWriteSpace:00000000 SEGGER_RTT_GetAvailWriteSpace
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:4157   .text.SEGGER_RTT_GetAvailWriteSpace:00000014 $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:4162   .text.SEGGER_RTT_GetBytesInBuffer:00000000 $t
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:4169   .text.SEGGER_RTT_GetBytesInBuffer:00000000 SEGGER_RTT_GetBytesInBuffer
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:4225   .text.SEGGER_RTT_GetBytesInBuffer:00000028 $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:4234   .bss._ActiveTerminal:00000000 _ActiveTerminal
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:4235   .bss._ActiveTerminal:00000000 $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:4237   .bss._acDownBuffer:00000000 $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:4241   .bss._acDownBuffer:00000000 _acDownBuffer
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:4244   .bss._acUpBuffer:00000000 $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:4248   .bss._acUpBuffer:00000000 _acUpBuffer
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:4251   .rodata._aTerminalId:00000000 $d
C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s:4255   .rodata._aTerminalId:00000000 _aTerminalId

UNDEFINED SYMBOLS
memcpy
ARM GAS  C:\Users\Kiana\AppData\Local\Temp\cc06bUiI.s 			page 121


strlen
