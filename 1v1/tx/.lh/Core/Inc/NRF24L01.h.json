{
    "sourceFile": "Core/Inc/NRF24L01.h",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1624505436155,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1624505474661,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -83,9 +83,8 @@\n \r\n void NRF24L01_SPI_Init(void);\r\n void NRF24L01_RX_Mode(void);\t\t\t\t\t                             //配置为接收模式\r\n void NRF24L01_TX_Mode(void);\t\t\t\t\t                             //配置为发送模式\r\n-void NRF24L01_TX_Buff_Printf(uint8_t* tx_buff);                              //串口打印TX_BUFF\r\n uint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t uint8_ts);    //写数据区\r\n uint8_t NRF24L01_Read_Buf(uint8_t reg, uint8_t *pBuf, uint8_t uint8_ts);\t //读数据区\t\t  \r\n uint8_t NRF24L01_Read_Reg(uint8_t reg);\t\t\t\t\t                     //读寄存器\r\n uint8_t NRF24L01_Write_Reg(uint8_t reg, uint8_t value);\t\t                 //写寄存器\r\n"
                },
                {
                    "date": 1625144127094,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n /* 包含头文件 ----------------------------------------------------------------*/\r\n #include \"stm32f4xx_hal.h\"\r\n #include \"main.h\"\r\n #include \"usart.h\"\r\n+#include \"log.h\"\r\n \r\n /* 类型定义 ------------------------------------------------------------------*/\r\n /* 宏定义 --------------------------------------------------------------------*/\r\n #define NRF24L01_SPIx                                 SPI2\r\n"
                },
                {
                    "date": 1625144183655,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,11 +3,10 @@\n \r\n /* 包含头文件 ----------------------------------------------------------------*/\r\n #include \"stm32f4xx_hal.h\"\r\n #include \"main.h\"\r\n-#include \"usart.h\"\r\n-#include \"log.h\"\r\n \r\n+\r\n /* 类型定义 ------------------------------------------------------------------*/\r\n /* 宏定义 --------------------------------------------------------------------*/\r\n #define NRF24L01_SPIx                                 SPI2\r\n #define NRF24L01_SPIx_RCC_CLK_ENABLE()                __HAL_RCC_SPI2_CLK_ENABLE()\r\n"
                }
            ],
            "date": 1624505436155,
            "name": "Commit-0",
            "content": "#ifndef __NRF24L01_H__\r\n#define __NRF24L01_H__\r\n\r\n/* 包含头文件 ----------------------------------------------------------------*/\r\n#include \"stm32f4xx_hal.h\"\r\n#include \"main.h\"\r\n#include \"usart.h\"\r\n\r\n/* 类型定义 ------------------------------------------------------------------*/\r\n/* 宏定义 --------------------------------------------------------------------*/\r\n#define NRF24L01_SPIx                                 SPI2\r\n#define NRF24L01_SPIx_RCC_CLK_ENABLE()                __HAL_RCC_SPI2_CLK_ENABLE()\r\n#define NRF24L01_SPIx_RCC_CLK_DISABLE()               __HAL_RCC_SPI2_CLK_DISABLE()\r\n\r\n#define NRF24L01_SPI_GPIO_ClK_ENABLE()                __HAL_RCC_GPIOB_CLK_ENABLE() \r\n#define NRF24L01_SPI_GPIO_GPIO_PORT                   GPIOB\r\n\r\n\r\n#define NRF24L01_SPI_CS_CLK_ENABLE()                  __HAL_RCC_GPIOB_CLK_ENABLE() \r\n#define NRF24L01_SPI_CS_ENABLE()                      HAL_GPIO_WritePin(NRF24L01_CS_GPIO_Port, NRF24L01_CS_Pin, GPIO_PIN_RESET)\r\n#define NRF24L01_SPI_CS_DISABLE()                     HAL_GPIO_WritePin(NRF24L01_CS_GPIO_Port, NRF24L01_CS_Pin, GPIO_PIN_SET)\r\n\r\n#define NRF24L01_CE_CLK_ENABLE()                      __HAL_RCC_GPIOB_CLK_ENABLE()    \r\n#define NRF24L01_CE_LOW()                             HAL_GPIO_WritePin(NRF24L01_CE_GPIO_Port, NRF24L01_CE_Pin, GPIO_PIN_RESET)\r\n#define NRF24L01_CE_HIGH()                            HAL_GPIO_WritePin(NRF24L01_CE_GPIO_Port, NRF24L01_CE_Pin, GPIO_PIN_SET)\r\n\r\n#define NRF24L01_IRQ_CLK_ENABLE()                     __HAL_RCC_GPIOA_CLK_ENABLE()\r\n#define NRF24L01_IRQ_PIN_READ()                       HAL_GPIO_ReadPin(NRF24L01_IRQ_GPIO_Port,NRF24L01_IRQ_Pin)\r\n\r\n// NRF24L01发送接收数据宽度定义\r\n#define TX_ADR_WIDTH                                  5   \t//5字节的地址宽度\r\n#define RX_ADR_WIDTH                                  5   \t//5字节的地址宽度\r\n#define TX_PLOAD_WIDTH                                32  \t//32字节的用户数据宽度\r\n#define RX_PLOAD_WIDTH                                32  \t//32字节的用户数据宽度\r\n\r\n//NRF24L01寄存器操作命令\r\n#define NRF_READ_REG                                  0x00  //读配置寄存器,低5位为寄存器地址\r\n#define NRF_WRITE_REG                                 0x20  //写配置寄存器,低5位为寄存器地址\r\n#define RD_RX_PLOAD                                   0x61  //读RX有效数据,1~32字节\r\n#define WR_TX_PLOAD                                   0xA0  //写TX有效数据,1~32字节\r\n#define FLUSH_TX                                      0xE1  //清除TX FIFO寄存器.发射模式下用\r\n#define FLUSH_RX                                      0xE2  //清除RX FIFO寄存器.接收模式下用\r\n#define REUSE_TX_PL                                   0xE3  //重新使用上一包数据,CE为高,数据包被不断发送.\r\n#define NOP                                           0xFF  //空操作,可以用来读状态寄存器\t \r\n//SPI(NRF24L01)寄存器地址\r\n#define CONFIG                                        0x00  //配置寄存器地址;bit0:1接收模式,0发射模式;bit1:电选择;bit2:CRC模式;bit3:CRC使能;\r\n                                                            //bit4:中断MAX_RT(达到最大重发次数中断)使能;bit5:中断TX_DS使能;bit6:中断RX_DR使能\r\n#define EN_AA                                         0x01  //使能自动应答功能  bit0~5,对应通道0~5\r\n#define EN_RXADDR                                     0x02  //接收地址允许,bit0~5,对应通道0~5\r\n#define SETUP_AW                                      0x03  //设置地址宽度(所有数据通道):bit1,0:00,3字节;01,4字节;02,5字节;\r\n#define SETUP_RETR                                    0x04  //建立自动重发;bit3:0,自动重发计数器;bit7:4,自动重发延时 250*x+86us\r\n#define RF_CH                                         0x05  //RF通道,bit6:0,工作通道频率;\r\n#define RF_SETUP                                      0x06  //RF寄存器;bit3:传输速率(0:1Mbps,1:2Mbps);bit2:1,发射功率;bit0:低噪声放大器增益\r\n#define STATUS                                        0x07  //状态寄存器;bit0:TX FIFO满标志;bit3:1,接收数据通道号(最大:6);bit4,达到最多次重发\r\n                                                            //bit5:数据发送完成中断;bit6:接收数据中断;\r\n#define MAX_TX  \t\t                              0x10  //达到最大发送次数中断\r\n#define TX_OK   \t\t                              0x20  //TX发送完成中断\r\n#define RX_OK   \t\t                              0x40  //接收到数据中断\r\n\r\n#define OBSERVE_TX                                    0x08  //发送检测寄存器,bit7:4,数据包丢失计数器;bit3:0,重发计数器\r\n#define CD                                            0x09  //载波检测寄存器,bit0,载波检测;\r\n#define RX_ADDR_P0                                    0x0A  //数据通道0接收地址,最大长度5个字节,低字节在前\r\n#define RX_ADDR_P1                                    0x0B  //数据通道1接收地址,最大长度5个字节,低字节在前\r\n#define RX_ADDR_P2                                    0x0C  //数据通道2接收地址,最低字节可设置,高字节,必须同RX_ADDR_P1[39:8]相等;\r\n#define RX_ADDR_P3                                    0x0D  //数据通道3接收地址,最低字节可设置,高字节,必须同RX_ADDR_P1[39:8]相等;\r\n#define RX_ADDR_P4                                    0x0E  //数据通道4接收地址,最低字节可设置,高字节,必须同RX_ADDR_P1[39:8]相等;\r\n#define RX_ADDR_P5                                    0x0F  //数据通道5接收地址,最低字节可设置,高字节,必须同RX_ADDR_P1[39:8]相等;\r\n#define TX_ADDR                                       0x10  //发送地址(低字节在前),ShockBurstTM模式下,RX_ADDR_P0与此地址相等\r\n#define RX_PW_P0                                      0x11  //接收数据通道0有效数据宽度(1~32字节),设置为0则非法\r\n#define RX_PW_P1                                      0x12  //接收数据通道1有效数据宽度(1~32字节),设置为0则非法\r\n#define RX_PW_P2                                      0x13  //接收数据通道2有效数据宽度(1~32字节),设置为0则非法\r\n#define RX_PW_P3                                      0x14  //接收数据通道3有效数据宽度(1~32字节),设置为0则非法\r\n#define RX_PW_P4                                      0x15  //接收数据通道4有效数据宽度(1~32字节),设置为0则非法\r\n#define RX_PW_P5                                      0x16  //接收数据通道5有效数据宽度(1~32字节),设置为0则非法\r\n#define NRF_FIFO_STATUS                               0x17  //FIFO状态寄存器;bit0,RX FIFO寄存器空标志;bit1,RX FIFO满标志;bit2,3,保留\r\n                                                            //bit4,TX FIFO空标志;bit5,TX FIFO满标志;bit6,1,循环发送上一数据包.0,不循环;\r\n                              \r\n/* 扩展变量 ------------------------------------------------------------------*/\r\nextern SPI_HandleTypeDef hspi2;\r\n#define hspi_NRF24L01 hspi2\r\n\r\n/* 函数声明 ------------------------------------------------------------------*/\r\n\r\nvoid NRF24L01_SPI_Init(void);\r\nvoid NRF24L01_RX_Mode(void);\t\t\t\t\t                             //配置为接收模式\r\nvoid NRF24L01_TX_Mode(void);\t\t\t\t\t                             //配置为发送模式\r\nvoid NRF24L01_TX_Buff_Printf(uint8_t* tx_buff);                              //串口打印TX_BUFF\r\nuint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t uint8_ts);    //写数据区\r\nuint8_t NRF24L01_Read_Buf(uint8_t reg, uint8_t *pBuf, uint8_t uint8_ts);\t //读数据区\t\t  \r\nuint8_t NRF24L01_Read_Reg(uint8_t reg);\t\t\t\t\t                     //读寄存器\r\nuint8_t NRF24L01_Write_Reg(uint8_t reg, uint8_t value);\t\t                 //写寄存器\r\nuint8_t NRF24L01_Check(void);\t\t\t\t\t\t                         //检查24L01是否存在\r\nuint8_t NRF24L01_TxPacket(uint8_t *txbuf);\t\t\t\t                     //发送一个包的数据\r\nuint8_t NRF24L01_RxPacket(uint8_t *rxbuf);\t\t\t\t                     //接收一个包的数据\r\n\r\n#endif "
        }
    ]
}