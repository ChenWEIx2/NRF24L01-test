{
    "sourceFile": "Core/Src/NRF24L01.c",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 28,
            "patches": [
                {
                    "date": 1624516055562,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1624517044403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,11 +4,18 @@\n /* 私有类型定义 --------------------------------------------------------------*/\r\n /* 私有宏定义 ----------------------------------------------------------------*/                              \r\n /* 私有变量 ------------------------------------------------------------------*/\r\n \r\n-const uint8_t TX_ADDRESS[TX_ADR_WIDTH]={0xb0,0x43,0x10,0x10,0x01}; //发送地址\r\n-const uint8_t RX_ADDRESS[RX_ADR_WIDTH]={0xb0,0x43,0x10,0x10,0x01};\r\n+const uint8_t TX_ADDRESS0[] = {0xb0,0x43,0x10,0x10,0x01}; //通道0发送地址\r\n+const uint8_t TX_ADDRESS1[] = {0xc1,0xaa,0xa0,0xa0,0x02}; //通道1发送地址\r\n+const uint8_t TX_ADDRESS2[] = {0xd1,0xaa,0xa0,0xa0,0x02}; //通道2发送地址\r\n+const uint8_t TX_ADDRESS3[] = {0xe1,0xaa,0xa0,0xa0,0x02}; //通道3发送地址\r\n \r\n+const uint8_t RX_ADDRESS0[] = {0xb0,0x43,0x10,0x10,0x01}; //通道0接收地址\r\n+const uint8_t RX_ADDRESS1[] = {0xc1,0xaa,0xa0,0xa0,0x02}; //通道1接收地址\r\n+const uint8_t RX_ADDRESS2[] = {0xd1,0xaa,0xa0,0xa0,0x02}; //通道2接收地址\r\n+const uint8_t RX_ADDRESS3[] = {0xe1,0xaa,0xa0,0xa0,0x02}; //通道3接收地址\r\n+\r\n /* 扩展变量 ------------------------------------------------------------------*/\r\n /* 私有函数原形 --------------------------------------------------------------*/\r\n /* 函数体 --------------------------------------------------------------------*/\r\n \r\n"
                },
                {
                    "date": 1624517220556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,14 +204,14 @@\n }\t\t\t\t\t\t \r\n \r\n /**\r\n   * 函数功能: 该函数初始化NRF24L01到TX模式\r\n-  * 输入参数: 无\r\n+  * 输入参数: 通道号1~4\r\n   * 返 回 值: 无\r\n   * 说    明：无\r\n   *           \r\n   */ \r\n-void NRF24L01_TX_Mode(void)\r\n+void NRF24L01_TX_Mode(uint8_t channel)\r\n {\t\t\t\t\t\t\t\t\t\t\t\t\t\t \r\n \tNRF24L01_CE_LOW();\t    \r\n   NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS,TX_ADR_WIDTH);//写TX节点地址 \r\n   NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK\t  \r\n"
                },
                {
                    "date": 1624517784344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,11 +211,33 @@\n   *           \r\n   */ \r\n void NRF24L01_TX_Mode(uint8_t channel)\r\n {\t\t\t\t\t\t\t\t\t\t\t\t\t\t \r\n-\tNRF24L01_CE_LOW();\t    \r\n-  NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS,TX_ADR_WIDTH);//写TX节点地址 \r\n-  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK\t  \r\n+\tNRF24L01_CE_LOW();\r\n+  switch (channel))\r\n+  {\r\n+  case 0:                                                                            //通道0\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS0,TX_ADR_WIDTH);    //写TX节点地址 \r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK\r\n+    break;\r\n+  case 1:                                                                            //通道1\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS1,TX_ADR_WIDTH);    //写TX节点地址 \r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P1,(uint8_t*)RX_ADDRESS1,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK\r\n+    break;\r\n+  case 2:                                                                            //通道2\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS2,TX_ADR_WIDTH);    //写TX节点地址 \r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P2,(uint8_t*)RX_ADDRESS2,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK\r\n+    break;\r\n+  case 3:                                                                            //通道3\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS3,TX_ADR_WIDTH);    //写TX节点地址 \r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P3,(uint8_t*)RX_ADDRESS3,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK\r\n+    break;\r\n+  default:                                                                           //默认通道0\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS0,TX_ADR_WIDTH);    //写TX节点地址 \r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK\r\n+    break;\r\n+  }\t    \r\n+\t  \r\n \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);     //使能通道0的自动应答    \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01); //使能通道0的接收地址  \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+SETUP_RETR,0xff);//设置自动重发间隔时间:4000us + 86us;最大自动重发次数:15次\r\n"
                },
                {
                    "date": 1624517856678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -236,11 +236,10 @@\n     NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK\r\n     break;\r\n   }\t    \r\n \t  \r\n-\r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);     //使能通道0的自动应答    \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01); //使能通道0的接收地址  \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x0F);     //使能通道0~3的自动应答    \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x0F); //使能通道0~3的接收地址  \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+SETUP_RETR,0xff);//设置自动重发间隔时间:4000us + 86us;最大自动重发次数:15次\r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);       //设置RF通道为40\r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启   \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG,0x0e);    //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式,开启所有中断\r\n"
                },
                {
                    "date": 1624519349245,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -180,25 +180,46 @@\n }\t\t\t\t\t    \r\n \r\n /**\r\n   * 函数功能: 该函数初始化NRF24L01到RX模式\r\n-  * 输入参数: 无\r\n+  * 输入参数: 通道号1~4\r\n   * 返 回 值: 无\r\n   * 说    明：无\r\n   *           \r\n   */ \r\n-void NRF24L01_RX_Mode(void)\r\n+void NRF24L01_RX_Mode(uint8_t channel)\r\n {\r\n-\tNRF24L01_CE_LOW();\t  \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG, 0x0F);//配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);    //使能通道0的自动应答    \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01);//使能通道0的接收地址  \t \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);\t     //设置RF通信频率\t\t  \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);//设置TX发射参数,0db增益,2Mbps,低噪声增益开启   \r\n+\tNRF24L01_CE_LOW();\r\n+  switch (channel)\r\n+  {\r\n+  case 0:                                                                            //通道0\r\n+    NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);                       //选择通道0的有效数据宽度 \t    \r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //写RX节点地址\r\n+    break;\r\n+  case 1:                                                                            //通道1\r\n+    NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P1,RX_PLOAD_WIDTH);                       //选择通道1的有效数据宽度 \t    \r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P1,(uint8_t*)RX_ADDRESS1,RX_ADR_WIDTH); //写RX节点地址\r\n+    break;\r\n+  case 2:                                                                            //通道2\r\n+    NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P2,RX_PLOAD_WIDTH);                       //选择通道2的有效数据宽度 \t    \r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P2,(uint8_t*)RX_ADDRESS2,RX_ADR_WIDTH); //写RX节点地址\r\n+    break;\r\n+  case 3:                                                                            //通道3\r\n+    NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P3,RX_PLOAD_WIDTH);                       //选择通道0的有效数据宽度 \t    \r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P3,(uint8_t*)RX_ADDRESS3,RX_ADR_WIDTH); //写RX节点地址\r\n+    break;\r\n+  default:                                                                           //默认通道0\r\n+    NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);                       //选择通道0的有效数据宽度 \t    \r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //写RX节点地址\r\n+    break;\r\n+  }\t  \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG, 0x0F);   //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x0f);     //使能通道0~3的自动应答    \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x0f); //使能通道0~3的接收地址  \t \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);\t      //设置RF通信频率\t\t  \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启   \r\n   \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);//选择通道0的有效数据宽度 \t    \r\n-    \r\n-  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS,RX_ADR_WIDTH);//写RX节点地址\r\n+\r\n \t\r\n   NRF24L01_CE_HIGH(); //CE为高,进入接收模式 \r\n   HAL_Delay(1);\r\n }\t\t\t\t\t\t \r\n@@ -236,10 +257,10 @@\n     NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK\r\n     break;\r\n   }\t    \r\n \t  \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x0F);     //使能通道0~3的自动应答    \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x0F); //使能通道0~3的接收地址  \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x0f);     //使能通道0~3的自动应答    \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x0f); //使能通道0~3的接收地址  \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+SETUP_RETR,0xff);//设置自动重发间隔时间:4000us + 86us;最大自动重发次数:15次\r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);       //设置RF通道为40\r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启   \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG,0x0e);    //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式,开启所有中断\r\n"
                },
                {
                    "date": 1624519358945,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -217,9 +217,8 @@\n   NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x0f); //使能通道0~3的接收地址  \t \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);\t      //设置RF通信频率\t\t  \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启   \r\n   \r\n-\r\n \t\r\n   NRF24L01_CE_HIGH(); //CE为高,进入接收模式 \r\n   HAL_Delay(1);\r\n }\t\t\t\t\t\t \r\n"
                },
                {
                    "date": 1624520269486,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -171,9 +171,26 @@\n \tsta=NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值    \t \r\n \tNRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta); //清除TX_DS或MAX_RT中断标志\r\n \tif(sta&RX_OK)//接收到数据\r\n \t{\r\n-\t\tNRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);//读取数据\r\n+    switch (sta&0x0e)\r\n+    {\r\n+    case 0x00:\r\n+      NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);  //读取通道0数据\r\n+      printf(\"Channel 0 read successfully!\\r\\n\");\r\n+      break;\r\n+    case 0x02:\r\n+      NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);  //读取通道1数据\r\n+      printf();\r\n+      break;\r\n+    case 0x04:\r\n+      break;\r\n+    case 0x06:\r\n+      break;\r\n+    default:\r\n+      break;\r\n+    }\r\n+\t\t\r\n \t\tNRF24L01_Write_Reg(FLUSH_RX,0xff);//清除RX FIFO寄存器 \r\n \t\treturn 0; \r\n \t}\t\r\n \treturn 1;//没收到任何数据\r\n"
                },
                {
                    "date": 1624520388602,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -179,15 +179,21 @@\n       printf(\"Channel 0 read successfully!\\r\\n\");\r\n       break;\r\n     case 0x02:\r\n       NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);  //读取通道1数据\r\n-      printf();\r\n+      printf(\"channel 1 read successfully!\\r\\n\");\r\n       break;\r\n     case 0x04:\r\n+      NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);  //读取通道2数据\r\n+      printf(\"channel 2 read successfully!\\r\\n\");\r\n       break;\r\n     case 0x06:\r\n+      NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);  //读取通道3数据\r\n+      printf(\"channel 3 read successfully!\\r\\n\");\r\n       break;\r\n     default:\r\n+      NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);  //读取数据\r\n+      printf(\"Read successfully but unknow channel!\\r\\n\");\r\n       break;\r\n     }\r\n \t\t\r\n \t\tNRF24L01_Write_Reg(FLUSH_RX,0xff);//清除RX FIFO寄存器 \r\n"
                },
                {
                    "date": 1624520422762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -167,11 +167,11 @@\n   */ \r\n uint8_t NRF24L01_RxPacket(uint8_t *rxbuf)\r\n {\r\n \tuint8_t sta;\t\t    \t\t\t\t\t\t\t   \r\n-\tsta=NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值    \t \r\n+\tsta=NRF24L01_Read_Reg(STATUS);                //读取状态寄存器的值    \t \r\n \tNRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta); //清除TX_DS或MAX_RT中断标志\r\n-\tif(sta&RX_OK)//接收到数据\r\n+\tif(sta&RX_OK)                                 //接收到数据\r\n \t{\r\n     switch (sta&0x0e)\r\n     {\r\n     case 0x00:\r\n@@ -195,12 +195,12 @@\n       printf(\"Read successfully but unknow channel!\\r\\n\");\r\n       break;\r\n     }\r\n \t\t\r\n-\t\tNRF24L01_Write_Reg(FLUSH_RX,0xff);//清除RX FIFO寄存器 \r\n+\t\tNRF24L01_Write_Reg(FLUSH_RX,0xff);                      //清除RX FIFO寄存器 \r\n \t\treturn 0; \r\n \t}\t\r\n-\treturn 1;//没收到任何数据\r\n+\treturn 1; //没收到任何数据\r\n }\t\t\t\t\t    \r\n \r\n /**\r\n   * 函数功能: 该函数初始化NRF24L01到RX模式\r\n"
                },
                {
                    "date": 1624521538504,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -246,8 +246,42 @@\n   HAL_Delay(1);\r\n }\t\t\t\t\t\t \r\n \r\n /**\r\n+  * 函数功能: 该函数初始化NRF24L01到主机RX模式\r\n+  * 输入参数: 无\r\n+  * 返 回 值: 无\r\n+  * 说    明：无\r\n+  *           \r\n+  */ \r\n+void NRF24L01_RX_Mode_Master(void)\r\n+{\r\n+\tNRF24L01_CE_LOW();\r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);                       //选择通道0的有效数据宽度 \t    \r\n+  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //写RX节点地址\r\n+\r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P1,RX_PLOAD_WIDTH);                       //选择通道1的有效数据宽度 \t    \r\n+  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P1,(uint8_t*)RX_ADDRESS1,RX_ADR_WIDTH); //写RX节点地址\r\n+\r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P2,RX_PLOAD_WIDTH);                       //选择通道2的有效数据宽度 \t    \r\n+  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P2,(uint8_t*)RX_ADDRESS2,RX_ADR_WIDTH); //写RX节点地址\r\n+\r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P3,RX_PLOAD_WIDTH);                       //选择通道0的有效数据宽度 \t    \r\n+  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P3,(uint8_t*)RX_ADDRESS3,RX_ADR_WIDTH); //写RX节点地址\r\n+\t  \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG, 0x0F);   //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x0f);     //使能通道0~3的自动应答    \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x0f); //使能通道0~3的接收地址  \t \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);\t      //设置RF通信频率\t\t  \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启   \r\n+  \r\n+\t\r\n+  NRF24L01_CE_HIGH(); //CE为高,进入接收模式 \r\n+  HAL_Delay(1);\r\n+}\r\n+\r\n+\r\n+/**\r\n   * 函数功能: 该函数初始化NRF24L01到TX模式\r\n   * 输入参数: 通道号1~4\r\n   * 返 回 值: 无\r\n   * 说    明：无\r\n"
                },
                {
                    "date": 1624522664090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -289,9 +289,9 @@\n   */ \r\n void NRF24L01_TX_Mode(uint8_t channel)\r\n {\t\t\t\t\t\t\t\t\t\t\t\t\t\t \r\n \tNRF24L01_CE_LOW();\r\n-  switch (channel))\r\n+  switch (channel)\r\n   {\r\n   case 0:                                                                            //通道0\r\n     NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS0,TX_ADR_WIDTH);    //写TX节点地址 \r\n     NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK\r\n"
                },
                {
                    "date": 1625675311691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,9 +197,10 @@\n     }\r\n \t\t\r\n \t\tNRF24L01_Write_Reg(FLUSH_RX,0xff);                      //清除RX FIFO寄存器 \r\n \t\treturn 0; \r\n-\t}\t\r\n+\t}\r\n+  printf(\"Rx Nothing\\r\\n\");\t\r\n \treturn 1; //没收到任何数据\r\n }\t\t\t\t\t    \r\n \r\n /**\r\n"
                },
                {
                    "date": 1625713764982,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,15 +6,15 @@\n /* 私有变量 ------------------------------------------------------------------*/\r\n \r\n const uint8_t TX_ADDRESS0[] = {0xb0,0x43,0x10,0x10,0x01}; //通道0发送地址\r\n const uint8_t TX_ADDRESS1[] = {0xc1,0xaa,0xa0,0xa0,0x02}; //通道1发送地址\r\n-const uint8_t TX_ADDRESS2[] = {0xd1,0xaa,0xa0,0xa0,0x02}; //通道2发送地址\r\n-const uint8_t TX_ADDRESS3[] = {0xe1,0xaa,0xa0,0xa0,0x02}; //通道3发送地址\r\n+const uint8_t TX_ADDRESS2[] = {0xd1}; //通道2发送地址\r\n+const uint8_t TX_ADDRESS3[] = {0xe1}; //通道3发送地址\r\n \r\n const uint8_t RX_ADDRESS0[] = {0xb0,0x43,0x10,0x10,0x01}; //通道0接收地址\r\n const uint8_t RX_ADDRESS1[] = {0xc1,0xaa,0xa0,0xa0,0x02}; //通道1接收地址\r\n-const uint8_t RX_ADDRESS2[] = {0xd1,0xaa,0xa0,0xa0,0x02}; //通道2接收地址\r\n-const uint8_t RX_ADDRESS3[] = {0xe1,0xaa,0xa0,0xa0,0x02}; //通道3接收地址\r\n+const uint8_t RX_ADDRESS2[] = {0xd1}; //通道2接收地址\r\n+const uint8_t RX_ADDRESS3[] = {0xe1}; //通道3接收地址\r\n \r\n /* 扩展变量 ------------------------------------------------------------------*/\r\n /* 私有函数原形 --------------------------------------------------------------*/\r\n /* 函数体 --------------------------------------------------------------------*/\r\n"
                },
                {
                    "date": 1625726087454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -263,12 +263,12 @@\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P1,RX_PLOAD_WIDTH);                       //选择通道1的有效数据宽度 \t    \r\n   NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P1,(uint8_t*)RX_ADDRESS1,RX_ADR_WIDTH); //写RX节点地址\r\n \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P2,RX_PLOAD_WIDTH);                       //选择通道2的有效数据宽度 \t    \r\n-  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P2,(uint8_t*)RX_ADDRESS2,RX_ADR_WIDTH); //写RX节点地址\r\n+  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P2,(uint8_t*)RX_ADDRESS2,1);            //写RX节点地址\r\n \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P3,RX_PLOAD_WIDTH);                       //选择通道0的有效数据宽度 \t    \r\n-  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P3,(uint8_t*)RX_ADDRESS3,RX_ADR_WIDTH); //写RX节点地址\r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P3,RX_PLOAD_WIDTH);                       //选择通道3的有效数据宽度 \t    \r\n+  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P3,(uint8_t*)RX_ADDRESS3,1);            //写RX节点地址\r\n \t  \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG, 0x0F);   //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x0f);     //使能通道0~3的自动应答    \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x0f); //使能通道0~3的接收地址  \t \r\n"
                },
                {
                    "date": 1625726833722,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -236,10 +236,10 @@\n     NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //写RX节点地址\r\n     break;\r\n   }\t  \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG, 0x0F);   //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x0f);     //使能通道0~3的自动应答    \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x0f); //使能通道0~3的接收地址  \t \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x3f);     //使能通道0~3的自动应答    \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x3f); //使能通道0~3的接收地址  \t \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);\t      //设置RF通信频率\t\t  \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启   \r\n   \r\n \t\r\n"
                },
                {
                    "date": 1625728344973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,17 +224,17 @@\n     NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P1,(uint8_t*)RX_ADDRESS1,RX_ADR_WIDTH); //写RX节点地址\r\n     break;\r\n   case 2:                                                                            //通道2\r\n     NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P2,RX_PLOAD_WIDTH);                       //选择通道2的有效数据宽度 \t    \r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P2,(uint8_t*)RX_ADDRESS2,RX_ADR_WIDTH); //写RX节点地址\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P2,(uint8_t*)RX_ADDRESS2,1);            //写RX节点地址\r\n     break;\r\n   case 3:                                                                            //通道3\r\n     NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P3,RX_PLOAD_WIDTH);                       //选择通道0的有效数据宽度 \t    \r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P3,(uint8_t*)RX_ADDRESS3,RX_ADR_WIDTH); //写RX节点地址\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P3,(uint8_t*)RX_ADDRESS3,1);            //写RX节点地址\r\n     break;\r\n   default:                                                                           //默认通道0\r\n     NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);                       //选择通道0的有效数据宽度 \t    \r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //写RX节点地址\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH);            //写RX节点地址\r\n     break;\r\n   }\t  \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG, 0x0F);   //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x3f);     //使能通道0~3的自动应答    \r\n"
                },
                {
                    "date": 1625730007884,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -256,19 +256,17 @@\n   */ \r\n void NRF24L01_RX_Mode_Master(void)\r\n {\r\n \tNRF24L01_CE_LOW();\r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);                       //选择通道0的有效数据宽度 \t    \r\n   NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //写RX节点地址\r\n+  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P1,(uint8_t*)RX_ADDRESS1,RX_ADR_WIDTH); //写RX节点地址\r\n+  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P2,(uint8_t*)RX_ADDRESS2,1);            //写RX节点地址\r\n+  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P3,(uint8_t*)RX_ADDRESS3,1);            //写RX节点地址\r\n \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);                       //选择通道0的有效数据宽度 \t    \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P1,RX_PLOAD_WIDTH);                       //选择通道1的有效数据宽度 \t    \r\n-  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P1,(uint8_t*)RX_ADDRESS1,RX_ADR_WIDTH); //写RX节点地址\r\n-\r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P2,RX_PLOAD_WIDTH);                       //选择通道2的有效数据宽度 \t    \r\n-  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P2,(uint8_t*)RX_ADDRESS2,1);            //写RX节点地址\r\n-\r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P3,RX_PLOAD_WIDTH);                       //选择通道3的有效数据宽度 \t    \r\n-  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P3,(uint8_t*)RX_ADDRESS3,1);            //写RX节点地址\r\n \t  \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG, 0x0F);   //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x0f);     //使能通道0~3的自动应答    \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x0f); //使能通道0~3的接收地址  \t \r\n"
                },
                {
                    "date": 1625734247898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,15 +6,15 @@\n /* 私有变量 ------------------------------------------------------------------*/\r\n \r\n const uint8_t TX_ADDRESS0[] = {0xb0,0x43,0x10,0x10,0x01}; //通道0发送地址\r\n const uint8_t TX_ADDRESS1[] = {0xc1,0xaa,0xa0,0xa0,0x02}; //通道1发送地址\r\n-const uint8_t TX_ADDRESS2[] = {0xd1}; //通道2发送地址\r\n-const uint8_t TX_ADDRESS3[] = {0xe1}; //通道3发送地址\r\n+const uint8_t TX_ADDRESS2[] = {0xd1};                     //通道2发送地址\r\n+const uint8_t TX_ADDRESS3[] = {0xe1};                     //通道3发送地址\r\n \r\n const uint8_t RX_ADDRESS0[] = {0xb0,0x43,0x10,0x10,0x01}; //通道0接收地址\r\n const uint8_t RX_ADDRESS1[] = {0xc1,0xaa,0xa0,0xa0,0x02}; //通道1接收地址\r\n-const uint8_t RX_ADDRESS2[] = {0xd1}; //通道2接收地址\r\n-const uint8_t RX_ADDRESS3[] = {0xe1}; //通道3接收地址\r\n+const uint8_t RX_ADDRESS2[] = {0xd1};                     //通道2接收地址\r\n+const uint8_t RX_ADDRESS3[] = {0xe1};                     //通道3接收地址\r\n \r\n /* 扩展变量 ------------------------------------------------------------------*/\r\n /* 私有函数原形 --------------------------------------------------------------*/\r\n /* 函数体 --------------------------------------------------------------------*/\r\n@@ -320,5 +320,5 @@\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启   \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG,0x0e);    //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式,开启所有中断\r\n \tNRF24L01_CE_HIGH();//CE为高,10us后启动发送\r\n   HAL_Delay(1);\r\n-}\r\n+}\n\\ No newline at end of file\n"
                },
                {
                    "date": 1625734565623,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,15 +6,15 @@\n /* 私有变量 ------------------------------------------------------------------*/\r\n \r\n const uint8_t TX_ADDRESS0[] = {0xb0,0x43,0x10,0x10,0x01}; //通道0发送地址\r\n const uint8_t TX_ADDRESS1[] = {0xc1,0xaa,0xa0,0xa0,0x02}; //通道1发送地址\r\n-const uint8_t TX_ADDRESS2[] = {0xd1};                     //通道2发送地址\r\n-const uint8_t TX_ADDRESS3[] = {0xe1};                     //通道3发送地址\r\n+const uint8_t TX_ADDRESS2[] = {0xd1,0xaa,0xa0,0xa0,0x02}; //通道2发送地址\r\n+const uint8_t TX_ADDRESS3[] = {0xe1,0xaa,0xa0,0xa0,0x02}; //通道3发送地址\r\n \r\n const uint8_t RX_ADDRESS0[] = {0xb0,0x43,0x10,0x10,0x01}; //通道0接收地址\r\n const uint8_t RX_ADDRESS1[] = {0xc1,0xaa,0xa0,0xa0,0x02}; //通道1接收地址\r\n-const uint8_t RX_ADDRESS2[] = {0xd1};                     //通道2接收地址\r\n-const uint8_t RX_ADDRESS3[] = {0xe1};                     //通道3接收地址\r\n+const uint8_t RX_ADDRESS2[] = {0xd1,0xaa,0xa0,0xa0,0x02}; //通道2接收地址\r\n+const uint8_t RX_ADDRESS3[] = {0xe1,0xaa,0xa0,0xa0,0x02}; //通道3接收地址\r\n \r\n /* 扩展变量 ------------------------------------------------------------------*/\r\n /* 私有函数原形 --------------------------------------------------------------*/\r\n /* 函数体 --------------------------------------------------------------------*/\r\n"
                },
                {
                    "date": 1625736367135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,14 +148,17 @@\n \tNRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta);        //清除TX_DS或MAX_RT中断标志\r\n \tif(sta&MAX_TX)                                       //达到最大重发次数\r\n \t{\r\n \t\tNRF24L01_Write_Reg(FLUSH_TX,0xff);                 //清除TX FIFO寄存器 \r\n+    printf(\"TX_MAX Time.\\r\\n\");\r\n \t\treturn MAX_TX; \r\n \t}\r\n \tif(sta&TX_OK)                                        //发送完成\r\n \t{\r\n+    printf(\"TX_OK.\\r\\n\");\r\n \t\treturn TX_OK;\r\n \t}\r\n+  printf(\"TX_Error\\r\\n\");\r\n \treturn 0xff;                                         //其他原因发送失败\r\n }\r\n \r\n /**\r\n@@ -197,10 +200,9 @@\n     }\r\n \t\t\r\n \t\tNRF24L01_Write_Reg(FLUSH_RX,0xff);                      //清除RX FIFO寄存器 \r\n \t\treturn 0; \r\n-\t}\r\n-  printf(\"Rx Nothing\\r\\n\");\t\r\n+\t}\t\r\n \treturn 1; //没收到任何数据\r\n }\t\t\t\t\t    \r\n \r\n /**\r\n@@ -224,22 +226,22 @@\n     NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P1,(uint8_t*)RX_ADDRESS1,RX_ADR_WIDTH); //写RX节点地址\r\n     break;\r\n   case 2:                                                                            //通道2\r\n     NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P2,RX_PLOAD_WIDTH);                       //选择通道2的有效数据宽度 \t    \r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P2,(uint8_t*)RX_ADDRESS2,1);            //写RX节点地址\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P2,(uint8_t*)RX_ADDRESS2,RX_ADR_WIDTH); //写RX节点地址\r\n     break;\r\n   case 3:                                                                            //通道3\r\n     NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P3,RX_PLOAD_WIDTH);                       //选择通道0的有效数据宽度 \t    \r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P3,(uint8_t*)RX_ADDRESS3,1);            //写RX节点地址\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P3,(uint8_t*)RX_ADDRESS3,RX_ADR_WIDTH); //写RX节点地址\r\n     break;\r\n   default:                                                                           //默认通道0\r\n     NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);                       //选择通道0的有效数据宽度 \t    \r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH);            //写RX节点地址\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //写RX节点地址\r\n     break;\r\n   }\t  \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG, 0x0F);   //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x3f);     //使能通道0~3的自动应答    \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x3f); //使能通道0~3的接收地址  \t \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x0f);     //使能通道0~3的自动应答    \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x0f); //使能通道0~3的接收地址  \t \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);\t      //设置RF通信频率\t\t  \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启   \r\n   \r\n \t\r\n@@ -280,9 +282,9 @@\n \r\n \r\n /**\r\n   * 函数功能: 该函数初始化NRF24L01到TX模式\r\n-  * 输入参数: 通道号1~4\r\n+  * 输入参数: 通道号0~3\r\n   * 返 回 值: 无\r\n   * 说    明：无\r\n   *           \r\n   */ \r\n@@ -292,33 +294,33 @@\n   switch (channel)\r\n   {\r\n   case 0:                                                                            //通道0\r\n     NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS0,TX_ADR_WIDTH);    //写TX节点地址 \r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //设置RX节点地址,主要为了使能ACK\r\n     break;\r\n   case 1:                                                                            //通道1\r\n     NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS1,TX_ADR_WIDTH);    //写TX节点地址 \r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P1,(uint8_t*)RX_ADDRESS1,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS1,RX_ADR_WIDTH); //设置RX节点地址,主要为了使能ACK\r\n     break;\r\n   case 2:                                                                            //通道2\r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS2,TX_ADR_WIDTH);    //写TX节点地址 \r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P2,(uint8_t*)RX_ADDRESS2,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS2,TX_ADR_WIDTH);    //写TX节点地址，5字节 \r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS2,RX_ADR_WIDTH); //设置RX节点地址,主要为了使能ACK\r\n     break;\r\n   case 3:                                                                            //通道3\r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS3,TX_ADR_WIDTH);    //写TX节点地址 \r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P3,(uint8_t*)RX_ADDRESS3,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS3,TX_ADR_WIDTH);    //写TX节点地址，5字节 \r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS3,RX_ADR_WIDTH); //设置RX节点地址,主要为了使能ACK\r\n     break;\r\n   default:                                                                           //默认通道0\r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS0,TX_ADR_WIDTH);    //写TX节点地址 \r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS0,1);               //写TX节点地址 \r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,TX_ADR_WIDTH); //设置RX节点地址,主要为了使能ACK\r\n     break;\r\n   }\t    \r\n \t  \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x0f);     //使能通道0~3的自动应答    \r\n\\ No newline at end of file\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x0f); //使能通道0~3的接收地址  \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);     //使能通道0的自动应答    \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01); //使能通道0的接收地址  \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+SETUP_RETR,0xff);//设置自动重发间隔时间:4000us + 86us;最大自动重发次数:15次\r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);       //设置RF通道为40\r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启   \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG,0x0e);    //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式,开启所有中断\r\n \tNRF24L01_CE_HIGH();//CE为高,10us后启动发送\r\n   HAL_Delay(1);\r\n-}\n+}\r\n"
                },
                {
                    "date": 1625736649223,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,11 +200,12 @@\n     }\r\n \t\t\r\n \t\tNRF24L01_Write_Reg(FLUSH_RX,0xff);                      //清除RX FIFO寄存器 \r\n \t\treturn 0; \r\n-\t}\t\r\n+\t}\r\n+  printf(\"Rx Nothing\\r\\n\");\t\r\n \treturn 1; //没收到任何数据\r\n-}\t\t\t\t\t    \r\n+}\t\t\t\t\t\t\t    \r\n \r\n /**\r\n   * 函数功能: 该函数初始化NRF24L01到RX模式\r\n   * 输入参数: 通道号1~4\r\n@@ -226,29 +227,29 @@\n     NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P1,(uint8_t*)RX_ADDRESS1,RX_ADR_WIDTH); //写RX节点地址\r\n     break;\r\n   case 2:                                                                            //通道2\r\n     NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P2,RX_PLOAD_WIDTH);                       //选择通道2的有效数据宽度 \t    \r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P2,(uint8_t*)RX_ADDRESS2,RX_ADR_WIDTH); //写RX节点地址\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P2,(uint8_t*)RX_ADDRESS2,1);            //写RX节点地址\r\n     break;\r\n   case 3:                                                                            //通道3\r\n     NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P3,RX_PLOAD_WIDTH);                       //选择通道0的有效数据宽度 \t    \r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P3,(uint8_t*)RX_ADDRESS3,RX_ADR_WIDTH); //写RX节点地址\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P3,(uint8_t*)RX_ADDRESS3,1);            //写RX节点地址\r\n     break;\r\n   default:                                                                           //默认通道0\r\n     NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);                       //选择通道0的有效数据宽度 \t    \r\n     NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //写RX节点地址\r\n     break;\r\n   }\t  \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG, 0x0F);   //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x0f);     //使能通道0~3的自动应答    \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x0f); //使能通道0~3的接收地址  \t \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x3f);     //使能通道0~3的自动应答    \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x3f); //使能通道0~3的接收地址  \t \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);\t      //设置RF通信频率\t\t  \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启   \r\n   \r\n \t\r\n   NRF24L01_CE_HIGH(); //CE为高,进入接收模式 \r\n   HAL_Delay(1);\r\n-}\t\t\t\t\t\t \r\n+}\t\t\t\t\t\t\t\t \r\n \r\n /**\r\n   * 函数功能: 该函数初始化NRF24L01到主机RX模式\r\n   * 输入参数: 无\r\n"
                },
                {
                    "date": 1625762283341,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,18 +4,11 @@\n /* 私有类型定义 --------------------------------------------------------------*/\r\n /* 私有宏定义 ----------------------------------------------------------------*/                              \r\n /* 私有变量 ------------------------------------------------------------------*/\r\n \r\n-const uint8_t TX_ADDRESS0[] = {0xb0,0x43,0x10,0x10,0x01}; //通道0发送地址\r\n-const uint8_t TX_ADDRESS1[] = {0xc1,0xaa,0xa0,0xa0,0x02}; //通道1发送地址\r\n-const uint8_t TX_ADDRESS2[] = {0xd1,0xaa,0xa0,0xa0,0x02}; //通道2发送地址\r\n-const uint8_t TX_ADDRESS3[] = {0xe1,0xaa,0xa0,0xa0,0x02}; //通道3发送地址\r\n+const uint8_t TX_ADDRESS0[TX_ADR_WIDTH]={0xb0,0x43,0x10,0x10,0x01}; //发送地址\r\n+const uint8_t RX_ADDRESS0[RX_ADR_WIDTH]={0xb0,0x43,0x10,0x10,0x01};\r\n \r\n-const uint8_t RX_ADDRESS0[] = {0xb0,0x43,0x10,0x10,0x01}; //通道0接收地址\r\n-const uint8_t RX_ADDRESS1[] = {0xc1,0xaa,0xa0,0xa0,0x02}; //通道1接收地址\r\n-const uint8_t RX_ADDRESS2[] = {0xd1,0xaa,0xa0,0xa0,0x02}; //通道2接收地址\r\n-const uint8_t RX_ADDRESS3[] = {0xe1,0xaa,0xa0,0xa0,0x02}; //通道3接收地址\r\n-\r\n /* 扩展变量 ------------------------------------------------------------------*/\r\n /* 私有函数原形 --------------------------------------------------------------*/\r\n /* 函数体 --------------------------------------------------------------------*/\r\n \r\n@@ -148,17 +141,14 @@\n \tNRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta);        //清除TX_DS或MAX_RT中断标志\r\n \tif(sta&MAX_TX)                                       //达到最大重发次数\r\n \t{\r\n \t\tNRF24L01_Write_Reg(FLUSH_TX,0xff);                 //清除TX FIFO寄存器 \r\n-    printf(\"TX_MAX Time.\\r\\n\");\r\n \t\treturn MAX_TX; \r\n \t}\r\n \tif(sta&TX_OK)                                        //发送完成\r\n \t{\r\n-    printf(\"TX_OK.\\r\\n\");\r\n \t\treturn TX_OK;\r\n \t}\r\n-  printf(\"TX_Error\\r\\n\");\r\n \treturn 0xff;                                         //其他原因发送失败\r\n }\r\n \r\n /**\r\n@@ -170,153 +160,56 @@\n   */ \r\n uint8_t NRF24L01_RxPacket(uint8_t *rxbuf)\r\n {\r\n \tuint8_t sta;\t\t    \t\t\t\t\t\t\t   \r\n-\tsta=NRF24L01_Read_Reg(STATUS);                //读取状态寄存器的值    \t \r\n+\tsta=NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值    \t \r\n \tNRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta); //清除TX_DS或MAX_RT中断标志\r\n-\tif(sta&RX_OK)                                 //接收到数据\r\n+\tif(sta&RX_OK)//接收到数据\r\n \t{\r\n-    switch (sta&0x0e)\r\n-    {\r\n-    case 0x00:\r\n-      NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);  //读取通道0数据\r\n-      printf(\"Channel 0 read successfully!\\r\\n\");\r\n-      break;\r\n-    case 0x02:\r\n-      NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);  //读取通道1数据\r\n-      printf(\"channel 1 read successfully!\\r\\n\");\r\n-      break;\r\n-    case 0x04:\r\n-      NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);  //读取通道2数据\r\n-      printf(\"channel 2 read successfully!\\r\\n\");\r\n-      break;\r\n-    case 0x06:\r\n-      NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);  //读取通道3数据\r\n-      printf(\"channel 3 read successfully!\\r\\n\");\r\n-      break;\r\n-    default:\r\n-      NRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);  //读取数据\r\n-      printf(\"Read successfully but unknow channel!\\r\\n\");\r\n-      break;\r\n-    }\r\n-\t\t\r\n-\t\tNRF24L01_Write_Reg(FLUSH_RX,0xff);                      //清除RX FIFO寄存器 \r\n+\t\tNRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);//读取数据\r\n+\t\tNRF24L01_Write_Reg(FLUSH_RX,0xff);//清除RX FIFO寄存器 \r\n \t\treturn 0; \r\n-\t}\r\n-  printf(\"Rx Nothing\\r\\n\");\t\r\n-\treturn 1; //没收到任何数据\r\n-}\t\t\t\t\t\t\t    \r\n+\t}\t\r\n+\treturn 1;//没收到任何数据\r\n+}\t\t\t\t\t    \r\n \r\n /**\r\n   * 函数功能: 该函数初始化NRF24L01到RX模式\r\n-  * 输入参数: 通道号1~4\r\n-  * 返 回 值: 无\r\n-  * 说    明：无\r\n-  *           \r\n-  */ \r\n-void NRF24L01_RX_Mode(uint8_t channel)\r\n-{\r\n-\tNRF24L01_CE_LOW();\r\n-  switch (channel)\r\n-  {\r\n-  case 0:                                                                            //通道0\r\n-    NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);                       //选择通道0的有效数据宽度 \t    \r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //写RX节点地址\r\n-    break;\r\n-  case 1:                                                                            //通道1\r\n-    NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P1,RX_PLOAD_WIDTH);                       //选择通道1的有效数据宽度 \t    \r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P1,(uint8_t*)RX_ADDRESS1,RX_ADR_WIDTH); //写RX节点地址\r\n-    break;\r\n-  case 2:                                                                            //通道2\r\n-    NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P2,RX_PLOAD_WIDTH);                       //选择通道2的有效数据宽度 \t    \r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P2,(uint8_t*)RX_ADDRESS2,1);            //写RX节点地址\r\n-    break;\r\n-  case 3:                                                                            //通道3\r\n-    NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P3,RX_PLOAD_WIDTH);                       //选择通道0的有效数据宽度 \t    \r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P3,(uint8_t*)RX_ADDRESS3,1);            //写RX节点地址\r\n-    break;\r\n-  default:                                                                           //默认通道0\r\n-    NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);                       //选择通道0的有效数据宽度 \t    \r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //写RX节点地址\r\n-    break;\r\n-  }\t  \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG, 0x0F);   //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x3f);     //使能通道0~3的自动应答    \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x3f); //使能通道0~3的接收地址  \t \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);\t      //设置RF通信频率\t\t  \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启   \r\n-  \r\n-\t\r\n-  NRF24L01_CE_HIGH(); //CE为高,进入接收模式 \r\n-  HAL_Delay(1);\r\n-}\t\t\t\t\t\t\t\t \r\n-\r\n-/**\r\n-  * 函数功能: 该函数初始化NRF24L01到主机RX模式\r\n   * 输入参数: 无\r\n   * 返 回 值: 无\r\n   * 说    明：无\r\n   *           \r\n   */ \r\n-void NRF24L01_RX_Mode_Master(void)\r\n+void NRF24L01_RX_Mode(uint8_t i)\r\n {\r\n-\tNRF24L01_CE_LOW();\r\n-  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //写RX节点地址\r\n-  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P1,(uint8_t*)RX_ADDRESS1,RX_ADR_WIDTH); //写RX节点地址\r\n-  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P2,(uint8_t*)RX_ADDRESS2,1);            //写RX节点地址\r\n-  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P3,(uint8_t*)RX_ADDRESS3,1);            //写RX节点地址\r\n-\r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);                       //选择通道0的有效数据宽度 \t    \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P1,RX_PLOAD_WIDTH);                       //选择通道1的有效数据宽度 \t    \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P2,RX_PLOAD_WIDTH);                       //选择通道2的有效数据宽度 \t    \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P3,RX_PLOAD_WIDTH);                       //选择通道3的有效数据宽度 \t    \r\n-\t  \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG, 0x0F);   //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x0f);     //使能通道0~3的自动应答    \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x0f); //使能通道0~3的接收地址  \t \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);\t      //设置RF通信频率\t\t  \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启   \r\n+\tNRF24L01_CE_LOW();\t  \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG, 0x0F);//配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);    //使能通道0的自动应答    \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01);//使能通道0的接收地址  \t \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);\t     //设置RF通信频率\t\t  \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);//设置TX发射参数,0db增益,2Mbps,低噪声增益开启   \r\n   \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);//选择通道0的有效数据宽度 \t    \r\n+    \r\n+  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH);//写RX节点地址\r\n \t\r\n   NRF24L01_CE_HIGH(); //CE为高,进入接收模式 \r\n   HAL_Delay(1);\r\n-}\r\n+}\t\t\t\t\t\t \r\n \r\n-\r\n /**\r\n   * 函数功能: 该函数初始化NRF24L01到TX模式\r\n-  * 输入参数: 通道号0~3\r\n+  * 输入参数: 无\r\n   * 返 回 值: 无\r\n   * 说    明：无\r\n   *           \r\n   */ \r\n-void NRF24L01_TX_Mode(uint8_t channel)\r\n+void NRF24L01_TX_Mode(void)\r\n {\t\t\t\t\t\t\t\t\t\t\t\t\t\t \r\n-\tNRF24L01_CE_LOW();\r\n-  switch (channel)\r\n-  {\r\n-  case 0:                                                                            //通道0\r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS0,TX_ADR_WIDTH);    //写TX节点地址 \r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //设置RX节点地址,主要为了使能ACK\r\n-    break;\r\n-  case 1:                                                                            //通道1\r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS1,TX_ADR_WIDTH);    //写TX节点地址 \r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS1,RX_ADR_WIDTH); //设置RX节点地址,主要为了使能ACK\r\n-    break;\r\n-  case 2:                                                                            //通道2\r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS2,TX_ADR_WIDTH);    //写TX节点地址，5字节 \r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS2,RX_ADR_WIDTH); //设置RX节点地址,主要为了使能ACK\r\n-    break;\r\n-  case 3:                                                                            //通道3\r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS3,TX_ADR_WIDTH);    //写TX节点地址，5字节 \r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS3,RX_ADR_WIDTH); //设置RX节点地址,主要为了使能ACK\r\n-    break;\r\n-  default:                                                                           //默认通道0\r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS0,1);               //写TX节点地址 \r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,TX_ADR_WIDTH); //设置RX节点地址,主要为了使能ACK\r\n-    break;\r\n-  }\t    \r\n-\t  \r\n+\tNRF24L01_CE_LOW();\t    \r\n+  NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS0,TX_ADR_WIDTH);//写TX节点地址 \r\n+  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK\t  \r\n+\r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);     //使能通道0的自动应答    \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01); //使能通道0的接收地址  \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+SETUP_RETR,0xff);//设置自动重发间隔时间:4000us + 86us;最大自动重发次数:15次\r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);       //设置RF通道为40\r\n"
                },
                {
                    "date": 1625762385760,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -188,10 +188,27 @@\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);\t     //设置RF通信频率\t\t  \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);//设置TX发射参数,0db增益,2Mbps,低噪声增益开启   \r\n   \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);//选择通道0的有效数据宽度 \t    \r\n-    \r\n-  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH);//写RX节点地址\r\n+\r\n+  switch (i)\r\n+  {\r\n+  case 0:\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH);//写RX节点地址\r\n+    break;\r\n+  case 1:\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS1,RX_ADR_WIDTH);//写RX节点地址\r\n+    break;\r\n+  case 2:\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS2,RX_ADR_WIDTH);//写RX节点地址\r\n+    break;\r\n+  case 3:\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH);//写RX节点地址\r\n+    break;\r\n+  \r\n+  default:\r\n+    break;\r\n+  }  \r\n \t\r\n   NRF24L01_CE_HIGH(); //CE为高,进入接收模式 \r\n   HAL_Delay(1);\r\n }\t\t\t\t\t\t \r\n@@ -202,9 +219,9 @@\n   * 返 回 值: 无\r\n   * 说    明：无\r\n   *           \r\n   */ \r\n-void NRF24L01_TX_Mode(void)\r\n+void NRF24L01_TX_Mode(uint8_t i)\r\n {\t\t\t\t\t\t\t\t\t\t\t\t\t\t \r\n \tNRF24L01_CE_LOW();\t    \r\n   NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS0,TX_ADR_WIDTH);//写TX节点地址 \r\n   NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK\t  \r\n"
                },
                {
                    "date": 1625762399515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,12 +201,12 @@\n   case 2:\r\n     NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS2,RX_ADR_WIDTH);//写RX节点地址\r\n     break;\r\n   case 3:\r\n-    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH);//写RX节点地址\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS3,RX_ADR_WIDTH);//写RX节点地址\r\n     break;\r\n-  \r\n   default:\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH);//写RX节点地址\r\n     break;\r\n   }  \r\n \t\r\n   NRF24L01_CE_HIGH(); //CE为高,进入接收模式 \r\n"
                },
                {
                    "date": 1625762513501,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -221,10 +221,27 @@\n   *           \r\n   */ \r\n void NRF24L01_TX_Mode(uint8_t i)\r\n {\t\t\t\t\t\t\t\t\t\t\t\t\t\t \r\n-\tNRF24L01_CE_LOW();\t    \r\n-  NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS0,TX_ADR_WIDTH);//写TX节点地址 \r\n+\tNRF24L01_CE_LOW();\r\n+  switch (i)\r\n+  {\r\n+  case 0:\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS0,TX_ADR_WIDTH);//写TX节点地址 \r\n+    break;\r\n+  case 1:\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS1,TX_ADR_WIDTH);//写TX节点地址 \r\n+    break;\r\n+  case 2:\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS2,TX_ADR_WIDTH);//写TX节点地址 \r\n+    break;\r\n+  case 3:\r\n+      NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS3,TX_ADR_WIDTH);//写TX节点地址 \r\n+      break;\r\n+  default:\r\n+    break;\r\n+  }\t    \r\n+\r\n   NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK\t  \r\n \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);     //使能通道0的自动应答    \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01); //使能通道0的接收地址  \r\n"
                },
                {
                    "date": 1625762528903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -237,8 +237,9 @@\n   case 3:\r\n       NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS3,TX_ADR_WIDTH);//写TX节点地址 \r\n       break;\r\n   default:\r\n+    NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS0,TX_ADR_WIDTH);//写TX节点地址 \r\n     break;\r\n   }\t    \r\n \r\n   NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK\t  \r\n"
                },
                {
                    "date": 1625762600833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -243,10 +243,10 @@\n   }\t    \r\n \r\n   NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS0,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK\t  \r\n \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);     //使能通道0的自动应答    \r\n-  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01); //使能通道0的接收地址  \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x3f);     //使能通道0的自动应答    \r\n+  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x3f); //使能通道0的接收地址  \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+SETUP_RETR,0xff);//设置自动重发间隔时间:4000us + 86us;最大自动重发次数:15次\r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);       //设置RF通道为40\r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启   \r\n   NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG,0x0e);    //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式,开启所有中断\r\n"
                },
                {
                    "date": 1625762690378,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,16 @@\n /* 私有宏定义 ----------------------------------------------------------------*/                              \r\n /* 私有变量 ------------------------------------------------------------------*/\r\n \r\n const uint8_t TX_ADDRESS0[TX_ADR_WIDTH]={0xb0,0x43,0x10,0x10,0x01}; //发送地址\r\n+const uint8_t TX_ADDRESS1[TX_ADR_WIDTH]={0xb1,0x43,0x10,0x10,0x02}; //发送地址\r\n+const uint8_t TX_ADDRESS2[TX_ADR_WIDTH]={0xb2,0x43,0x10,0x10,0x02}; //发送地址\r\n+const uint8_t TX_ADDRESS3[TX_ADR_WIDTH]={0xb3,0x43,0x10,0x10,0x02}; //发送地址\r\n+\r\n const uint8_t RX_ADDRESS0[RX_ADR_WIDTH]={0xb0,0x43,0x10,0x10,0x01};\r\n+const uint8_t RX_ADDRESS1[RX_ADR_WIDTH]={0xb1,0x43,0x10,0x10,0x02};\r\n+const uint8_t RX_ADDRESS2[RX_ADR_WIDTH]={0xb2,0x43,0x10,0x10,0x02};\r\n+const uint8_t RX_ADDRESS3[RX_ADR_WIDTH]={0xb3,0x43,0x10,0x10,0x02};\r\n \r\n /* 扩展变量 ------------------------------------------------------------------*/\r\n /* 私有函数原形 --------------------------------------------------------------*/\r\n /* 函数体 --------------------------------------------------------------------*/\r\n"
                }
            ],
            "date": 1624516055562,
            "name": "Commit-0",
            "content": "/* 包含头文件 ----------------------------------------------------------------*/\r\n#include \"NRF24L01.h\"\r\n\r\n/* 私有类型定义 --------------------------------------------------------------*/\r\n/* 私有宏定义 ----------------------------------------------------------------*/                              \r\n/* 私有变量 ------------------------------------------------------------------*/\r\n\r\nconst uint8_t TX_ADDRESS[TX_ADR_WIDTH]={0xb0,0x43,0x10,0x10,0x01}; //发送地址\r\nconst uint8_t RX_ADDRESS[RX_ADR_WIDTH]={0xb0,0x43,0x10,0x10,0x01};\r\n\r\n/* 扩展变量 ------------------------------------------------------------------*/\r\n/* 私有函数原形 --------------------------------------------------------------*/\r\n/* 函数体 --------------------------------------------------------------------*/\r\n\r\n\r\n/**\r\n  * 函数功能: 往串行Flash读取写入一个字节数据并接收一个字节数据\r\n  * 输入参数: byte：待发送数据\r\n  * 返 回 值: uint8_t：接收到的数据\r\n  * 说    明：无\r\n  */\r\nuint8_t SPIx_ReadWriteByte(SPI_HandleTypeDef* hspi,uint8_t byte)\r\n{\r\n  uint8_t d_read,d_send=byte;\r\n  if(HAL_SPI_TransmitReceive(hspi,&d_send,&d_read,1,0xFF)!=HAL_OK)\r\n  {\r\n    d_read=0xFF;\r\n  }\r\n  return d_read; \r\n}\r\n\r\n/**\r\n  * 函数功能: 检测24L01是否存在\r\n  * 输入参数: 无\r\n  * 返 回 值: 0，成功;1，失败\r\n  * 说    明：无          \r\n  */ \r\nuint8_t NRF24L01_Check(void)\r\n{\r\n\tuint8_t buf[5]={0XA5,0XA5,0XA5,0XA5,0XA5};\r\n\tuint8_t i;\r\n  \r\n\tNRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,buf,5);//写入5个字节的地址.\t\r\n\tNRF24L01_Read_Buf(TX_ADDR,buf,5); //读出写入的地址  \r\n\tfor(i=0;i<5;i++)if(buf[i]!=0XA5)break;\t \t\t\t\t\t\t\t   \r\n\tif(i!=5)return 1;//检测24L01错误\t\r\n\treturn 0;\t\t //检测到24L01\r\n}\t \t \r\n\r\n/**\r\n  * 函数功能: SPI写寄存器\r\n  * 输入参数: 无\r\n  * 返 回 值: 无\r\n  * 说    明：reg:指定寄存器地址\r\n  *           \r\n  */ \r\nuint8_t NRF24L01_Write_Reg(uint8_t reg,uint8_t value)\r\n{\r\n\tuint8_t status;\t\r\n  NRF24L01_SPI_CS_ENABLE();                 //使能SPI传输\r\n  status =SPIx_ReadWriteByte(&hspi_NRF24L01,reg);//发送寄存器号 \r\n  SPIx_ReadWriteByte(&hspi_NRF24L01,value);      //写入寄存器的值\r\n  NRF24L01_SPI_CS_DISABLE();                 //禁止SPI传输\t   \r\n  return(status);       \t\t\t//返回状态值\r\n}\r\n\r\n/**\r\n  * 函数功能: 读取SPI寄存器值\r\n  * 输入参数: 无\r\n  * 返 回 值: 无\r\n  * 说    明：reg:要读的寄存器\r\n  *           \r\n  */ \r\nuint8_t NRF24L01_Read_Reg(uint8_t reg)\r\n{\r\n\tuint8_t reg_val;\t    \r\n \tNRF24L01_SPI_CS_ENABLE();          //使能SPI传输\t\t\r\n  SPIx_ReadWriteByte(&hspi_NRF24L01,reg);   //发送寄存器号\r\n  reg_val=SPIx_ReadWriteByte(&hspi_NRF24L01,0XFF);//读取寄存器内容\r\n  NRF24L01_SPI_CS_DISABLE();          //禁止SPI传输\t\t    \r\n  return(reg_val);           //返回状态值\r\n}\t\r\n\r\n/**\r\n  * 函数功能: 在指定位置读出指定长度的数据\r\n  * 输入参数: 无\r\n  * 返 回 值: 此次读到的状态寄存器值 \r\n  * 说    明：无\r\n  *           \r\n  */ \r\nuint8_t NRF24L01_Read_Buf(uint8_t reg,uint8_t *pBuf,uint8_t len)\r\n{\r\n\tuint8_t status,uint8_t_ctr;\t   \r\n  \r\n  NRF24L01_SPI_CS_ENABLE();           //使能SPI传输\r\n  status=SPIx_ReadWriteByte(&hspi_NRF24L01,reg);//发送寄存器值(位置),并读取状态值   \t   \r\n \tfor(uint8_t_ctr=0;uint8_t_ctr<len;uint8_t_ctr++)\r\n  {\r\n    pBuf[uint8_t_ctr]=SPIx_ReadWriteByte(&hspi_NRF24L01,0XFF);//读出数据\r\n  }\r\n  NRF24L01_SPI_CS_DISABLE();       //关闭SPI传输\r\n  return status;        //返回读到的状态值\r\n}\r\n\r\n/**\r\n  * 函数功能: 在指定位置写指定长度的数据\r\n  * 输入参数: 无\r\n  * 返 回 值: 无\r\n  * 说    明：reg:寄存器(位置)  *pBuf:数据指针  len:数据长度\r\n  *           \r\n  */ \r\nuint8_t NRF24L01_Write_Buf(uint8_t reg, uint8_t *pBuf, uint8_t len)\r\n{\r\n\tuint8_t status,uint8_t_ctr;\t    \r\n \tNRF24L01_SPI_CS_ENABLE();          //使能SPI传输\r\n  status = SPIx_ReadWriteByte(&hspi_NRF24L01,reg);//发送寄存器值(位置),并读取状态值\r\n  for(uint8_t_ctr=0; uint8_t_ctr<len; uint8_t_ctr++)\r\n  {\r\n    SPIx_ReadWriteByte(&hspi_NRF24L01,*pBuf++); //写入数据\t \r\n  }\r\n  NRF24L01_SPI_CS_DISABLE();       //关闭SPI传输\r\n  return status;          //返回读到的状态值\r\n}\t\t\t\t   \r\n\r\n/**\r\n  * 函数功能: 启动NRF24L01发送一次数据\r\n  * 输入参数: 无\r\n  * 返 回 值: 发送完成状况\r\n  * 说    明：txbuf:待发送数据首地址\r\n  *           \r\n  */ \r\nuint8_t NRF24L01_TxPacket(uint8_t *txbuf)\r\n{\r\n\tuint8_t sta;\r\n\tNRF24L01_CE_LOW();\r\n  NRF24L01_Write_Buf(WR_TX_PLOAD,txbuf,TX_PLOAD_WIDTH);//写数据到TX BUF  32个字节\r\n \tNRF24L01_CE_HIGH();                                  //启动发送\t \r\n  \r\n\twhile(NRF24L01_IRQ_PIN_READ()!=0);                   //等待发送完成\r\n\tsta=NRF24L01_Read_Reg(STATUS);                       //读取状态寄存器的值\t   \r\n\tNRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta);        //清除TX_DS或MAX_RT中断标志\r\n\tif(sta&MAX_TX)                                       //达到最大重发次数\r\n\t{\r\n\t\tNRF24L01_Write_Reg(FLUSH_TX,0xff);                 //清除TX FIFO寄存器 \r\n\t\treturn MAX_TX; \r\n\t}\r\n\tif(sta&TX_OK)                                        //发送完成\r\n\t{\r\n\t\treturn TX_OK;\r\n\t}\r\n\treturn 0xff;                                         //其他原因发送失败\r\n}\r\n\r\n/**\r\n  * 函数功能:启动NRF24L01接收一次数据\r\n  * 输入参数: 无\r\n  * 返 回 值: 无\r\n  * 说    明：无\r\n  *           \r\n  */ \r\nuint8_t NRF24L01_RxPacket(uint8_t *rxbuf)\r\n{\r\n\tuint8_t sta;\t\t    \t\t\t\t\t\t\t   \r\n\tsta=NRF24L01_Read_Reg(STATUS);  //读取状态寄存器的值    \t \r\n\tNRF24L01_Write_Reg(NRF_WRITE_REG+STATUS,sta); //清除TX_DS或MAX_RT中断标志\r\n\tif(sta&RX_OK)//接收到数据\r\n\t{\r\n\t\tNRF24L01_Read_Buf(RD_RX_PLOAD,rxbuf,RX_PLOAD_WIDTH);//读取数据\r\n\t\tNRF24L01_Write_Reg(FLUSH_RX,0xff);//清除RX FIFO寄存器 \r\n\t\treturn 0; \r\n\t}\t\r\n\treturn 1;//没收到任何数据\r\n}\t\t\t\t\t    \r\n\r\n/**\r\n  * 函数功能: 该函数初始化NRF24L01到RX模式\r\n  * 输入参数: 无\r\n  * 返 回 值: 无\r\n  * 说    明：无\r\n  *           \r\n  */ \r\nvoid NRF24L01_RX_Mode(void)\r\n{\r\n\tNRF24L01_CE_LOW();\t  \r\n  NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG, 0x0F);//配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC \r\n  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);    //使能通道0的自动应答    \r\n  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01);//使能通道0的接收地址  \t \r\n  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);\t     //设置RF通信频率\t\t  \r\n  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);//设置TX发射参数,0db增益,2Mbps,低噪声增益开启   \r\n  \r\n  NRF24L01_Write_Reg(NRF_WRITE_REG+RX_PW_P0,RX_PLOAD_WIDTH);//选择通道0的有效数据宽度 \t    \r\n    \r\n  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS,RX_ADR_WIDTH);//写RX节点地址\r\n\t\r\n  NRF24L01_CE_HIGH(); //CE为高,进入接收模式 \r\n  HAL_Delay(1);\r\n}\t\t\t\t\t\t \r\n\r\n/**\r\n  * 函数功能: 该函数初始化NRF24L01到TX模式\r\n  * 输入参数: 无\r\n  * 返 回 值: 无\r\n  * 说    明：无\r\n  *           \r\n  */ \r\nvoid NRF24L01_TX_Mode(void)\r\n{\t\t\t\t\t\t\t\t\t\t\t\t\t\t \r\n\tNRF24L01_CE_LOW();\t    \r\n  NRF24L01_Write_Buf(NRF_WRITE_REG+TX_ADDR,(uint8_t*)TX_ADDRESS,TX_ADR_WIDTH);//写TX节点地址 \r\n  NRF24L01_Write_Buf(NRF_WRITE_REG+RX_ADDR_P0,(uint8_t*)RX_ADDRESS,RX_ADR_WIDTH); //设置TX节点地址,主要为了使能ACK\t  \r\n\r\n  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_AA,0x01);     //使能通道0的自动应答    \r\n  NRF24L01_Write_Reg(NRF_WRITE_REG+EN_RXADDR,0x01); //使能通道0的接收地址  \r\n  NRF24L01_Write_Reg(NRF_WRITE_REG+SETUP_RETR,0xff);//设置自动重发间隔时间:4000us + 86us;最大自动重发次数:15次\r\n  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_CH,40);       //设置RF通道为40\r\n  NRF24L01_Write_Reg(NRF_WRITE_REG+RF_SETUP,0x0f);  //设置TX发射参数,0db增益,2Mbps,低噪声增益开启   \r\n  NRF24L01_Write_Reg(NRF_WRITE_REG+CONFIG,0x0e);    //配置基本工作模式的参数;PWR_UP,EN_CRC,16BIT_CRC,接收模式,开启所有中断\r\n\tNRF24L01_CE_HIGH();//CE为高,10us后启动发送\r\n  HAL_Delay(1);\r\n}\r\n"
        }
    ]
}